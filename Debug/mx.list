
mx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082c0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  080083cc  080083cc  000093cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008440  08008440  0000a164  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08008440  08008440  0000a164  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08008440  08008440  0000a164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008440  08008440  00009440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008444  08008444  00009444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000164  20000000  08008448  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008f4  20000164  080085ac  0000a164  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a58  080085ac  0000aa58  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a164  2**0
                  CONTENTS, READONLY
 12 .debug_info   000136ea  00000000  00000000  0000a18d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036e5  00000000  00000000  0001d877  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001390  00000000  00000000  00020f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000efc  00000000  00000000  000222f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b219  00000000  00000000  000231ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a16e  00000000  00000000  0003e405  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093fe9  00000000  00000000  00058573  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ec55c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050a4  00000000  00000000  000ec5a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  000f1644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000164 	.word	0x20000164
 8000128:	00000000 	.word	0x00000000
 800012c:	080083b4 	.word	0x080083b4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000168 	.word	0x20000168
 8000148:	080083b4 	.word	0x080083b4

0800014c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000152:	1d3b      	adds	r3, r7, #4
 8000154:	2200      	movs	r2, #0
 8000156:	601a      	str	r2, [r3, #0]
 8000158:	605a      	str	r2, [r3, #4]
 800015a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800015c:	4b18      	ldr	r3, [pc, #96]	@ (80001c0 <MX_ADC1_Init+0x74>)
 800015e:	4a19      	ldr	r2, [pc, #100]	@ (80001c4 <MX_ADC1_Init+0x78>)
 8000160:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000162:	4b17      	ldr	r3, [pc, #92]	@ (80001c0 <MX_ADC1_Init+0x74>)
 8000164:	2200      	movs	r2, #0
 8000166:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000168:	4b15      	ldr	r3, [pc, #84]	@ (80001c0 <MX_ADC1_Init+0x74>)
 800016a:	2200      	movs	r2, #0
 800016c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800016e:	4b14      	ldr	r3, [pc, #80]	@ (80001c0 <MX_ADC1_Init+0x74>)
 8000170:	2200      	movs	r2, #0
 8000172:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000174:	4b12      	ldr	r3, [pc, #72]	@ (80001c0 <MX_ADC1_Init+0x74>)
 8000176:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800017a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800017c:	4b10      	ldr	r3, [pc, #64]	@ (80001c0 <MX_ADC1_Init+0x74>)
 800017e:	2200      	movs	r2, #0
 8000180:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000182:	4b0f      	ldr	r3, [pc, #60]	@ (80001c0 <MX_ADC1_Init+0x74>)
 8000184:	2201      	movs	r2, #1
 8000186:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000188:	480d      	ldr	r0, [pc, #52]	@ (80001c0 <MX_ADC1_Init+0x74>)
 800018a:	f000 fbd5 	bl	8000938 <HAL_ADC_Init>
 800018e:	4603      	mov	r3, r0
 8000190:	2b00      	cmp	r3, #0
 8000192:	d001      	beq.n	8000198 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000194:	f000 f9f1 	bl	800057a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000198:	2308      	movs	r3, #8
 800019a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800019c:	2301      	movs	r3, #1
 800019e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80001a0:	2300      	movs	r3, #0
 80001a2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001a4:	1d3b      	adds	r3, r7, #4
 80001a6:	4619      	mov	r1, r3
 80001a8:	4805      	ldr	r0, [pc, #20]	@ (80001c0 <MX_ADC1_Init+0x74>)
 80001aa:	f000 fc9d 	bl	8000ae8 <HAL_ADC_ConfigChannel>
 80001ae:	4603      	mov	r3, r0
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d001      	beq.n	80001b8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80001b4:	f000 f9e1 	bl	800057a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80001b8:	bf00      	nop
 80001ba:	3710      	adds	r7, #16
 80001bc:	46bd      	mov	sp, r7
 80001be:	bd80      	pop	{r7, pc}
 80001c0:	20000180 	.word	0x20000180
 80001c4:	40012400 	.word	0x40012400

080001c8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b088      	sub	sp, #32
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001d0:	f107 0310 	add.w	r3, r7, #16
 80001d4:	2200      	movs	r2, #0
 80001d6:	601a      	str	r2, [r3, #0]
 80001d8:	605a      	str	r2, [r3, #4]
 80001da:	609a      	str	r2, [r3, #8]
 80001dc:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	4a14      	ldr	r2, [pc, #80]	@ (8000234 <HAL_ADC_MspInit+0x6c>)
 80001e4:	4293      	cmp	r3, r2
 80001e6:	d121      	bne.n	800022c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80001e8:	4b13      	ldr	r3, [pc, #76]	@ (8000238 <HAL_ADC_MspInit+0x70>)
 80001ea:	699b      	ldr	r3, [r3, #24]
 80001ec:	4a12      	ldr	r2, [pc, #72]	@ (8000238 <HAL_ADC_MspInit+0x70>)
 80001ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80001f2:	6193      	str	r3, [r2, #24]
 80001f4:	4b10      	ldr	r3, [pc, #64]	@ (8000238 <HAL_ADC_MspInit+0x70>)
 80001f6:	699b      	ldr	r3, [r3, #24]
 80001f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80001fc:	60fb      	str	r3, [r7, #12]
 80001fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000200:	4b0d      	ldr	r3, [pc, #52]	@ (8000238 <HAL_ADC_MspInit+0x70>)
 8000202:	699b      	ldr	r3, [r3, #24]
 8000204:	4a0c      	ldr	r2, [pc, #48]	@ (8000238 <HAL_ADC_MspInit+0x70>)
 8000206:	f043 0308 	orr.w	r3, r3, #8
 800020a:	6193      	str	r3, [r2, #24]
 800020c:	4b0a      	ldr	r3, [pc, #40]	@ (8000238 <HAL_ADC_MspInit+0x70>)
 800020e:	699b      	ldr	r3, [r3, #24]
 8000210:	f003 0308 	and.w	r3, r3, #8
 8000214:	60bb      	str	r3, [r7, #8]
 8000216:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000218:	2301      	movs	r3, #1
 800021a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800021c:	2303      	movs	r3, #3
 800021e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000220:	f107 0310 	add.w	r3, r7, #16
 8000224:	4619      	mov	r1, r3
 8000226:	4805      	ldr	r0, [pc, #20]	@ (800023c <HAL_ADC_MspInit+0x74>)
 8000228:	f000 fea6 	bl	8000f78 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800022c:	bf00      	nop
 800022e:	3720      	adds	r7, #32
 8000230:	46bd      	mov	sp, r7
 8000232:	bd80      	pop	{r7, pc}
 8000234:	40012400 	.word	0x40012400
 8000238:	40021000 	.word	0x40021000
 800023c:	40010c00 	.word	0x40010c00

08000240 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b088      	sub	sp, #32
 8000244:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000246:	f107 0310 	add.w	r3, r7, #16
 800024a:	2200      	movs	r2, #0
 800024c:	601a      	str	r2, [r3, #0]
 800024e:	605a      	str	r2, [r3, #4]
 8000250:	609a      	str	r2, [r3, #8]
 8000252:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000254:	4b29      	ldr	r3, [pc, #164]	@ (80002fc <MX_GPIO_Init+0xbc>)
 8000256:	699b      	ldr	r3, [r3, #24]
 8000258:	4a28      	ldr	r2, [pc, #160]	@ (80002fc <MX_GPIO_Init+0xbc>)
 800025a:	f043 0320 	orr.w	r3, r3, #32
 800025e:	6193      	str	r3, [r2, #24]
 8000260:	4b26      	ldr	r3, [pc, #152]	@ (80002fc <MX_GPIO_Init+0xbc>)
 8000262:	699b      	ldr	r3, [r3, #24]
 8000264:	f003 0320 	and.w	r3, r3, #32
 8000268:	60fb      	str	r3, [r7, #12]
 800026a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800026c:	4b23      	ldr	r3, [pc, #140]	@ (80002fc <MX_GPIO_Init+0xbc>)
 800026e:	699b      	ldr	r3, [r3, #24]
 8000270:	4a22      	ldr	r2, [pc, #136]	@ (80002fc <MX_GPIO_Init+0xbc>)
 8000272:	f043 0304 	orr.w	r3, r3, #4
 8000276:	6193      	str	r3, [r2, #24]
 8000278:	4b20      	ldr	r3, [pc, #128]	@ (80002fc <MX_GPIO_Init+0xbc>)
 800027a:	699b      	ldr	r3, [r3, #24]
 800027c:	f003 0304 	and.w	r3, r3, #4
 8000280:	60bb      	str	r3, [r7, #8]
 8000282:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000284:	4b1d      	ldr	r3, [pc, #116]	@ (80002fc <MX_GPIO_Init+0xbc>)
 8000286:	699b      	ldr	r3, [r3, #24]
 8000288:	4a1c      	ldr	r2, [pc, #112]	@ (80002fc <MX_GPIO_Init+0xbc>)
 800028a:	f043 0308 	orr.w	r3, r3, #8
 800028e:	6193      	str	r3, [r2, #24]
 8000290:	4b1a      	ldr	r3, [pc, #104]	@ (80002fc <MX_GPIO_Init+0xbc>)
 8000292:	699b      	ldr	r3, [r3, #24]
 8000294:	f003 0308 	and.w	r3, r3, #8
 8000298:	607b      	str	r3, [r7, #4]
 800029a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800029c:	2200      	movs	r2, #0
 800029e:	2110      	movs	r1, #16
 80002a0:	4817      	ldr	r0, [pc, #92]	@ (8000300 <MX_GPIO_Init+0xc0>)
 80002a2:	f000 ffed 	bl	8001280 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80002a6:	2310      	movs	r3, #16
 80002a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002aa:	2301      	movs	r3, #1
 80002ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ae:	2300      	movs	r3, #0
 80002b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002b2:	2302      	movs	r3, #2
 80002b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002b6:	f107 0310 	add.w	r3, r7, #16
 80002ba:	4619      	mov	r1, r3
 80002bc:	4810      	ldr	r0, [pc, #64]	@ (8000300 <MX_GPIO_Init+0xc0>)
 80002be:	f000 fe5b 	bl	8000f78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80002c2:	2360      	movs	r3, #96	@ 0x60
 80002c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002c6:	2300      	movs	r3, #0
 80002c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80002ca:	2301      	movs	r3, #1
 80002cc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002ce:	f107 0310 	add.w	r3, r7, #16
 80002d2:	4619      	mov	r1, r3
 80002d4:	480a      	ldr	r0, [pc, #40]	@ (8000300 <MX_GPIO_Init+0xc0>)
 80002d6:	f000 fe4f 	bl	8000f78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80002da:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 80002de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002e0:	2300      	movs	r3, #0
 80002e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80002e4:	2301      	movs	r3, #1
 80002e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002e8:	f107 0310 	add.w	r3, r7, #16
 80002ec:	4619      	mov	r1, r3
 80002ee:	4805      	ldr	r0, [pc, #20]	@ (8000304 <MX_GPIO_Init+0xc4>)
 80002f0:	f000 fe42 	bl	8000f78 <HAL_GPIO_Init>

}
 80002f4:	bf00      	nop
 80002f6:	3720      	adds	r7, #32
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	40021000 	.word	0x40021000
 8000300:	40010800 	.word	0x40010800
 8000304:	40010c00 	.word	0x40010c00

08000308 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800030c:	4b12      	ldr	r3, [pc, #72]	@ (8000358 <MX_I2C1_Init+0x50>)
 800030e:	4a13      	ldr	r2, [pc, #76]	@ (800035c <MX_I2C1_Init+0x54>)
 8000310:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000312:	4b11      	ldr	r3, [pc, #68]	@ (8000358 <MX_I2C1_Init+0x50>)
 8000314:	4a12      	ldr	r2, [pc, #72]	@ (8000360 <MX_I2C1_Init+0x58>)
 8000316:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000318:	4b0f      	ldr	r3, [pc, #60]	@ (8000358 <MX_I2C1_Init+0x50>)
 800031a:	2200      	movs	r2, #0
 800031c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800031e:	4b0e      	ldr	r3, [pc, #56]	@ (8000358 <MX_I2C1_Init+0x50>)
 8000320:	2200      	movs	r2, #0
 8000322:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000324:	4b0c      	ldr	r3, [pc, #48]	@ (8000358 <MX_I2C1_Init+0x50>)
 8000326:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800032a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800032c:	4b0a      	ldr	r3, [pc, #40]	@ (8000358 <MX_I2C1_Init+0x50>)
 800032e:	2200      	movs	r2, #0
 8000330:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000332:	4b09      	ldr	r3, [pc, #36]	@ (8000358 <MX_I2C1_Init+0x50>)
 8000334:	2200      	movs	r2, #0
 8000336:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000338:	4b07      	ldr	r3, [pc, #28]	@ (8000358 <MX_I2C1_Init+0x50>)
 800033a:	2200      	movs	r2, #0
 800033c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800033e:	4b06      	ldr	r3, [pc, #24]	@ (8000358 <MX_I2C1_Init+0x50>)
 8000340:	2200      	movs	r2, #0
 8000342:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000344:	4804      	ldr	r0, [pc, #16]	@ (8000358 <MX_I2C1_Init+0x50>)
 8000346:	f000 ffb3 	bl	80012b0 <HAL_I2C_Init>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000350:	f000 f913 	bl	800057a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000354:	bf00      	nop
 8000356:	bd80      	pop	{r7, pc}
 8000358:	200001b0 	.word	0x200001b0
 800035c:	40005400 	.word	0x40005400
 8000360:	000186a0 	.word	0x000186a0

08000364 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000368:	4b12      	ldr	r3, [pc, #72]	@ (80003b4 <MX_I2C2_Init+0x50>)
 800036a:	4a13      	ldr	r2, [pc, #76]	@ (80003b8 <MX_I2C2_Init+0x54>)
 800036c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800036e:	4b11      	ldr	r3, [pc, #68]	@ (80003b4 <MX_I2C2_Init+0x50>)
 8000370:	4a12      	ldr	r2, [pc, #72]	@ (80003bc <MX_I2C2_Init+0x58>)
 8000372:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000374:	4b0f      	ldr	r3, [pc, #60]	@ (80003b4 <MX_I2C2_Init+0x50>)
 8000376:	2200      	movs	r2, #0
 8000378:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800037a:	4b0e      	ldr	r3, [pc, #56]	@ (80003b4 <MX_I2C2_Init+0x50>)
 800037c:	2200      	movs	r2, #0
 800037e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000380:	4b0c      	ldr	r3, [pc, #48]	@ (80003b4 <MX_I2C2_Init+0x50>)
 8000382:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000386:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000388:	4b0a      	ldr	r3, [pc, #40]	@ (80003b4 <MX_I2C2_Init+0x50>)
 800038a:	2200      	movs	r2, #0
 800038c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800038e:	4b09      	ldr	r3, [pc, #36]	@ (80003b4 <MX_I2C2_Init+0x50>)
 8000390:	2200      	movs	r2, #0
 8000392:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000394:	4b07      	ldr	r3, [pc, #28]	@ (80003b4 <MX_I2C2_Init+0x50>)
 8000396:	2200      	movs	r2, #0
 8000398:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800039a:	4b06      	ldr	r3, [pc, #24]	@ (80003b4 <MX_I2C2_Init+0x50>)
 800039c:	2200      	movs	r2, #0
 800039e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80003a0:	4804      	ldr	r0, [pc, #16]	@ (80003b4 <MX_I2C2_Init+0x50>)
 80003a2:	f000 ff85 	bl	80012b0 <HAL_I2C_Init>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d001      	beq.n	80003b0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80003ac:	f000 f8e5 	bl	800057a <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80003b0:	bf00      	nop
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	20000204 	.word	0x20000204
 80003b8:	40005800 	.word	0x40005800
 80003bc:	000186a0 	.word	0x000186a0

080003c0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b08a      	sub	sp, #40	@ 0x28
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003c8:	f107 0318 	add.w	r3, r7, #24
 80003cc:	2200      	movs	r2, #0
 80003ce:	601a      	str	r2, [r3, #0]
 80003d0:	605a      	str	r2, [r3, #4]
 80003d2:	609a      	str	r2, [r3, #8]
 80003d4:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	4a2b      	ldr	r2, [pc, #172]	@ (8000488 <HAL_I2C_MspInit+0xc8>)
 80003dc:	4293      	cmp	r3, r2
 80003de:	d124      	bne.n	800042a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003e0:	4b2a      	ldr	r3, [pc, #168]	@ (800048c <HAL_I2C_MspInit+0xcc>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	4a29      	ldr	r2, [pc, #164]	@ (800048c <HAL_I2C_MspInit+0xcc>)
 80003e6:	f043 0308 	orr.w	r3, r3, #8
 80003ea:	6193      	str	r3, [r2, #24]
 80003ec:	4b27      	ldr	r3, [pc, #156]	@ (800048c <HAL_I2C_MspInit+0xcc>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	f003 0308 	and.w	r3, r3, #8
 80003f4:	617b      	str	r3, [r7, #20]
 80003f6:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80003f8:	23c0      	movs	r3, #192	@ 0xc0
 80003fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80003fc:	2312      	movs	r3, #18
 80003fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000400:	2303      	movs	r3, #3
 8000402:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000404:	f107 0318 	add.w	r3, r7, #24
 8000408:	4619      	mov	r1, r3
 800040a:	4821      	ldr	r0, [pc, #132]	@ (8000490 <HAL_I2C_MspInit+0xd0>)
 800040c:	f000 fdb4 	bl	8000f78 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000410:	4b1e      	ldr	r3, [pc, #120]	@ (800048c <HAL_I2C_MspInit+0xcc>)
 8000412:	69db      	ldr	r3, [r3, #28]
 8000414:	4a1d      	ldr	r2, [pc, #116]	@ (800048c <HAL_I2C_MspInit+0xcc>)
 8000416:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800041a:	61d3      	str	r3, [r2, #28]
 800041c:	4b1b      	ldr	r3, [pc, #108]	@ (800048c <HAL_I2C_MspInit+0xcc>)
 800041e:	69db      	ldr	r3, [r3, #28]
 8000420:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000424:	613b      	str	r3, [r7, #16]
 8000426:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000428:	e029      	b.n	800047e <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	4a19      	ldr	r2, [pc, #100]	@ (8000494 <HAL_I2C_MspInit+0xd4>)
 8000430:	4293      	cmp	r3, r2
 8000432:	d124      	bne.n	800047e <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000434:	4b15      	ldr	r3, [pc, #84]	@ (800048c <HAL_I2C_MspInit+0xcc>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	4a14      	ldr	r2, [pc, #80]	@ (800048c <HAL_I2C_MspInit+0xcc>)
 800043a:	f043 0308 	orr.w	r3, r3, #8
 800043e:	6193      	str	r3, [r2, #24]
 8000440:	4b12      	ldr	r3, [pc, #72]	@ (800048c <HAL_I2C_MspInit+0xcc>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	f003 0308 	and.w	r3, r3, #8
 8000448:	60fb      	str	r3, [r7, #12]
 800044a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800044c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000450:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000452:	2312      	movs	r3, #18
 8000454:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000456:	2303      	movs	r3, #3
 8000458:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800045a:	f107 0318 	add.w	r3, r7, #24
 800045e:	4619      	mov	r1, r3
 8000460:	480b      	ldr	r0, [pc, #44]	@ (8000490 <HAL_I2C_MspInit+0xd0>)
 8000462:	f000 fd89 	bl	8000f78 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000466:	4b09      	ldr	r3, [pc, #36]	@ (800048c <HAL_I2C_MspInit+0xcc>)
 8000468:	69db      	ldr	r3, [r3, #28]
 800046a:	4a08      	ldr	r2, [pc, #32]	@ (800048c <HAL_I2C_MspInit+0xcc>)
 800046c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000470:	61d3      	str	r3, [r2, #28]
 8000472:	4b06      	ldr	r3, [pc, #24]	@ (800048c <HAL_I2C_MspInit+0xcc>)
 8000474:	69db      	ldr	r3, [r3, #28]
 8000476:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800047a:	60bb      	str	r3, [r7, #8]
 800047c:	68bb      	ldr	r3, [r7, #8]
}
 800047e:	bf00      	nop
 8000480:	3728      	adds	r7, #40	@ 0x28
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	40005400 	.word	0x40005400
 800048c:	40021000 	.word	0x40021000
 8000490:	40010c00 	.word	0x40010c00
 8000494:	40005800 	.word	0x40005800

08000498 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800049c:	f000 f9ea 	bl	8000874 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004a0:	f000 f80e 	bl	80004c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004a4:	f7ff fecc 	bl	8000240 <MX_GPIO_Init>
  MX_ADC1_Init();
 80004a8:	f7ff fe50 	bl	800014c <MX_ADC1_Init>
  MX_I2C1_Init();
 80004ac:	f7ff ff2c 	bl	8000308 <MX_I2C1_Init>
  MX_I2C2_Init();
 80004b0:	f7ff ff58 	bl	8000364 <MX_I2C2_Init>
  MX_TIM1_Init();
 80004b4:	f000 f8d6 	bl	8000664 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 80004b8:	f007 fb98 	bl	8007bec <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004bc:	bf00      	nop
 80004be:	e7fd      	b.n	80004bc <main+0x24>

080004c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b094      	sub	sp, #80	@ 0x50
 80004c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004c6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80004ca:	2228      	movs	r2, #40	@ 0x28
 80004cc:	2100      	movs	r1, #0
 80004ce:	4618      	mov	r0, r3
 80004d0:	f007 ff44 	bl	800835c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004d4:	f107 0314 	add.w	r3, r7, #20
 80004d8:	2200      	movs	r2, #0
 80004da:	601a      	str	r2, [r3, #0]
 80004dc:	605a      	str	r2, [r3, #4]
 80004de:	609a      	str	r2, [r3, #8]
 80004e0:	60da      	str	r2, [r3, #12]
 80004e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004e4:	1d3b      	adds	r3, r7, #4
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]
 80004ea:	605a      	str	r2, [r3, #4]
 80004ec:	609a      	str	r2, [r3, #8]
 80004ee:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004f0:	2301      	movs	r3, #1
 80004f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80004f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004fa:	2300      	movs	r3, #0
 80004fc:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004fe:	2301      	movs	r3, #1
 8000500:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000502:	2302      	movs	r3, #2
 8000504:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000506:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800050a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800050c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000510:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000512:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000516:	4618      	mov	r0, r3
 8000518:	f002 fd58 	bl	8002fcc <HAL_RCC_OscConfig>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d001      	beq.n	8000526 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000522:	f000 f82a 	bl	800057a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000526:	230f      	movs	r3, #15
 8000528:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800052a:	2302      	movs	r3, #2
 800052c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800052e:	2300      	movs	r3, #0
 8000530:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000532:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000536:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000538:	2300      	movs	r3, #0
 800053a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800053c:	f107 0314 	add.w	r3, r7, #20
 8000540:	2102      	movs	r1, #2
 8000542:	4618      	mov	r0, r3
 8000544:	f002 ffc4 	bl	80034d0 <HAL_RCC_ClockConfig>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800054e:	f000 f814 	bl	800057a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000552:	2312      	movs	r3, #18
 8000554:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000556:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800055a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800055c:	2300      	movs	r3, #0
 800055e:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000560:	1d3b      	adds	r3, r7, #4
 8000562:	4618      	mov	r0, r3
 8000564:	f003 f92e 	bl	80037c4 <HAL_RCCEx_PeriphCLKConfig>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800056e:	f000 f804 	bl	800057a <Error_Handler>
  }
}
 8000572:	bf00      	nop
 8000574:	3750      	adds	r7, #80	@ 0x50
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}

0800057a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800057a:	b480      	push	{r7}
 800057c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800057e:	b672      	cpsid	i
}
 8000580:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000582:	bf00      	nop
 8000584:	e7fd      	b.n	8000582 <Error_Handler+0x8>
	...

08000588 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000588:	b480      	push	{r7}
 800058a:	b085      	sub	sp, #20
 800058c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800058e:	4b15      	ldr	r3, [pc, #84]	@ (80005e4 <HAL_MspInit+0x5c>)
 8000590:	699b      	ldr	r3, [r3, #24]
 8000592:	4a14      	ldr	r2, [pc, #80]	@ (80005e4 <HAL_MspInit+0x5c>)
 8000594:	f043 0301 	orr.w	r3, r3, #1
 8000598:	6193      	str	r3, [r2, #24]
 800059a:	4b12      	ldr	r3, [pc, #72]	@ (80005e4 <HAL_MspInit+0x5c>)
 800059c:	699b      	ldr	r3, [r3, #24]
 800059e:	f003 0301 	and.w	r3, r3, #1
 80005a2:	60bb      	str	r3, [r7, #8]
 80005a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a6:	4b0f      	ldr	r3, [pc, #60]	@ (80005e4 <HAL_MspInit+0x5c>)
 80005a8:	69db      	ldr	r3, [r3, #28]
 80005aa:	4a0e      	ldr	r2, [pc, #56]	@ (80005e4 <HAL_MspInit+0x5c>)
 80005ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005b0:	61d3      	str	r3, [r2, #28]
 80005b2:	4b0c      	ldr	r3, [pc, #48]	@ (80005e4 <HAL_MspInit+0x5c>)
 80005b4:	69db      	ldr	r3, [r3, #28]
 80005b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005be:	4b0a      	ldr	r3, [pc, #40]	@ (80005e8 <HAL_MspInit+0x60>)
 80005c0:	685b      	ldr	r3, [r3, #4]
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80005d2:	60fb      	str	r3, [r7, #12]
 80005d4:	4a04      	ldr	r2, [pc, #16]	@ (80005e8 <HAL_MspInit+0x60>)
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005da:	bf00      	nop
 80005dc:	3714      	adds	r7, #20
 80005de:	46bd      	mov	sp, r7
 80005e0:	bc80      	pop	{r7}
 80005e2:	4770      	bx	lr
 80005e4:	40021000 	.word	0x40021000
 80005e8:	40010000 	.word	0x40010000

080005ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005f0:	bf00      	nop
 80005f2:	e7fd      	b.n	80005f0 <NMI_Handler+0x4>

080005f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005f8:	bf00      	nop
 80005fa:	e7fd      	b.n	80005f8 <HardFault_Handler+0x4>

080005fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000600:	bf00      	nop
 8000602:	e7fd      	b.n	8000600 <MemManage_Handler+0x4>

08000604 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000608:	bf00      	nop
 800060a:	e7fd      	b.n	8000608 <BusFault_Handler+0x4>

0800060c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000610:	bf00      	nop
 8000612:	e7fd      	b.n	8000610 <UsageFault_Handler+0x4>

08000614 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000618:	bf00      	nop
 800061a:	46bd      	mov	sp, r7
 800061c:	bc80      	pop	{r7}
 800061e:	4770      	bx	lr

08000620 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000624:	bf00      	nop
 8000626:	46bd      	mov	sp, r7
 8000628:	bc80      	pop	{r7}
 800062a:	4770      	bx	lr

0800062c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000630:	bf00      	nop
 8000632:	46bd      	mov	sp, r7
 8000634:	bc80      	pop	{r7}
 8000636:	4770      	bx	lr

08000638 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800063c:	f000 f960 	bl	8000900 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000640:	bf00      	nop
 8000642:	bd80      	pop	{r7, pc}

08000644 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000648:	4802      	ldr	r0, [pc, #8]	@ (8000654 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800064a:	f001 f891 	bl	8001770 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	2000076c 	.word	0x2000076c

08000658 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800065c:	bf00      	nop
 800065e:	46bd      	mov	sp, r7
 8000660:	bc80      	pop	{r7}
 8000662:	4770      	bx	lr

08000664 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b092      	sub	sp, #72	@ 0x48
 8000668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800066a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000674:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]
 8000684:	615a      	str	r2, [r3, #20]
 8000686:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000688:	1d3b      	adds	r3, r7, #4
 800068a:	2220      	movs	r2, #32
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f007 fe64 	bl	800835c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000694:	4b39      	ldr	r3, [pc, #228]	@ (800077c <MX_TIM1_Init+0x118>)
 8000696:	4a3a      	ldr	r2, [pc, #232]	@ (8000780 <MX_TIM1_Init+0x11c>)
 8000698:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800069a:	4b38      	ldr	r3, [pc, #224]	@ (800077c <MX_TIM1_Init+0x118>)
 800069c:	2200      	movs	r2, #0
 800069e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006a0:	4b36      	ldr	r3, [pc, #216]	@ (800077c <MX_TIM1_Init+0x118>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80006a6:	4b35      	ldr	r3, [pc, #212]	@ (800077c <MX_TIM1_Init+0x118>)
 80006a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80006ac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006ae:	4b33      	ldr	r3, [pc, #204]	@ (800077c <MX_TIM1_Init+0x118>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006b4:	4b31      	ldr	r3, [pc, #196]	@ (800077c <MX_TIM1_Init+0x118>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006ba:	4b30      	ldr	r3, [pc, #192]	@ (800077c <MX_TIM1_Init+0x118>)
 80006bc:	2200      	movs	r2, #0
 80006be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006c0:	482e      	ldr	r0, [pc, #184]	@ (800077c <MX_TIM1_Init+0x118>)
 80006c2:	f003 f935 	bl	8003930 <HAL_TIM_PWM_Init>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80006cc:	f7ff ff55 	bl	800057a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006d0:	2300      	movs	r3, #0
 80006d2:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006d4:	2300      	movs	r3, #0
 80006d6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006d8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80006dc:	4619      	mov	r1, r3
 80006de:	4827      	ldr	r0, [pc, #156]	@ (800077c <MX_TIM1_Init+0x118>)
 80006e0:	f003 fc2e 	bl	8003f40 <HAL_TIMEx_MasterConfigSynchronization>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80006ea:	f7ff ff46 	bl	800057a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006ee:	2360      	movs	r3, #96	@ 0x60
 80006f0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006f6:	2300      	movs	r3, #0
 80006f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006fa:	2300      	movs	r3, #0
 80006fc:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006fe:	2300      	movs	r3, #0
 8000700:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000702:	2300      	movs	r3, #0
 8000704:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000706:	2300      	movs	r3, #0
 8000708:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800070a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800070e:	2200      	movs	r2, #0
 8000710:	4619      	mov	r1, r3
 8000712:	481a      	ldr	r0, [pc, #104]	@ (800077c <MX_TIM1_Init+0x118>)
 8000714:	f003 f95c 	bl	80039d0 <HAL_TIM_PWM_ConfigChannel>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800071e:	f7ff ff2c 	bl	800057a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000722:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000726:	2204      	movs	r2, #4
 8000728:	4619      	mov	r1, r3
 800072a:	4814      	ldr	r0, [pc, #80]	@ (800077c <MX_TIM1_Init+0x118>)
 800072c:	f003 f950 	bl	80039d0 <HAL_TIM_PWM_ConfigChannel>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000736:	f7ff ff20 	bl	800057a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800073a:	2300      	movs	r3, #0
 800073c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800073e:	2300      	movs	r3, #0
 8000740:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000742:	2300      	movs	r3, #0
 8000744:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000746:	2300      	movs	r3, #0
 8000748:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800074e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000752:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000754:	2300      	movs	r3, #0
 8000756:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000758:	1d3b      	adds	r3, r7, #4
 800075a:	4619      	mov	r1, r3
 800075c:	4807      	ldr	r0, [pc, #28]	@ (800077c <MX_TIM1_Init+0x118>)
 800075e:	f003 fc4d 	bl	8003ffc <HAL_TIMEx_ConfigBreakDeadTime>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000768:	f7ff ff07 	bl	800057a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800076c:	4803      	ldr	r0, [pc, #12]	@ (800077c <MX_TIM1_Init+0x118>)
 800076e:	f000 f827 	bl	80007c0 <HAL_TIM_MspPostInit>

}
 8000772:	bf00      	nop
 8000774:	3748      	adds	r7, #72	@ 0x48
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20000258 	.word	0x20000258
 8000780:	40012c00 	.word	0x40012c00

08000784 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000784:	b480      	push	{r7}
 8000786:	b085      	sub	sp, #20
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a09      	ldr	r2, [pc, #36]	@ (80007b8 <HAL_TIM_PWM_MspInit+0x34>)
 8000792:	4293      	cmp	r3, r2
 8000794:	d10b      	bne.n	80007ae <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000796:	4b09      	ldr	r3, [pc, #36]	@ (80007bc <HAL_TIM_PWM_MspInit+0x38>)
 8000798:	699b      	ldr	r3, [r3, #24]
 800079a:	4a08      	ldr	r2, [pc, #32]	@ (80007bc <HAL_TIM_PWM_MspInit+0x38>)
 800079c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80007a0:	6193      	str	r3, [r2, #24]
 80007a2:	4b06      	ldr	r3, [pc, #24]	@ (80007bc <HAL_TIM_PWM_MspInit+0x38>)
 80007a4:	699b      	ldr	r3, [r3, #24]
 80007a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80007ae:	bf00      	nop
 80007b0:	3714      	adds	r7, #20
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bc80      	pop	{r7}
 80007b6:	4770      	bx	lr
 80007b8:	40012c00 	.word	0x40012c00
 80007bc:	40021000 	.word	0x40021000

080007c0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b088      	sub	sp, #32
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c8:	f107 0310 	add.w	r3, r7, #16
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4a10      	ldr	r2, [pc, #64]	@ (800081c <HAL_TIM_MspPostInit+0x5c>)
 80007dc:	4293      	cmp	r3, r2
 80007de:	d118      	bne.n	8000812 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000820 <HAL_TIM_MspPostInit+0x60>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	4a0e      	ldr	r2, [pc, #56]	@ (8000820 <HAL_TIM_MspPostInit+0x60>)
 80007e6:	f043 0304 	orr.w	r3, r3, #4
 80007ea:	6193      	str	r3, [r2, #24]
 80007ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000820 <HAL_TIM_MspPostInit+0x60>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	f003 0304 	and.w	r3, r3, #4
 80007f4:	60fb      	str	r3, [r7, #12]
 80007f6:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007f8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80007fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fe:	2302      	movs	r3, #2
 8000800:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000802:	2302      	movs	r3, #2
 8000804:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000806:	f107 0310 	add.w	r3, r7, #16
 800080a:	4619      	mov	r1, r3
 800080c:	4805      	ldr	r0, [pc, #20]	@ (8000824 <HAL_TIM_MspPostInit+0x64>)
 800080e:	f000 fbb3 	bl	8000f78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000812:	bf00      	nop
 8000814:	3720      	adds	r7, #32
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40012c00 	.word	0x40012c00
 8000820:	40021000 	.word	0x40021000
 8000824:	40010800 	.word	0x40010800

08000828 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000828:	f7ff ff16 	bl	8000658 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800082c:	480b      	ldr	r0, [pc, #44]	@ (800085c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800082e:	490c      	ldr	r1, [pc, #48]	@ (8000860 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000830:	4a0c      	ldr	r2, [pc, #48]	@ (8000864 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000832:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000834:	e002      	b.n	800083c <LoopCopyDataInit>

08000836 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000836:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000838:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800083a:	3304      	adds	r3, #4

0800083c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800083c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800083e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000840:	d3f9      	bcc.n	8000836 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000842:	4a09      	ldr	r2, [pc, #36]	@ (8000868 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000844:	4c09      	ldr	r4, [pc, #36]	@ (800086c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000846:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000848:	e001      	b.n	800084e <LoopFillZerobss>

0800084a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800084a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800084c:	3204      	adds	r2, #4

0800084e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800084e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000850:	d3fb      	bcc.n	800084a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000852:	f007 fd8b 	bl	800836c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000856:	f7ff fe1f 	bl	8000498 <main>
  bx lr
 800085a:	4770      	bx	lr
  ldr r0, =_sdata
 800085c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000860:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 8000864:	08008448 	.word	0x08008448
  ldr r2, =_sbss
 8000868:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 800086c:	20000a58 	.word	0x20000a58

08000870 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000870:	e7fe      	b.n	8000870 <ADC1_2_IRQHandler>
	...

08000874 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000878:	4b08      	ldr	r3, [pc, #32]	@ (800089c <HAL_Init+0x28>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a07      	ldr	r2, [pc, #28]	@ (800089c <HAL_Init+0x28>)
 800087e:	f043 0310 	orr.w	r3, r3, #16
 8000882:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000884:	2003      	movs	r0, #3
 8000886:	f000 fb35 	bl	8000ef4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800088a:	200f      	movs	r0, #15
 800088c:	f000 f808 	bl	80008a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000890:	f7ff fe7a 	bl	8000588 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000894:	2300      	movs	r3, #0
}
 8000896:	4618      	mov	r0, r3
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40022000 	.word	0x40022000

080008a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008a8:	4b12      	ldr	r3, [pc, #72]	@ (80008f4 <HAL_InitTick+0x54>)
 80008aa:	681a      	ldr	r2, [r3, #0]
 80008ac:	4b12      	ldr	r3, [pc, #72]	@ (80008f8 <HAL_InitTick+0x58>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	4619      	mov	r1, r3
 80008b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80008be:	4618      	mov	r0, r3
 80008c0:	f000 fb4d 	bl	8000f5e <HAL_SYSTICK_Config>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008ca:	2301      	movs	r3, #1
 80008cc:	e00e      	b.n	80008ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	2b0f      	cmp	r3, #15
 80008d2:	d80a      	bhi.n	80008ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008d4:	2200      	movs	r2, #0
 80008d6:	6879      	ldr	r1, [r7, #4]
 80008d8:	f04f 30ff 	mov.w	r0, #4294967295
 80008dc:	f000 fb15 	bl	8000f0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008e0:	4a06      	ldr	r2, [pc, #24]	@ (80008fc <HAL_InitTick+0x5c>)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008e6:	2300      	movs	r3, #0
 80008e8:	e000      	b.n	80008ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008ea:	2301      	movs	r3, #1
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	3708      	adds	r7, #8
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20000000 	.word	0x20000000
 80008f8:	20000008 	.word	0x20000008
 80008fc:	20000004 	.word	0x20000004

08000900 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000904:	4b05      	ldr	r3, [pc, #20]	@ (800091c <HAL_IncTick+0x1c>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	461a      	mov	r2, r3
 800090a:	4b05      	ldr	r3, [pc, #20]	@ (8000920 <HAL_IncTick+0x20>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4413      	add	r3, r2
 8000910:	4a03      	ldr	r2, [pc, #12]	@ (8000920 <HAL_IncTick+0x20>)
 8000912:	6013      	str	r3, [r2, #0]
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	bc80      	pop	{r7}
 800091a:	4770      	bx	lr
 800091c:	20000008 	.word	0x20000008
 8000920:	200002a0 	.word	0x200002a0

08000924 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  return uwTick;
 8000928:	4b02      	ldr	r3, [pc, #8]	@ (8000934 <HAL_GetTick+0x10>)
 800092a:	681b      	ldr	r3, [r3, #0]
}
 800092c:	4618      	mov	r0, r3
 800092e:	46bd      	mov	sp, r7
 8000930:	bc80      	pop	{r7}
 8000932:	4770      	bx	lr
 8000934:	200002a0 	.word	0x200002a0

08000938 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b086      	sub	sp, #24
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000940:	2300      	movs	r3, #0
 8000942:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000944:	2300      	movs	r3, #0
 8000946:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000948:	2300      	movs	r3, #0
 800094a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800094c:	2300      	movs	r3, #0
 800094e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d101      	bne.n	800095a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000956:	2301      	movs	r3, #1
 8000958:	e0be      	b.n	8000ad8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	689b      	ldr	r3, [r3, #8]
 800095e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000964:	2b00      	cmp	r3, #0
 8000966:	d109      	bne.n	800097c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	2200      	movs	r2, #0
 800096c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	2200      	movs	r2, #0
 8000972:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000976:	6878      	ldr	r0, [r7, #4]
 8000978:	f7ff fc26 	bl	80001c8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800097c:	6878      	ldr	r0, [r7, #4]
 800097e:	f000 f9ab 	bl	8000cd8 <ADC_ConversionStop_Disable>
 8000982:	4603      	mov	r3, r0
 8000984:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800098a:	f003 0310 	and.w	r3, r3, #16
 800098e:	2b00      	cmp	r3, #0
 8000990:	f040 8099 	bne.w	8000ac6 <HAL_ADC_Init+0x18e>
 8000994:	7dfb      	ldrb	r3, [r7, #23]
 8000996:	2b00      	cmp	r3, #0
 8000998:	f040 8095 	bne.w	8000ac6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009a0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80009a4:	f023 0302 	bic.w	r3, r3, #2
 80009a8:	f043 0202 	orr.w	r2, r3, #2
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80009b8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	7b1b      	ldrb	r3, [r3, #12]
 80009be:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80009c0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80009c2:	68ba      	ldr	r2, [r7, #8]
 80009c4:	4313      	orrs	r3, r2
 80009c6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	689b      	ldr	r3, [r3, #8]
 80009cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80009d0:	d003      	beq.n	80009da <HAL_ADC_Init+0xa2>
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	689b      	ldr	r3, [r3, #8]
 80009d6:	2b01      	cmp	r3, #1
 80009d8:	d102      	bne.n	80009e0 <HAL_ADC_Init+0xa8>
 80009da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009de:	e000      	b.n	80009e2 <HAL_ADC_Init+0xaa>
 80009e0:	2300      	movs	r3, #0
 80009e2:	693a      	ldr	r2, [r7, #16]
 80009e4:	4313      	orrs	r3, r2
 80009e6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	7d1b      	ldrb	r3, [r3, #20]
 80009ec:	2b01      	cmp	r3, #1
 80009ee:	d119      	bne.n	8000a24 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	7b1b      	ldrb	r3, [r3, #12]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d109      	bne.n	8000a0c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	699b      	ldr	r3, [r3, #24]
 80009fc:	3b01      	subs	r3, #1
 80009fe:	035a      	lsls	r2, r3, #13
 8000a00:	693b      	ldr	r3, [r7, #16]
 8000a02:	4313      	orrs	r3, r2
 8000a04:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000a08:	613b      	str	r3, [r7, #16]
 8000a0a:	e00b      	b.n	8000a24 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a10:	f043 0220 	orr.w	r2, r3, #32
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a1c:	f043 0201 	orr.w	r2, r3, #1
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	693a      	ldr	r2, [r7, #16]
 8000a34:	430a      	orrs	r2, r1
 8000a36:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	689a      	ldr	r2, [r3, #8]
 8000a3e:	4b28      	ldr	r3, [pc, #160]	@ (8000ae0 <HAL_ADC_Init+0x1a8>)
 8000a40:	4013      	ands	r3, r2
 8000a42:	687a      	ldr	r2, [r7, #4]
 8000a44:	6812      	ldr	r2, [r2, #0]
 8000a46:	68b9      	ldr	r1, [r7, #8]
 8000a48:	430b      	orrs	r3, r1
 8000a4a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	689b      	ldr	r3, [r3, #8]
 8000a50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000a54:	d003      	beq.n	8000a5e <HAL_ADC_Init+0x126>
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	689b      	ldr	r3, [r3, #8]
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d104      	bne.n	8000a68 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	691b      	ldr	r3, [r3, #16]
 8000a62:	3b01      	subs	r3, #1
 8000a64:	051b      	lsls	r3, r3, #20
 8000a66:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a6e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	68fa      	ldr	r2, [r7, #12]
 8000a78:	430a      	orrs	r2, r1
 8000a7a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	689a      	ldr	r2, [r3, #8]
 8000a82:	4b18      	ldr	r3, [pc, #96]	@ (8000ae4 <HAL_ADC_Init+0x1ac>)
 8000a84:	4013      	ands	r3, r2
 8000a86:	68ba      	ldr	r2, [r7, #8]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	d10b      	bne.n	8000aa4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2200      	movs	r2, #0
 8000a90:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a96:	f023 0303 	bic.w	r3, r3, #3
 8000a9a:	f043 0201 	orr.w	r2, r3, #1
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000aa2:	e018      	b.n	8000ad6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000aa8:	f023 0312 	bic.w	r3, r3, #18
 8000aac:	f043 0210 	orr.w	r2, r3, #16
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ab8:	f043 0201 	orr.w	r2, r3, #1
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ac4:	e007      	b.n	8000ad6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000aca:	f043 0210 	orr.w	r2, r3, #16
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000ad6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3718      	adds	r7, #24
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	ffe1f7fd 	.word	0xffe1f7fd
 8000ae4:	ff1f0efe 	.word	0xff1f0efe

08000ae8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000ae8:	b480      	push	{r7}
 8000aea:	b085      	sub	sp, #20
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
 8000af0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000af2:	2300      	movs	r3, #0
 8000af4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000af6:	2300      	movs	r3, #0
 8000af8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d101      	bne.n	8000b08 <HAL_ADC_ConfigChannel+0x20>
 8000b04:	2302      	movs	r3, #2
 8000b06:	e0dc      	b.n	8000cc2 <HAL_ADC_ConfigChannel+0x1da>
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	2b06      	cmp	r3, #6
 8000b16:	d81c      	bhi.n	8000b52 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	685a      	ldr	r2, [r3, #4]
 8000b22:	4613      	mov	r3, r2
 8000b24:	009b      	lsls	r3, r3, #2
 8000b26:	4413      	add	r3, r2
 8000b28:	3b05      	subs	r3, #5
 8000b2a:	221f      	movs	r2, #31
 8000b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b30:	43db      	mvns	r3, r3
 8000b32:	4019      	ands	r1, r3
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	6818      	ldr	r0, [r3, #0]
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	685a      	ldr	r2, [r3, #4]
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	009b      	lsls	r3, r3, #2
 8000b40:	4413      	add	r3, r2
 8000b42:	3b05      	subs	r3, #5
 8000b44:	fa00 f203 	lsl.w	r2, r0, r3
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	430a      	orrs	r2, r1
 8000b4e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b50:	e03c      	b.n	8000bcc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	2b0c      	cmp	r3, #12
 8000b58:	d81c      	bhi.n	8000b94 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	685a      	ldr	r2, [r3, #4]
 8000b64:	4613      	mov	r3, r2
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	4413      	add	r3, r2
 8000b6a:	3b23      	subs	r3, #35	@ 0x23
 8000b6c:	221f      	movs	r2, #31
 8000b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b72:	43db      	mvns	r3, r3
 8000b74:	4019      	ands	r1, r3
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	6818      	ldr	r0, [r3, #0]
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	685a      	ldr	r2, [r3, #4]
 8000b7e:	4613      	mov	r3, r2
 8000b80:	009b      	lsls	r3, r3, #2
 8000b82:	4413      	add	r3, r2
 8000b84:	3b23      	subs	r3, #35	@ 0x23
 8000b86:	fa00 f203 	lsl.w	r2, r0, r3
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	430a      	orrs	r2, r1
 8000b90:	631a      	str	r2, [r3, #48]	@ 0x30
 8000b92:	e01b      	b.n	8000bcc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	685a      	ldr	r2, [r3, #4]
 8000b9e:	4613      	mov	r3, r2
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	4413      	add	r3, r2
 8000ba4:	3b41      	subs	r3, #65	@ 0x41
 8000ba6:	221f      	movs	r2, #31
 8000ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bac:	43db      	mvns	r3, r3
 8000bae:	4019      	ands	r1, r3
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	6818      	ldr	r0, [r3, #0]
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	685a      	ldr	r2, [r3, #4]
 8000bb8:	4613      	mov	r3, r2
 8000bba:	009b      	lsls	r3, r3, #2
 8000bbc:	4413      	add	r3, r2
 8000bbe:	3b41      	subs	r3, #65	@ 0x41
 8000bc0:	fa00 f203 	lsl.w	r2, r0, r3
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	430a      	orrs	r2, r1
 8000bca:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2b09      	cmp	r3, #9
 8000bd2:	d91c      	bls.n	8000c0e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	68d9      	ldr	r1, [r3, #12]
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	4613      	mov	r3, r2
 8000be0:	005b      	lsls	r3, r3, #1
 8000be2:	4413      	add	r3, r2
 8000be4:	3b1e      	subs	r3, #30
 8000be6:	2207      	movs	r2, #7
 8000be8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bec:	43db      	mvns	r3, r3
 8000bee:	4019      	ands	r1, r3
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	6898      	ldr	r0, [r3, #8]
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	4613      	mov	r3, r2
 8000bfa:	005b      	lsls	r3, r3, #1
 8000bfc:	4413      	add	r3, r2
 8000bfe:	3b1e      	subs	r3, #30
 8000c00:	fa00 f203 	lsl.w	r2, r0, r3
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	430a      	orrs	r2, r1
 8000c0a:	60da      	str	r2, [r3, #12]
 8000c0c:	e019      	b.n	8000c42 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	6919      	ldr	r1, [r3, #16]
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	4613      	mov	r3, r2
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	4413      	add	r3, r2
 8000c1e:	2207      	movs	r2, #7
 8000c20:	fa02 f303 	lsl.w	r3, r2, r3
 8000c24:	43db      	mvns	r3, r3
 8000c26:	4019      	ands	r1, r3
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	6898      	ldr	r0, [r3, #8]
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	4613      	mov	r3, r2
 8000c32:	005b      	lsls	r3, r3, #1
 8000c34:	4413      	add	r3, r2
 8000c36:	fa00 f203 	lsl.w	r2, r0, r3
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	430a      	orrs	r2, r1
 8000c40:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	2b10      	cmp	r3, #16
 8000c48:	d003      	beq.n	8000c52 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000c4e:	2b11      	cmp	r3, #17
 8000c50:	d132      	bne.n	8000cb8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a1d      	ldr	r2, [pc, #116]	@ (8000ccc <HAL_ADC_ConfigChannel+0x1e4>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d125      	bne.n	8000ca8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	689b      	ldr	r3, [r3, #8]
 8000c62:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d126      	bne.n	8000cb8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	689a      	ldr	r2, [r3, #8]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8000c78:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	2b10      	cmp	r3, #16
 8000c80:	d11a      	bne.n	8000cb8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000c82:	4b13      	ldr	r3, [pc, #76]	@ (8000cd0 <HAL_ADC_ConfigChannel+0x1e8>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a13      	ldr	r2, [pc, #76]	@ (8000cd4 <HAL_ADC_ConfigChannel+0x1ec>)
 8000c88:	fba2 2303 	umull	r2, r3, r2, r3
 8000c8c:	0c9a      	lsrs	r2, r3, #18
 8000c8e:	4613      	mov	r3, r2
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	4413      	add	r3, r2
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000c98:	e002      	b.n	8000ca0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	3b01      	subs	r3, #1
 8000c9e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d1f9      	bne.n	8000c9a <HAL_ADC_ConfigChannel+0x1b2>
 8000ca6:	e007      	b.n	8000cb8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cac:	f043 0220 	orr.w	r2, r3, #32
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3714      	adds	r7, #20
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bc80      	pop	{r7}
 8000cca:	4770      	bx	lr
 8000ccc:	40012400 	.word	0x40012400
 8000cd0:	20000000 	.word	0x20000000
 8000cd4:	431bde83 	.word	0x431bde83

08000cd8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	689b      	ldr	r3, [r3, #8]
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d12e      	bne.n	8000d50 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	689a      	ldr	r2, [r3, #8]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f022 0201 	bic.w	r2, r2, #1
 8000d00:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000d02:	f7ff fe0f 	bl	8000924 <HAL_GetTick>
 8000d06:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000d08:	e01b      	b.n	8000d42 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000d0a:	f7ff fe0b 	bl	8000924 <HAL_GetTick>
 8000d0e:	4602      	mov	r2, r0
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	1ad3      	subs	r3, r2, r3
 8000d14:	2b02      	cmp	r3, #2
 8000d16:	d914      	bls.n	8000d42 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	689b      	ldr	r3, [r3, #8]
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d10d      	bne.n	8000d42 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d2a:	f043 0210 	orr.w	r2, r3, #16
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d36:	f043 0201 	orr.w	r2, r3, #1
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e007      	b.n	8000d52 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	689b      	ldr	r3, [r3, #8]
 8000d48:	f003 0301 	and.w	r3, r3, #1
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d0dc      	beq.n	8000d0a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3710      	adds	r7, #16
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
	...

08000d5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f003 0307 	and.w	r3, r3, #7
 8000d6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000da0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d72:	68ba      	ldr	r2, [r7, #8]
 8000d74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d78:	4013      	ands	r3, r2
 8000d7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d8e:	4a04      	ldr	r2, [pc, #16]	@ (8000da0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	60d3      	str	r3, [r2, #12]
}
 8000d94:	bf00      	nop
 8000d96:	3714      	adds	r7, #20
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bc80      	pop	{r7}
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000da8:	4b04      	ldr	r3, [pc, #16]	@ (8000dbc <__NVIC_GetPriorityGrouping+0x18>)
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	0a1b      	lsrs	r3, r3, #8
 8000dae:	f003 0307 	and.w	r3, r3, #7
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bc80      	pop	{r7}
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	db0b      	blt.n	8000dea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	f003 021f 	and.w	r2, r3, #31
 8000dd8:	4906      	ldr	r1, [pc, #24]	@ (8000df4 <__NVIC_EnableIRQ+0x34>)
 8000dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dde:	095b      	lsrs	r3, r3, #5
 8000de0:	2001      	movs	r0, #1
 8000de2:	fa00 f202 	lsl.w	r2, r0, r2
 8000de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dea:	bf00      	nop
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bc80      	pop	{r7}
 8000df2:	4770      	bx	lr
 8000df4:	e000e100 	.word	0xe000e100

08000df8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	6039      	str	r1, [r7, #0]
 8000e02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	db0a      	blt.n	8000e22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	b2da      	uxtb	r2, r3
 8000e10:	490c      	ldr	r1, [pc, #48]	@ (8000e44 <__NVIC_SetPriority+0x4c>)
 8000e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e16:	0112      	lsls	r2, r2, #4
 8000e18:	b2d2      	uxtb	r2, r2
 8000e1a:	440b      	add	r3, r1
 8000e1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e20:	e00a      	b.n	8000e38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	b2da      	uxtb	r2, r3
 8000e26:	4908      	ldr	r1, [pc, #32]	@ (8000e48 <__NVIC_SetPriority+0x50>)
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	f003 030f 	and.w	r3, r3, #15
 8000e2e:	3b04      	subs	r3, #4
 8000e30:	0112      	lsls	r2, r2, #4
 8000e32:	b2d2      	uxtb	r2, r2
 8000e34:	440b      	add	r3, r1
 8000e36:	761a      	strb	r2, [r3, #24]
}
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bc80      	pop	{r7}
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	e000e100 	.word	0xe000e100
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b089      	sub	sp, #36	@ 0x24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	f003 0307 	and.w	r3, r3, #7
 8000e5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	f1c3 0307 	rsb	r3, r3, #7
 8000e66:	2b04      	cmp	r3, #4
 8000e68:	bf28      	it	cs
 8000e6a:	2304      	movcs	r3, #4
 8000e6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	3304      	adds	r3, #4
 8000e72:	2b06      	cmp	r3, #6
 8000e74:	d902      	bls.n	8000e7c <NVIC_EncodePriority+0x30>
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	3b03      	subs	r3, #3
 8000e7a:	e000      	b.n	8000e7e <NVIC_EncodePriority+0x32>
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e80:	f04f 32ff 	mov.w	r2, #4294967295
 8000e84:	69bb      	ldr	r3, [r7, #24]
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	43da      	mvns	r2, r3
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	401a      	ands	r2, r3
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e94:	f04f 31ff 	mov.w	r1, #4294967295
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9e:	43d9      	mvns	r1, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea4:	4313      	orrs	r3, r2
         );
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3724      	adds	r7, #36	@ 0x24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bc80      	pop	{r7}
 8000eae:	4770      	bx	lr

08000eb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	3b01      	subs	r3, #1
 8000ebc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ec0:	d301      	bcc.n	8000ec6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e00f      	b.n	8000ee6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ec6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef0 <SysTick_Config+0x40>)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ece:	210f      	movs	r1, #15
 8000ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed4:	f7ff ff90 	bl	8000df8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ed8:	4b05      	ldr	r3, [pc, #20]	@ (8000ef0 <SysTick_Config+0x40>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ede:	4b04      	ldr	r3, [pc, #16]	@ (8000ef0 <SysTick_Config+0x40>)
 8000ee0:	2207      	movs	r2, #7
 8000ee2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	e000e010 	.word	0xe000e010

08000ef4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f7ff ff2d 	bl	8000d5c <__NVIC_SetPriorityGrouping>
}
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b086      	sub	sp, #24
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	4603      	mov	r3, r0
 8000f12:	60b9      	str	r1, [r7, #8]
 8000f14:	607a      	str	r2, [r7, #4]
 8000f16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f1c:	f7ff ff42 	bl	8000da4 <__NVIC_GetPriorityGrouping>
 8000f20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	68b9      	ldr	r1, [r7, #8]
 8000f26:	6978      	ldr	r0, [r7, #20]
 8000f28:	f7ff ff90 	bl	8000e4c <NVIC_EncodePriority>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f32:	4611      	mov	r1, r2
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff ff5f 	bl	8000df8 <__NVIC_SetPriority>
}
 8000f3a:	bf00      	nop
 8000f3c:	3718      	adds	r7, #24
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b082      	sub	sp, #8
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	4603      	mov	r3, r0
 8000f4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff ff35 	bl	8000dc0 <__NVIC_EnableIRQ>
}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b082      	sub	sp, #8
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f7ff ffa2 	bl	8000eb0 <SysTick_Config>
 8000f6c:	4603      	mov	r3, r0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
	...

08000f78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b08b      	sub	sp, #44	@ 0x2c
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f82:	2300      	movs	r3, #0
 8000f84:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f86:	2300      	movs	r3, #0
 8000f88:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f8a:	e169      	b.n	8001260 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	69fa      	ldr	r2, [r7, #28]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	f040 8158 	bne.w	800125a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	4a9a      	ldr	r2, [pc, #616]	@ (8001218 <HAL_GPIO_Init+0x2a0>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d05e      	beq.n	8001072 <HAL_GPIO_Init+0xfa>
 8000fb4:	4a98      	ldr	r2, [pc, #608]	@ (8001218 <HAL_GPIO_Init+0x2a0>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d875      	bhi.n	80010a6 <HAL_GPIO_Init+0x12e>
 8000fba:	4a98      	ldr	r2, [pc, #608]	@ (800121c <HAL_GPIO_Init+0x2a4>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d058      	beq.n	8001072 <HAL_GPIO_Init+0xfa>
 8000fc0:	4a96      	ldr	r2, [pc, #600]	@ (800121c <HAL_GPIO_Init+0x2a4>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d86f      	bhi.n	80010a6 <HAL_GPIO_Init+0x12e>
 8000fc6:	4a96      	ldr	r2, [pc, #600]	@ (8001220 <HAL_GPIO_Init+0x2a8>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d052      	beq.n	8001072 <HAL_GPIO_Init+0xfa>
 8000fcc:	4a94      	ldr	r2, [pc, #592]	@ (8001220 <HAL_GPIO_Init+0x2a8>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d869      	bhi.n	80010a6 <HAL_GPIO_Init+0x12e>
 8000fd2:	4a94      	ldr	r2, [pc, #592]	@ (8001224 <HAL_GPIO_Init+0x2ac>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d04c      	beq.n	8001072 <HAL_GPIO_Init+0xfa>
 8000fd8:	4a92      	ldr	r2, [pc, #584]	@ (8001224 <HAL_GPIO_Init+0x2ac>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d863      	bhi.n	80010a6 <HAL_GPIO_Init+0x12e>
 8000fde:	4a92      	ldr	r2, [pc, #584]	@ (8001228 <HAL_GPIO_Init+0x2b0>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d046      	beq.n	8001072 <HAL_GPIO_Init+0xfa>
 8000fe4:	4a90      	ldr	r2, [pc, #576]	@ (8001228 <HAL_GPIO_Init+0x2b0>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d85d      	bhi.n	80010a6 <HAL_GPIO_Init+0x12e>
 8000fea:	2b12      	cmp	r3, #18
 8000fec:	d82a      	bhi.n	8001044 <HAL_GPIO_Init+0xcc>
 8000fee:	2b12      	cmp	r3, #18
 8000ff0:	d859      	bhi.n	80010a6 <HAL_GPIO_Init+0x12e>
 8000ff2:	a201      	add	r2, pc, #4	@ (adr r2, 8000ff8 <HAL_GPIO_Init+0x80>)
 8000ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ff8:	08001073 	.word	0x08001073
 8000ffc:	0800104d 	.word	0x0800104d
 8001000:	0800105f 	.word	0x0800105f
 8001004:	080010a1 	.word	0x080010a1
 8001008:	080010a7 	.word	0x080010a7
 800100c:	080010a7 	.word	0x080010a7
 8001010:	080010a7 	.word	0x080010a7
 8001014:	080010a7 	.word	0x080010a7
 8001018:	080010a7 	.word	0x080010a7
 800101c:	080010a7 	.word	0x080010a7
 8001020:	080010a7 	.word	0x080010a7
 8001024:	080010a7 	.word	0x080010a7
 8001028:	080010a7 	.word	0x080010a7
 800102c:	080010a7 	.word	0x080010a7
 8001030:	080010a7 	.word	0x080010a7
 8001034:	080010a7 	.word	0x080010a7
 8001038:	080010a7 	.word	0x080010a7
 800103c:	08001055 	.word	0x08001055
 8001040:	08001069 	.word	0x08001069
 8001044:	4a79      	ldr	r2, [pc, #484]	@ (800122c <HAL_GPIO_Init+0x2b4>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d013      	beq.n	8001072 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800104a:	e02c      	b.n	80010a6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	623b      	str	r3, [r7, #32]
          break;
 8001052:	e029      	b.n	80010a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	3304      	adds	r3, #4
 800105a:	623b      	str	r3, [r7, #32]
          break;
 800105c:	e024      	b.n	80010a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	68db      	ldr	r3, [r3, #12]
 8001062:	3308      	adds	r3, #8
 8001064:	623b      	str	r3, [r7, #32]
          break;
 8001066:	e01f      	b.n	80010a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	330c      	adds	r3, #12
 800106e:	623b      	str	r3, [r7, #32]
          break;
 8001070:	e01a      	b.n	80010a8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d102      	bne.n	8001080 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800107a:	2304      	movs	r3, #4
 800107c:	623b      	str	r3, [r7, #32]
          break;
 800107e:	e013      	b.n	80010a8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	2b01      	cmp	r3, #1
 8001086:	d105      	bne.n	8001094 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001088:	2308      	movs	r3, #8
 800108a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	69fa      	ldr	r2, [r7, #28]
 8001090:	611a      	str	r2, [r3, #16]
          break;
 8001092:	e009      	b.n	80010a8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001094:	2308      	movs	r3, #8
 8001096:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	69fa      	ldr	r2, [r7, #28]
 800109c:	615a      	str	r2, [r3, #20]
          break;
 800109e:	e003      	b.n	80010a8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010a0:	2300      	movs	r3, #0
 80010a2:	623b      	str	r3, [r7, #32]
          break;
 80010a4:	e000      	b.n	80010a8 <HAL_GPIO_Init+0x130>
          break;
 80010a6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	2bff      	cmp	r3, #255	@ 0xff
 80010ac:	d801      	bhi.n	80010b2 <HAL_GPIO_Init+0x13a>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	e001      	b.n	80010b6 <HAL_GPIO_Init+0x13e>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	3304      	adds	r3, #4
 80010b6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	2bff      	cmp	r3, #255	@ 0xff
 80010bc:	d802      	bhi.n	80010c4 <HAL_GPIO_Init+0x14c>
 80010be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	e002      	b.n	80010ca <HAL_GPIO_Init+0x152>
 80010c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c6:	3b08      	subs	r3, #8
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	210f      	movs	r1, #15
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	fa01 f303 	lsl.w	r3, r1, r3
 80010d8:	43db      	mvns	r3, r3
 80010da:	401a      	ands	r2, r3
 80010dc:	6a39      	ldr	r1, [r7, #32]
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	fa01 f303 	lsl.w	r3, r1, r3
 80010e4:	431a      	orrs	r2, r3
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	f000 80b1 	beq.w	800125a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010f8:	4b4d      	ldr	r3, [pc, #308]	@ (8001230 <HAL_GPIO_Init+0x2b8>)
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	4a4c      	ldr	r2, [pc, #304]	@ (8001230 <HAL_GPIO_Init+0x2b8>)
 80010fe:	f043 0301 	orr.w	r3, r3, #1
 8001102:	6193      	str	r3, [r2, #24]
 8001104:	4b4a      	ldr	r3, [pc, #296]	@ (8001230 <HAL_GPIO_Init+0x2b8>)
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	f003 0301 	and.w	r3, r3, #1
 800110c:	60bb      	str	r3, [r7, #8]
 800110e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001110:	4a48      	ldr	r2, [pc, #288]	@ (8001234 <HAL_GPIO_Init+0x2bc>)
 8001112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001114:	089b      	lsrs	r3, r3, #2
 8001116:	3302      	adds	r3, #2
 8001118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800111c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800111e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001120:	f003 0303 	and.w	r3, r3, #3
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	220f      	movs	r2, #15
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	43db      	mvns	r3, r3
 800112e:	68fa      	ldr	r2, [r7, #12]
 8001130:	4013      	ands	r3, r2
 8001132:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4a40      	ldr	r2, [pc, #256]	@ (8001238 <HAL_GPIO_Init+0x2c0>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d013      	beq.n	8001164 <HAL_GPIO_Init+0x1ec>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	4a3f      	ldr	r2, [pc, #252]	@ (800123c <HAL_GPIO_Init+0x2c4>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d00d      	beq.n	8001160 <HAL_GPIO_Init+0x1e8>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4a3e      	ldr	r2, [pc, #248]	@ (8001240 <HAL_GPIO_Init+0x2c8>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d007      	beq.n	800115c <HAL_GPIO_Init+0x1e4>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	4a3d      	ldr	r2, [pc, #244]	@ (8001244 <HAL_GPIO_Init+0x2cc>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d101      	bne.n	8001158 <HAL_GPIO_Init+0x1e0>
 8001154:	2303      	movs	r3, #3
 8001156:	e006      	b.n	8001166 <HAL_GPIO_Init+0x1ee>
 8001158:	2304      	movs	r3, #4
 800115a:	e004      	b.n	8001166 <HAL_GPIO_Init+0x1ee>
 800115c:	2302      	movs	r3, #2
 800115e:	e002      	b.n	8001166 <HAL_GPIO_Init+0x1ee>
 8001160:	2301      	movs	r3, #1
 8001162:	e000      	b.n	8001166 <HAL_GPIO_Init+0x1ee>
 8001164:	2300      	movs	r3, #0
 8001166:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001168:	f002 0203 	and.w	r2, r2, #3
 800116c:	0092      	lsls	r2, r2, #2
 800116e:	4093      	lsls	r3, r2
 8001170:	68fa      	ldr	r2, [r7, #12]
 8001172:	4313      	orrs	r3, r2
 8001174:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001176:	492f      	ldr	r1, [pc, #188]	@ (8001234 <HAL_GPIO_Init+0x2bc>)
 8001178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800117a:	089b      	lsrs	r3, r3, #2
 800117c:	3302      	adds	r3, #2
 800117e:	68fa      	ldr	r2, [r7, #12]
 8001180:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d006      	beq.n	800119e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001190:	4b2d      	ldr	r3, [pc, #180]	@ (8001248 <HAL_GPIO_Init+0x2d0>)
 8001192:	689a      	ldr	r2, [r3, #8]
 8001194:	492c      	ldr	r1, [pc, #176]	@ (8001248 <HAL_GPIO_Init+0x2d0>)
 8001196:	69bb      	ldr	r3, [r7, #24]
 8001198:	4313      	orrs	r3, r2
 800119a:	608b      	str	r3, [r1, #8]
 800119c:	e006      	b.n	80011ac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800119e:	4b2a      	ldr	r3, [pc, #168]	@ (8001248 <HAL_GPIO_Init+0x2d0>)
 80011a0:	689a      	ldr	r2, [r3, #8]
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	43db      	mvns	r3, r3
 80011a6:	4928      	ldr	r1, [pc, #160]	@ (8001248 <HAL_GPIO_Init+0x2d0>)
 80011a8:	4013      	ands	r3, r2
 80011aa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d006      	beq.n	80011c6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011b8:	4b23      	ldr	r3, [pc, #140]	@ (8001248 <HAL_GPIO_Init+0x2d0>)
 80011ba:	68da      	ldr	r2, [r3, #12]
 80011bc:	4922      	ldr	r1, [pc, #136]	@ (8001248 <HAL_GPIO_Init+0x2d0>)
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	60cb      	str	r3, [r1, #12]
 80011c4:	e006      	b.n	80011d4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011c6:	4b20      	ldr	r3, [pc, #128]	@ (8001248 <HAL_GPIO_Init+0x2d0>)
 80011c8:	68da      	ldr	r2, [r3, #12]
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	43db      	mvns	r3, r3
 80011ce:	491e      	ldr	r1, [pc, #120]	@ (8001248 <HAL_GPIO_Init+0x2d0>)
 80011d0:	4013      	ands	r3, r2
 80011d2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d006      	beq.n	80011ee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011e0:	4b19      	ldr	r3, [pc, #100]	@ (8001248 <HAL_GPIO_Init+0x2d0>)
 80011e2:	685a      	ldr	r2, [r3, #4]
 80011e4:	4918      	ldr	r1, [pc, #96]	@ (8001248 <HAL_GPIO_Init+0x2d0>)
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	604b      	str	r3, [r1, #4]
 80011ec:	e006      	b.n	80011fc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011ee:	4b16      	ldr	r3, [pc, #88]	@ (8001248 <HAL_GPIO_Init+0x2d0>)
 80011f0:	685a      	ldr	r2, [r3, #4]
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	43db      	mvns	r3, r3
 80011f6:	4914      	ldr	r1, [pc, #80]	@ (8001248 <HAL_GPIO_Init+0x2d0>)
 80011f8:	4013      	ands	r3, r2
 80011fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001204:	2b00      	cmp	r3, #0
 8001206:	d021      	beq.n	800124c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001208:	4b0f      	ldr	r3, [pc, #60]	@ (8001248 <HAL_GPIO_Init+0x2d0>)
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	490e      	ldr	r1, [pc, #56]	@ (8001248 <HAL_GPIO_Init+0x2d0>)
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	4313      	orrs	r3, r2
 8001212:	600b      	str	r3, [r1, #0]
 8001214:	e021      	b.n	800125a <HAL_GPIO_Init+0x2e2>
 8001216:	bf00      	nop
 8001218:	10320000 	.word	0x10320000
 800121c:	10310000 	.word	0x10310000
 8001220:	10220000 	.word	0x10220000
 8001224:	10210000 	.word	0x10210000
 8001228:	10120000 	.word	0x10120000
 800122c:	10110000 	.word	0x10110000
 8001230:	40021000 	.word	0x40021000
 8001234:	40010000 	.word	0x40010000
 8001238:	40010800 	.word	0x40010800
 800123c:	40010c00 	.word	0x40010c00
 8001240:	40011000 	.word	0x40011000
 8001244:	40011400 	.word	0x40011400
 8001248:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800124c:	4b0b      	ldr	r3, [pc, #44]	@ (800127c <HAL_GPIO_Init+0x304>)
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	43db      	mvns	r3, r3
 8001254:	4909      	ldr	r1, [pc, #36]	@ (800127c <HAL_GPIO_Init+0x304>)
 8001256:	4013      	ands	r3, r2
 8001258:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800125a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800125c:	3301      	adds	r3, #1
 800125e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001266:	fa22 f303 	lsr.w	r3, r2, r3
 800126a:	2b00      	cmp	r3, #0
 800126c:	f47f ae8e 	bne.w	8000f8c <HAL_GPIO_Init+0x14>
  }
}
 8001270:	bf00      	nop
 8001272:	bf00      	nop
 8001274:	372c      	adds	r7, #44	@ 0x2c
 8001276:	46bd      	mov	sp, r7
 8001278:	bc80      	pop	{r7}
 800127a:	4770      	bx	lr
 800127c:	40010400 	.word	0x40010400

08001280 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	460b      	mov	r3, r1
 800128a:	807b      	strh	r3, [r7, #2]
 800128c:	4613      	mov	r3, r2
 800128e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001290:	787b      	ldrb	r3, [r7, #1]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d003      	beq.n	800129e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001296:	887a      	ldrh	r2, [r7, #2]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800129c:	e003      	b.n	80012a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800129e:	887b      	ldrh	r3, [r7, #2]
 80012a0:	041a      	lsls	r2, r3, #16
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	611a      	str	r2, [r3, #16]
}
 80012a6:	bf00      	nop
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bc80      	pop	{r7}
 80012ae:	4770      	bx	lr

080012b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d101      	bne.n	80012c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e12b      	b.n	800151a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d106      	bne.n	80012dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2200      	movs	r2, #0
 80012d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f7ff f872 	bl	80003c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2224      	movs	r2, #36	@ 0x24
 80012e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f022 0201 	bic.w	r2, r2, #1
 80012f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001302:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001312:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001314:	f002 fa24 	bl	8003760 <HAL_RCC_GetPCLK1Freq>
 8001318:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	4a81      	ldr	r2, [pc, #516]	@ (8001524 <HAL_I2C_Init+0x274>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d807      	bhi.n	8001334 <HAL_I2C_Init+0x84>
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	4a80      	ldr	r2, [pc, #512]	@ (8001528 <HAL_I2C_Init+0x278>)
 8001328:	4293      	cmp	r3, r2
 800132a:	bf94      	ite	ls
 800132c:	2301      	movls	r3, #1
 800132e:	2300      	movhi	r3, #0
 8001330:	b2db      	uxtb	r3, r3
 8001332:	e006      	b.n	8001342 <HAL_I2C_Init+0x92>
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	4a7d      	ldr	r2, [pc, #500]	@ (800152c <HAL_I2C_Init+0x27c>)
 8001338:	4293      	cmp	r3, r2
 800133a:	bf94      	ite	ls
 800133c:	2301      	movls	r3, #1
 800133e:	2300      	movhi	r3, #0
 8001340:	b2db      	uxtb	r3, r3
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e0e7      	b.n	800151a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	4a78      	ldr	r2, [pc, #480]	@ (8001530 <HAL_I2C_Init+0x280>)
 800134e:	fba2 2303 	umull	r2, r3, r2, r3
 8001352:	0c9b      	lsrs	r3, r3, #18
 8001354:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	68ba      	ldr	r2, [r7, #8]
 8001366:	430a      	orrs	r2, r1
 8001368:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	6a1b      	ldr	r3, [r3, #32]
 8001370:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	4a6a      	ldr	r2, [pc, #424]	@ (8001524 <HAL_I2C_Init+0x274>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d802      	bhi.n	8001384 <HAL_I2C_Init+0xd4>
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	3301      	adds	r3, #1
 8001382:	e009      	b.n	8001398 <HAL_I2C_Init+0xe8>
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800138a:	fb02 f303 	mul.w	r3, r2, r3
 800138e:	4a69      	ldr	r2, [pc, #420]	@ (8001534 <HAL_I2C_Init+0x284>)
 8001390:	fba2 2303 	umull	r2, r3, r2, r3
 8001394:	099b      	lsrs	r3, r3, #6
 8001396:	3301      	adds	r3, #1
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	6812      	ldr	r2, [r2, #0]
 800139c:	430b      	orrs	r3, r1
 800139e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	69db      	ldr	r3, [r3, #28]
 80013a6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80013aa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	495c      	ldr	r1, [pc, #368]	@ (8001524 <HAL_I2C_Init+0x274>)
 80013b4:	428b      	cmp	r3, r1
 80013b6:	d819      	bhi.n	80013ec <HAL_I2C_Init+0x13c>
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	1e59      	subs	r1, r3, #1
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80013c6:	1c59      	adds	r1, r3, #1
 80013c8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80013cc:	400b      	ands	r3, r1
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d00a      	beq.n	80013e8 <HAL_I2C_Init+0x138>
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	1e59      	subs	r1, r3, #1
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80013e0:	3301      	adds	r3, #1
 80013e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013e6:	e051      	b.n	800148c <HAL_I2C_Init+0x1dc>
 80013e8:	2304      	movs	r3, #4
 80013ea:	e04f      	b.n	800148c <HAL_I2C_Init+0x1dc>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d111      	bne.n	8001418 <HAL_I2C_Init+0x168>
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	1e58      	subs	r0, r3, #1
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6859      	ldr	r1, [r3, #4]
 80013fc:	460b      	mov	r3, r1
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	440b      	add	r3, r1
 8001402:	fbb0 f3f3 	udiv	r3, r0, r3
 8001406:	3301      	adds	r3, #1
 8001408:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800140c:	2b00      	cmp	r3, #0
 800140e:	bf0c      	ite	eq
 8001410:	2301      	moveq	r3, #1
 8001412:	2300      	movne	r3, #0
 8001414:	b2db      	uxtb	r3, r3
 8001416:	e012      	b.n	800143e <HAL_I2C_Init+0x18e>
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	1e58      	subs	r0, r3, #1
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6859      	ldr	r1, [r3, #4]
 8001420:	460b      	mov	r3, r1
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	440b      	add	r3, r1
 8001426:	0099      	lsls	r1, r3, #2
 8001428:	440b      	add	r3, r1
 800142a:	fbb0 f3f3 	udiv	r3, r0, r3
 800142e:	3301      	adds	r3, #1
 8001430:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001434:	2b00      	cmp	r3, #0
 8001436:	bf0c      	ite	eq
 8001438:	2301      	moveq	r3, #1
 800143a:	2300      	movne	r3, #0
 800143c:	b2db      	uxtb	r3, r3
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <HAL_I2C_Init+0x196>
 8001442:	2301      	movs	r3, #1
 8001444:	e022      	b.n	800148c <HAL_I2C_Init+0x1dc>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d10e      	bne.n	800146c <HAL_I2C_Init+0x1bc>
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	1e58      	subs	r0, r3, #1
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6859      	ldr	r1, [r3, #4]
 8001456:	460b      	mov	r3, r1
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	440b      	add	r3, r1
 800145c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001460:	3301      	adds	r3, #1
 8001462:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001466:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800146a:	e00f      	b.n	800148c <HAL_I2C_Init+0x1dc>
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	1e58      	subs	r0, r3, #1
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6859      	ldr	r1, [r3, #4]
 8001474:	460b      	mov	r3, r1
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	440b      	add	r3, r1
 800147a:	0099      	lsls	r1, r3, #2
 800147c:	440b      	add	r3, r1
 800147e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001482:	3301      	adds	r3, #1
 8001484:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001488:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800148c:	6879      	ldr	r1, [r7, #4]
 800148e:	6809      	ldr	r1, [r1, #0]
 8001490:	4313      	orrs	r3, r2
 8001492:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	69da      	ldr	r2, [r3, #28]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6a1b      	ldr	r3, [r3, #32]
 80014a6:	431a      	orrs	r2, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	430a      	orrs	r2, r1
 80014ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80014ba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	6911      	ldr	r1, [r2, #16]
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	68d2      	ldr	r2, [r2, #12]
 80014c6:	4311      	orrs	r1, r2
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	6812      	ldr	r2, [r2, #0]
 80014cc:	430b      	orrs	r3, r1
 80014ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	695a      	ldr	r2, [r3, #20]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	699b      	ldr	r3, [r3, #24]
 80014e2:	431a      	orrs	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	430a      	orrs	r2, r1
 80014ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f042 0201 	orr.w	r2, r2, #1
 80014fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2200      	movs	r2, #0
 8001500:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2220      	movs	r2, #32
 8001506:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2200      	movs	r2, #0
 800150e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	000186a0 	.word	0x000186a0
 8001528:	001e847f 	.word	0x001e847f
 800152c:	003d08ff 	.word	0x003d08ff
 8001530:	431bde83 	.word	0x431bde83
 8001534:	10624dd3 	.word	0x10624dd3

08001538 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d101      	bne.n	800154a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e0e8      	b.n	800171c <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001550:	b2db      	uxtb	r3, r3
 8001552:	2b00      	cmp	r3, #0
 8001554:	d106      	bne.n	8001564 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2200      	movs	r2, #0
 800155a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f006 fc78 	bl	8007e54 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2203      	movs	r2, #3
 8001568:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2200      	movs	r2, #0
 8001570:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4618      	mov	r0, r3
 8001578:	f002 fdb4 	bl	80040e4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6818      	ldr	r0, [r3, #0]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	3304      	adds	r3, #4
 8001584:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001586:	f002 fd8a 	bl	800409e <USB_CoreInit>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d005      	beq.n	800159c <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2202      	movs	r2, #2
 8001594:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e0bf      	b.n	800171c <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2100      	movs	r1, #0
 80015a2:	4618      	mov	r0, r3
 80015a4:	f002 fdb8 	bl	8004118 <USB_SetCurrentMode>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d005      	beq.n	80015ba <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2202      	movs	r2, #2
 80015b2:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e0b0      	b.n	800171c <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015ba:	2300      	movs	r3, #0
 80015bc:	73fb      	strb	r3, [r7, #15]
 80015be:	e03e      	b.n	800163e <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80015c0:	7bfa      	ldrb	r2, [r7, #15]
 80015c2:	6879      	ldr	r1, [r7, #4]
 80015c4:	4613      	mov	r3, r2
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	4413      	add	r3, r2
 80015ca:	00db      	lsls	r3, r3, #3
 80015cc:	440b      	add	r3, r1
 80015ce:	3311      	adds	r3, #17
 80015d0:	2201      	movs	r2, #1
 80015d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80015d4:	7bfa      	ldrb	r2, [r7, #15]
 80015d6:	6879      	ldr	r1, [r7, #4]
 80015d8:	4613      	mov	r3, r2
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	4413      	add	r3, r2
 80015de:	00db      	lsls	r3, r3, #3
 80015e0:	440b      	add	r3, r1
 80015e2:	3310      	adds	r3, #16
 80015e4:	7bfa      	ldrb	r2, [r7, #15]
 80015e6:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80015e8:	7bfa      	ldrb	r2, [r7, #15]
 80015ea:	6879      	ldr	r1, [r7, #4]
 80015ec:	4613      	mov	r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	4413      	add	r3, r2
 80015f2:	00db      	lsls	r3, r3, #3
 80015f4:	440b      	add	r3, r1
 80015f6:	3313      	adds	r3, #19
 80015f8:	2200      	movs	r2, #0
 80015fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80015fc:	7bfa      	ldrb	r2, [r7, #15]
 80015fe:	6879      	ldr	r1, [r7, #4]
 8001600:	4613      	mov	r3, r2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	4413      	add	r3, r2
 8001606:	00db      	lsls	r3, r3, #3
 8001608:	440b      	add	r3, r1
 800160a:	3320      	adds	r3, #32
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001610:	7bfa      	ldrb	r2, [r7, #15]
 8001612:	6879      	ldr	r1, [r7, #4]
 8001614:	4613      	mov	r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	4413      	add	r3, r2
 800161a:	00db      	lsls	r3, r3, #3
 800161c:	440b      	add	r3, r1
 800161e:	3324      	adds	r3, #36	@ 0x24
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001624:	7bfb      	ldrb	r3, [r7, #15]
 8001626:	6879      	ldr	r1, [r7, #4]
 8001628:	1c5a      	adds	r2, r3, #1
 800162a:	4613      	mov	r3, r2
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	4413      	add	r3, r2
 8001630:	00db      	lsls	r3, r3, #3
 8001632:	440b      	add	r3, r1
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001638:	7bfb      	ldrb	r3, [r7, #15]
 800163a:	3301      	adds	r3, #1
 800163c:	73fb      	strb	r3, [r7, #15]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	791b      	ldrb	r3, [r3, #4]
 8001642:	7bfa      	ldrb	r2, [r7, #15]
 8001644:	429a      	cmp	r2, r3
 8001646:	d3bb      	bcc.n	80015c0 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001648:	2300      	movs	r3, #0
 800164a:	73fb      	strb	r3, [r7, #15]
 800164c:	e044      	b.n	80016d8 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800164e:	7bfa      	ldrb	r2, [r7, #15]
 8001650:	6879      	ldr	r1, [r7, #4]
 8001652:	4613      	mov	r3, r2
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	4413      	add	r3, r2
 8001658:	00db      	lsls	r3, r3, #3
 800165a:	440b      	add	r3, r1
 800165c:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001660:	2200      	movs	r2, #0
 8001662:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001664:	7bfa      	ldrb	r2, [r7, #15]
 8001666:	6879      	ldr	r1, [r7, #4]
 8001668:	4613      	mov	r3, r2
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	4413      	add	r3, r2
 800166e:	00db      	lsls	r3, r3, #3
 8001670:	440b      	add	r3, r1
 8001672:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001676:	7bfa      	ldrb	r2, [r7, #15]
 8001678:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800167a:	7bfa      	ldrb	r2, [r7, #15]
 800167c:	6879      	ldr	r1, [r7, #4]
 800167e:	4613      	mov	r3, r2
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	4413      	add	r3, r2
 8001684:	00db      	lsls	r3, r3, #3
 8001686:	440b      	add	r3, r1
 8001688:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800168c:	2200      	movs	r2, #0
 800168e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001690:	7bfa      	ldrb	r2, [r7, #15]
 8001692:	6879      	ldr	r1, [r7, #4]
 8001694:	4613      	mov	r3, r2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	4413      	add	r3, r2
 800169a:	00db      	lsls	r3, r3, #3
 800169c:	440b      	add	r3, r1
 800169e:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80016a6:	7bfa      	ldrb	r2, [r7, #15]
 80016a8:	6879      	ldr	r1, [r7, #4]
 80016aa:	4613      	mov	r3, r2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	4413      	add	r3, r2
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	440b      	add	r3, r1
 80016b4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80016bc:	7bfa      	ldrb	r2, [r7, #15]
 80016be:	6879      	ldr	r1, [r7, #4]
 80016c0:	4613      	mov	r3, r2
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	4413      	add	r3, r2
 80016c6:	00db      	lsls	r3, r3, #3
 80016c8:	440b      	add	r3, r1
 80016ca:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016d2:	7bfb      	ldrb	r3, [r7, #15]
 80016d4:	3301      	adds	r3, #1
 80016d6:	73fb      	strb	r3, [r7, #15]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	791b      	ldrb	r3, [r3, #4]
 80016dc:	7bfa      	ldrb	r2, [r7, #15]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d3b5      	bcc.n	800164e <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6818      	ldr	r0, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	3304      	adds	r3, #4
 80016ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016ec:	f002 fd20 	bl	8004130 <USB_DevInit>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d005      	beq.n	8001702 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2202      	movs	r2, #2
 80016fa:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e00c      	b.n	800171c <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2200      	movs	r2, #0
 8001706:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2201      	movs	r2, #1
 800170c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4618      	mov	r0, r3
 8001716:	f004 ffa0 	bl	800665a <USB_DevDisconnect>

  return HAL_OK;
 800171a:	2300      	movs	r3, #0
}
 800171c:	4618      	mov	r0, r3
 800171e:	3710      	adds	r7, #16
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}

08001724 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001732:	2b01      	cmp	r3, #1
 8001734:	d101      	bne.n	800173a <HAL_PCD_Start+0x16>
 8001736:	2302      	movs	r3, #2
 8001738:	e016      	b.n	8001768 <HAL_PCD_Start+0x44>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2201      	movs	r2, #1
 800173e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4618      	mov	r0, r3
 8001748:	f002 fcb6 	bl	80040b8 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800174c:	2101      	movs	r1, #1
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f006 fdcd 	bl	80082ee <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4618      	mov	r0, r3
 800175a:	f004 ff74 	bl	8006646 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001766:	2300      	movs	r3, #0
}
 8001768:	4618      	mov	r0, r3
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b088      	sub	sp, #32
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4618      	mov	r0, r3
 800177e:	f004 ff76 	bl	800666e <USB_ReadInterrupts>
 8001782:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d003      	beq.n	8001796 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f000 fb03 	bl	8001d9a <PCD_EP_ISR_Handler>

    return;
 8001794:	e119      	b.n	80019ca <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800179c:	2b00      	cmp	r3, #0
 800179e:	d013      	beq.n	80017c8 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80017a8:	b29a      	uxth	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80017b2:	b292      	uxth	r2, r2
 80017b4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f006 fbc6 	bl	8007f4a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80017be:	2100      	movs	r1, #0
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f000 f905 	bl	80019d0 <HAL_PCD_SetAddress>

    return;
 80017c6:	e100      	b.n	80019ca <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d00c      	beq.n	80017ec <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80017da:	b29a      	uxth	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80017e4:	b292      	uxth	r2, r2
 80017e6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80017ea:	e0ee      	b.n	80019ca <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d00c      	beq.n	8001810 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80017fe:	b29a      	uxth	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001808:	b292      	uxth	r2, r2
 800180a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800180e:	e0dc      	b.n	80019ca <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d027      	beq.n	800186a <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001822:	b29a      	uxth	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f022 0204 	bic.w	r2, r2, #4
 800182c:	b292      	uxth	r2, r2
 800182e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800183a:	b29a      	uxth	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f022 0208 	bic.w	r2, r2, #8
 8001844:	b292      	uxth	r2, r2
 8001846:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f006 fbb6 	bl	8007fbc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001858:	b29a      	uxth	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001862:	b292      	uxth	r2, r2
 8001864:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001868:	e0af      	b.n	80019ca <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001870:	2b00      	cmp	r3, #0
 8001872:	f000 8083 	beq.w	800197c <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8001876:	2300      	movs	r3, #0
 8001878:	77fb      	strb	r3, [r7, #31]
 800187a:	e010      	b.n	800189e <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	461a      	mov	r2, r3
 8001882:	7ffb      	ldrb	r3, [r7, #31]
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	441a      	add	r2, r3
 8001888:	7ffb      	ldrb	r3, [r7, #31]
 800188a:	8812      	ldrh	r2, [r2, #0]
 800188c:	b292      	uxth	r2, r2
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	3320      	adds	r3, #32
 8001892:	443b      	add	r3, r7
 8001894:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001898:	7ffb      	ldrb	r3, [r7, #31]
 800189a:	3301      	adds	r3, #1
 800189c:	77fb      	strb	r3, [r7, #31]
 800189e:	7ffb      	ldrb	r3, [r7, #31]
 80018a0:	2b07      	cmp	r3, #7
 80018a2:	d9eb      	bls.n	800187c <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80018ac:	b29a      	uxth	r2, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f042 0201 	orr.w	r2, r2, #1
 80018b6:	b292      	uxth	r2, r2
 80018b8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80018c4:	b29a      	uxth	r2, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f022 0201 	bic.w	r2, r2, #1
 80018ce:	b292      	uxth	r2, r2
 80018d0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80018d4:	bf00      	nop
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80018de:	b29b      	uxth	r3, r3
 80018e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d0f6      	beq.n	80018d6 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80018fa:	b292      	uxth	r2, r2
 80018fc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001900:	2300      	movs	r3, #0
 8001902:	77fb      	strb	r3, [r7, #31]
 8001904:	e00f      	b.n	8001926 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001906:	7ffb      	ldrb	r3, [r7, #31]
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	6812      	ldr	r2, [r2, #0]
 800190c:	4611      	mov	r1, r2
 800190e:	7ffa      	ldrb	r2, [r7, #31]
 8001910:	0092      	lsls	r2, r2, #2
 8001912:	440a      	add	r2, r1
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	3320      	adds	r3, #32
 8001918:	443b      	add	r3, r7
 800191a:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800191e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001920:	7ffb      	ldrb	r3, [r7, #31]
 8001922:	3301      	adds	r3, #1
 8001924:	77fb      	strb	r3, [r7, #31]
 8001926:	7ffb      	ldrb	r3, [r7, #31]
 8001928:	2b07      	cmp	r3, #7
 800192a:	d9ec      	bls.n	8001906 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001934:	b29a      	uxth	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f042 0208 	orr.w	r2, r2, #8
 800193e:	b292      	uxth	r2, r2
 8001940:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800194c:	b29a      	uxth	r2, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001956:	b292      	uxth	r2, r2
 8001958:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001964:	b29a      	uxth	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f042 0204 	orr.w	r2, r2, #4
 800196e:	b292      	uxth	r2, r2
 8001970:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f006 fb07 	bl	8007f88 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800197a:	e026      	b.n	80019ca <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001982:	2b00      	cmp	r3, #0
 8001984:	d00f      	beq.n	80019a6 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800198e:	b29a      	uxth	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001998:	b292      	uxth	r2, r2
 800199a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f006 fac5 	bl	8007f2e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80019a4:	e011      	b.n	80019ca <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d00c      	beq.n	80019ca <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80019b8:	b29a      	uxth	r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80019c2:	b292      	uxth	r2, r2
 80019c4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80019c8:	bf00      	nop
  }
}
 80019ca:	3720      	adds	r7, #32
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	460b      	mov	r3, r1
 80019da:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d101      	bne.n	80019ea <HAL_PCD_SetAddress+0x1a>
 80019e6:	2302      	movs	r3, #2
 80019e8:	e012      	b.n	8001a10 <HAL_PCD_SetAddress+0x40>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2201      	movs	r2, #1
 80019ee:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	78fa      	ldrb	r2, [r7, #3]
 80019f6:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	78fa      	ldrb	r2, [r7, #3]
 80019fe:	4611      	mov	r1, r2
 8001a00:	4618      	mov	r0, r3
 8001a02:	f004 fe0d 	bl	8006620 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001a0e:	2300      	movs	r3, #0
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3708      	adds	r7, #8
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	4608      	mov	r0, r1
 8001a22:	4611      	mov	r1, r2
 8001a24:	461a      	mov	r2, r3
 8001a26:	4603      	mov	r3, r0
 8001a28:	70fb      	strb	r3, [r7, #3]
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	803b      	strh	r3, [r7, #0]
 8001a2e:	4613      	mov	r3, r2
 8001a30:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001a32:	2300      	movs	r3, #0
 8001a34:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	da0e      	bge.n	8001a5c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a3e:	78fb      	ldrb	r3, [r7, #3]
 8001a40:	f003 0207 	and.w	r2, r3, #7
 8001a44:	4613      	mov	r3, r2
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	4413      	add	r3, r2
 8001a4a:	00db      	lsls	r3, r3, #3
 8001a4c:	3310      	adds	r3, #16
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	4413      	add	r3, r2
 8001a52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2201      	movs	r2, #1
 8001a58:	705a      	strb	r2, [r3, #1]
 8001a5a:	e00e      	b.n	8001a7a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a5c:	78fb      	ldrb	r3, [r7, #3]
 8001a5e:	f003 0207 	and.w	r2, r3, #7
 8001a62:	4613      	mov	r3, r2
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	4413      	add	r3, r2
 8001a68:	00db      	lsls	r3, r3, #3
 8001a6a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	4413      	add	r3, r2
 8001a72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2200      	movs	r2, #0
 8001a78:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001a7a:	78fb      	ldrb	r3, [r7, #3]
 8001a7c:	f003 0307 	and.w	r3, r3, #7
 8001a80:	b2da      	uxtb	r2, r3
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001a86:	883a      	ldrh	r2, [r7, #0]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	78ba      	ldrb	r2, [r7, #2]
 8001a90:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001a92:	78bb      	ldrb	r3, [r7, #2]
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d102      	bne.n	8001a9e <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d101      	bne.n	8001aac <HAL_PCD_EP_Open+0x94>
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	e00e      	b.n	8001aca <HAL_PCD_EP_Open+0xb2>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	68f9      	ldr	r1, [r7, #12]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f002 fb56 	bl	800416c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8001ac8:	7afb      	ldrb	r3, [r7, #11]
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3710      	adds	r7, #16
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b084      	sub	sp, #16
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
 8001ada:	460b      	mov	r3, r1
 8001adc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ade:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	da0e      	bge.n	8001b04 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ae6:	78fb      	ldrb	r3, [r7, #3]
 8001ae8:	f003 0207 	and.w	r2, r3, #7
 8001aec:	4613      	mov	r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	4413      	add	r3, r2
 8001af2:	00db      	lsls	r3, r3, #3
 8001af4:	3310      	adds	r3, #16
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	4413      	add	r3, r2
 8001afa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2201      	movs	r2, #1
 8001b00:	705a      	strb	r2, [r3, #1]
 8001b02:	e00e      	b.n	8001b22 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b04:	78fb      	ldrb	r3, [r7, #3]
 8001b06:	f003 0207 	and.w	r2, r3, #7
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	4413      	add	r3, r2
 8001b10:	00db      	lsls	r3, r3, #3
 8001b12:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	4413      	add	r3, r2
 8001b1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b22:	78fb      	ldrb	r3, [r7, #3]
 8001b24:	f003 0307 	and.w	r3, r3, #7
 8001b28:	b2da      	uxtb	r2, r3
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d101      	bne.n	8001b3c <HAL_PCD_EP_Close+0x6a>
 8001b38:	2302      	movs	r3, #2
 8001b3a:	e00e      	b.n	8001b5a <HAL_PCD_EP_Close+0x88>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	68f9      	ldr	r1, [r7, #12]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f002 fece 	bl	80048ec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b086      	sub	sp, #24
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	60f8      	str	r0, [r7, #12]
 8001b6a:	607a      	str	r2, [r7, #4]
 8001b6c:	603b      	str	r3, [r7, #0]
 8001b6e:	460b      	mov	r3, r1
 8001b70:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b72:	7afb      	ldrb	r3, [r7, #11]
 8001b74:	f003 0207 	and.w	r2, r3, #7
 8001b78:	4613      	mov	r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	4413      	add	r3, r2
 8001b7e:	00db      	lsls	r3, r3, #3
 8001b80:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001b84:	68fa      	ldr	r2, [r7, #12]
 8001b86:	4413      	add	r3, r2
 8001b88:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	683a      	ldr	r2, [r7, #0]
 8001b94:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ba2:	7afb      	ldrb	r3, [r7, #11]
 8001ba4:	f003 0307 	and.w	r3, r3, #7
 8001ba8:	b2da      	uxtb	r2, r3
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	6979      	ldr	r1, [r7, #20]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f003 f885 	bl	8004cc4 <USB_EPStartXfer>

  return HAL_OK;
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3718      	adds	r7, #24
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	607a      	str	r2, [r7, #4]
 8001bce:	603b      	str	r3, [r7, #0]
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bd4:	7afb      	ldrb	r3, [r7, #11]
 8001bd6:	f003 0207 	and.w	r2, r3, #7
 8001bda:	4613      	mov	r3, r2
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	4413      	add	r3, r2
 8001be0:	00db      	lsls	r3, r3, #3
 8001be2:	3310      	adds	r3, #16
 8001be4:	68fa      	ldr	r2, [r7, #12]
 8001be6:	4413      	add	r3, r2
 8001be8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	683a      	ldr	r2, [r7, #0]
 8001c02:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	2200      	movs	r2, #0
 8001c08:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c10:	7afb      	ldrb	r3, [r7, #11]
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	b2da      	uxtb	r2, r3
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	6979      	ldr	r1, [r7, #20]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f003 f84e 	bl	8004cc4 <USB_EPStartXfer>

  return HAL_OK;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3718      	adds	r7, #24
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b084      	sub	sp, #16
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001c3e:	78fb      	ldrb	r3, [r7, #3]
 8001c40:	f003 0307 	and.w	r3, r3, #7
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	7912      	ldrb	r2, [r2, #4]
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d901      	bls.n	8001c50 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e04c      	b.n	8001cea <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	da0e      	bge.n	8001c76 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c58:	78fb      	ldrb	r3, [r7, #3]
 8001c5a:	f003 0207 	and.w	r2, r3, #7
 8001c5e:	4613      	mov	r3, r2
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	4413      	add	r3, r2
 8001c64:	00db      	lsls	r3, r3, #3
 8001c66:	3310      	adds	r3, #16
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2201      	movs	r2, #1
 8001c72:	705a      	strb	r2, [r3, #1]
 8001c74:	e00c      	b.n	8001c90 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001c76:	78fa      	ldrb	r2, [r7, #3]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	4413      	add	r3, r2
 8001c7e:	00db      	lsls	r3, r3, #3
 8001c80:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	4413      	add	r3, r2
 8001c88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2201      	movs	r2, #1
 8001c94:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c96:	78fb      	ldrb	r3, [r7, #3]
 8001c98:	f003 0307 	and.w	r3, r3, #7
 8001c9c:	b2da      	uxtb	r2, r3
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d101      	bne.n	8001cb0 <HAL_PCD_EP_SetStall+0x7e>
 8001cac:	2302      	movs	r3, #2
 8001cae:	e01c      	b.n	8001cea <HAL_PCD_EP_SetStall+0xb8>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	68f9      	ldr	r1, [r7, #12]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f004 fbb1 	bl	8006426 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001cc4:	78fb      	ldrb	r3, [r7, #3]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d108      	bne.n	8001ce0 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4610      	mov	r0, r2
 8001cdc:	f004 fcd6 	bl	800668c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3710      	adds	r7, #16
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b084      	sub	sp, #16
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001cfe:	78fb      	ldrb	r3, [r7, #3]
 8001d00:	f003 030f 	and.w	r3, r3, #15
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	7912      	ldrb	r2, [r2, #4]
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d901      	bls.n	8001d10 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e040      	b.n	8001d92 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	da0e      	bge.n	8001d36 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d18:	78fb      	ldrb	r3, [r7, #3]
 8001d1a:	f003 0207 	and.w	r2, r3, #7
 8001d1e:	4613      	mov	r3, r2
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	4413      	add	r3, r2
 8001d24:	00db      	lsls	r3, r3, #3
 8001d26:	3310      	adds	r3, #16
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2201      	movs	r2, #1
 8001d32:	705a      	strb	r2, [r3, #1]
 8001d34:	e00e      	b.n	8001d54 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d36:	78fb      	ldrb	r3, [r7, #3]
 8001d38:	f003 0207 	and.w	r2, r3, #7
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	4413      	add	r3, r2
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2200      	movs	r2, #0
 8001d52:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2200      	movs	r2, #0
 8001d58:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d5a:	78fb      	ldrb	r3, [r7, #3]
 8001d5c:	f003 0307 	and.w	r3, r3, #7
 8001d60:	b2da      	uxtb	r2, r3
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d101      	bne.n	8001d74 <HAL_PCD_EP_ClrStall+0x82>
 8001d70:	2302      	movs	r3, #2
 8001d72:	e00e      	b.n	8001d92 <HAL_PCD_EP_ClrStall+0xa0>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	68f9      	ldr	r1, [r7, #12]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f004 fb9f 	bl	80064c6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b096      	sub	sp, #88	@ 0x58
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001da2:	e3bb      	b.n	800251c <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001dac:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001db0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	f003 030f 	and.w	r3, r3, #15
 8001dba:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8001dbe:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f040 8175 	bne.w	80020b2 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001dc8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001dcc:	f003 0310 	and.w	r3, r3, #16
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d14e      	bne.n	8001e72 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	881b      	ldrh	r3, [r3, #0]
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001de0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001de4:	81fb      	strh	r3, [r7, #14]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	89fb      	ldrh	r3, [r7, #14]
 8001dec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001df0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	3310      	adds	r3, #16
 8001dfc:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	461a      	mov	r2, r3
 8001e0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	00db      	lsls	r3, r3, #3
 8001e10:	4413      	add	r3, r2
 8001e12:	3302      	adds	r3, #2
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	6812      	ldr	r2, [r2, #0]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001e20:	881b      	ldrh	r3, [r3, #0]
 8001e22:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e28:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001e2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e2c:	695a      	ldr	r2, [r3, #20]
 8001e2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e30:	69db      	ldr	r3, [r3, #28]
 8001e32:	441a      	add	r2, r3
 8001e34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e36:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001e38:	2100      	movs	r1, #0
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f006 f85d 	bl	8007efa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	7b5b      	ldrb	r3, [r3, #13]
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f000 8368 	beq.w	800251c <PCD_EP_ISR_Handler+0x782>
 8001e4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e4e:	699b      	ldr	r3, [r3, #24]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	f040 8363 	bne.w	800251c <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	7b5b      	ldrb	r3, [r3, #13]
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001e60:	b2da      	uxtb	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	735a      	strb	r2, [r3, #13]
 8001e70:	e354      	b.n	800251c <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001e78:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	881b      	ldrh	r3, [r3, #0]
 8001e80:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001e84:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001e88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d034      	beq.n	8001efa <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	00db      	lsls	r3, r3, #3
 8001ea2:	4413      	add	r3, r2
 8001ea4:	3306      	adds	r3, #6
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	6812      	ldr	r2, [r2, #0]
 8001eac:	4413      	add	r3, r2
 8001eae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001eb2:	881b      	ldrh	r3, [r3, #0]
 8001eb4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001eb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eba:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6818      	ldr	r0, [r3, #0]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8001ec6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ec8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001eca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ecc:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	f004 fc2d 	bl	800672e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	881b      	ldrh	r3, [r3, #0]
 8001eda:	b29a      	uxth	r2, r3
 8001edc:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	823b      	strh	r3, [r7, #16]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	8a3a      	ldrh	r2, [r7, #16]
 8001eea:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001eee:	b292      	uxth	r2, r2
 8001ef0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f005 ffd4 	bl	8007ea0 <HAL_PCD_SetupStageCallback>
 8001ef8:	e310      	b.n	800251c <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001efa:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	f280 830c 	bge.w	800251c <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	881b      	ldrh	r3, [r3, #0]
 8001f0a:	b29a      	uxth	r2, r3
 8001f0c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001f10:	4013      	ands	r3, r2
 8001f12:	83fb      	strh	r3, [r7, #30]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	8bfa      	ldrh	r2, [r7, #30]
 8001f1a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001f1e:	b292      	uxth	r2, r2
 8001f20:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	4413      	add	r3, r2
 8001f36:	3306      	adds	r3, #6
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	6812      	ldr	r2, [r2, #0]
 8001f3e:	4413      	add	r3, r2
 8001f40:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001f44:	881b      	ldrh	r3, [r3, #0]
 8001f46:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f4c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001f4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f50:	69db      	ldr	r3, [r3, #28]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d019      	beq.n	8001f8a <PCD_EP_ISR_Handler+0x1f0>
 8001f56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f58:	695b      	ldr	r3, [r3, #20]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d015      	beq.n	8001f8a <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6818      	ldr	r0, [r3, #0]
 8001f62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f64:	6959      	ldr	r1, [r3, #20]
 8001f66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f68:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001f6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f6c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	f004 fbdd 	bl	800672e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001f74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f76:	695a      	ldr	r2, [r3, #20]
 8001f78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f7a:	69db      	ldr	r3, [r3, #28]
 8001f7c:	441a      	add	r2, r3
 8001f7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f80:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001f82:	2100      	movs	r1, #0
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f005 ff9d 	bl	8007ec4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	881b      	ldrh	r3, [r3, #0]
 8001f90:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001f94:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001f98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	f040 82bd 	bne.w	800251c <PCD_EP_ISR_Handler+0x782>
 8001fa2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001fa6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8001faa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001fae:	f000 82b5 	beq.w	800251c <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	61bb      	str	r3, [r7, #24]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001fd0:	617b      	str	r3, [r7, #20]
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	881b      	ldrh	r3, [r3, #0]
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fdc:	b29a      	uxth	r2, r3
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	801a      	strh	r2, [r3, #0]
 8001fe2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	2b3e      	cmp	r3, #62	@ 0x3e
 8001fe8:	d91d      	bls.n	8002026 <PCD_EP_ISR_Handler+0x28c>
 8001fea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	095b      	lsrs	r3, r3, #5
 8001ff0:	647b      	str	r3, [r7, #68]	@ 0x44
 8001ff2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	f003 031f 	and.w	r3, r3, #31
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d102      	bne.n	8002004 <PCD_EP_ISR_Handler+0x26a>
 8001ffe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002000:	3b01      	subs	r3, #1
 8002002:	647b      	str	r3, [r7, #68]	@ 0x44
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	881b      	ldrh	r3, [r3, #0]
 8002008:	b29a      	uxth	r2, r3
 800200a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800200c:	b29b      	uxth	r3, r3
 800200e:	029b      	lsls	r3, r3, #10
 8002010:	b29b      	uxth	r3, r3
 8002012:	4313      	orrs	r3, r2
 8002014:	b29b      	uxth	r3, r3
 8002016:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800201a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800201e:	b29a      	uxth	r2, r3
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	801a      	strh	r2, [r3, #0]
 8002024:	e026      	b.n	8002074 <PCD_EP_ISR_Handler+0x2da>
 8002026:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d10a      	bne.n	8002044 <PCD_EP_ISR_Handler+0x2aa>
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	881b      	ldrh	r3, [r3, #0]
 8002032:	b29b      	uxth	r3, r3
 8002034:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002038:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800203c:	b29a      	uxth	r2, r3
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	801a      	strh	r2, [r3, #0]
 8002042:	e017      	b.n	8002074 <PCD_EP_ISR_Handler+0x2da>
 8002044:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	085b      	lsrs	r3, r3, #1
 800204a:	647b      	str	r3, [r7, #68]	@ 0x44
 800204c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800204e:	691b      	ldr	r3, [r3, #16]
 8002050:	f003 0301 	and.w	r3, r3, #1
 8002054:	2b00      	cmp	r3, #0
 8002056:	d002      	beq.n	800205e <PCD_EP_ISR_Handler+0x2c4>
 8002058:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800205a:	3301      	adds	r3, #1
 800205c:	647b      	str	r3, [r7, #68]	@ 0x44
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	881b      	ldrh	r3, [r3, #0]
 8002062:	b29a      	uxth	r2, r3
 8002064:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002066:	b29b      	uxth	r3, r3
 8002068:	029b      	lsls	r3, r3, #10
 800206a:	b29b      	uxth	r3, r3
 800206c:	4313      	orrs	r3, r2
 800206e:	b29a      	uxth	r2, r3
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	881b      	ldrh	r3, [r3, #0]
 800207a:	b29b      	uxth	r3, r3
 800207c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002080:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002084:	827b      	strh	r3, [r7, #18]
 8002086:	8a7b      	ldrh	r3, [r7, #18]
 8002088:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800208c:	827b      	strh	r3, [r7, #18]
 800208e:	8a7b      	ldrh	r3, [r7, #18]
 8002090:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002094:	827b      	strh	r3, [r7, #18]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	8a7b      	ldrh	r3, [r7, #18]
 800209c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80020a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80020a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	8013      	strh	r3, [r2, #0]
 80020b0:	e234      	b.n	800251c <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	461a      	mov	r2, r3
 80020b8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	4413      	add	r3, r2
 80020c0:	881b      	ldrh	r3, [r3, #0]
 80020c2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80020c6:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	f280 80fc 	bge.w	80022c8 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	461a      	mov	r2, r3
 80020d6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	4413      	add	r3, r2
 80020de:	881b      	ldrh	r3, [r3, #0]
 80020e0:	b29a      	uxth	r2, r3
 80020e2:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80020e6:	4013      	ands	r3, r2
 80020e8:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	461a      	mov	r2, r3
 80020f2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	4413      	add	r3, r2
 80020fa:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80020fe:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002102:	b292      	uxth	r2, r2
 8002104:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002106:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800210a:	4613      	mov	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	4413      	add	r3, r2
 8002110:	00db      	lsls	r3, r3, #3
 8002112:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	4413      	add	r3, r2
 800211a:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800211c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800211e:	7b1b      	ldrb	r3, [r3, #12]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d125      	bne.n	8002170 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800212c:	b29b      	uxth	r3, r3
 800212e:	461a      	mov	r2, r3
 8002130:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	4413      	add	r3, r2
 8002138:	3306      	adds	r3, #6
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	6812      	ldr	r2, [r2, #0]
 8002140:	4413      	add	r3, r2
 8002142:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002146:	881b      	ldrh	r3, [r3, #0]
 8002148:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800214c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8002150:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002154:	2b00      	cmp	r3, #0
 8002156:	f000 8092 	beq.w	800227e <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6818      	ldr	r0, [r3, #0]
 800215e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002160:	6959      	ldr	r1, [r3, #20]
 8002162:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002164:	88da      	ldrh	r2, [r3, #6]
 8002166:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800216a:	f004 fae0 	bl	800672e <USB_ReadPMA>
 800216e:	e086      	b.n	800227e <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002170:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002172:	78db      	ldrb	r3, [r3, #3]
 8002174:	2b02      	cmp	r3, #2
 8002176:	d10a      	bne.n	800218e <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002178:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800217c:	461a      	mov	r2, r3
 800217e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f000 f9d9 	bl	8002538 <HAL_PCD_EP_DB_Receive>
 8002186:	4603      	mov	r3, r0
 8002188:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 800218c:	e077      	b.n	800227e <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	461a      	mov	r2, r3
 8002194:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	4413      	add	r3, r2
 800219c:	881b      	ldrh	r3, [r3, #0]
 800219e:	b29b      	uxth	r3, r3
 80021a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80021a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021a8:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	461a      	mov	r2, r3
 80021b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	441a      	add	r2, r3
 80021ba:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80021be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80021c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80021c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80021ca:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	461a      	mov	r2, r3
 80021d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	4413      	add	r3, r2
 80021e0:	881b      	ldrh	r3, [r3, #0]
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d024      	beq.n	8002236 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	461a      	mov	r2, r3
 80021f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	00db      	lsls	r3, r3, #3
 80021fe:	4413      	add	r3, r2
 8002200:	3302      	adds	r3, #2
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	6812      	ldr	r2, [r2, #0]
 8002208:	4413      	add	r3, r2
 800220a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800220e:	881b      	ldrh	r3, [r3, #0]
 8002210:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002214:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002218:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800221c:	2b00      	cmp	r3, #0
 800221e:	d02e      	beq.n	800227e <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6818      	ldr	r0, [r3, #0]
 8002224:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002226:	6959      	ldr	r1, [r3, #20]
 8002228:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800222a:	891a      	ldrh	r2, [r3, #8]
 800222c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002230:	f004 fa7d 	bl	800672e <USB_ReadPMA>
 8002234:	e023      	b.n	800227e <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800223e:	b29b      	uxth	r3, r3
 8002240:	461a      	mov	r2, r3
 8002242:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	4413      	add	r3, r2
 800224a:	3306      	adds	r3, #6
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	6812      	ldr	r2, [r2, #0]
 8002252:	4413      	add	r3, r2
 8002254:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002258:	881b      	ldrh	r3, [r3, #0]
 800225a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800225e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002262:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002266:	2b00      	cmp	r3, #0
 8002268:	d009      	beq.n	800227e <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6818      	ldr	r0, [r3, #0]
 800226e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002270:	6959      	ldr	r1, [r3, #20]
 8002272:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002274:	895a      	ldrh	r2, [r3, #10]
 8002276:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800227a:	f004 fa58 	bl	800672e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800227e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002280:	69da      	ldr	r2, [r3, #28]
 8002282:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002286:	441a      	add	r2, r3
 8002288:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800228a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800228c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800228e:	695a      	ldr	r2, [r3, #20]
 8002290:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002294:	441a      	add	r2, r3
 8002296:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002298:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800229a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800229c:	699b      	ldr	r3, [r3, #24]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d005      	beq.n	80022ae <PCD_EP_ISR_Handler+0x514>
 80022a2:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80022a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d206      	bcs.n	80022bc <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80022ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	4619      	mov	r1, r3
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f005 fe05 	bl	8007ec4 <HAL_PCD_DataOutStageCallback>
 80022ba:	e005      	b.n	80022c8 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80022c2:	4618      	mov	r0, r3
 80022c4:	f002 fcfe 	bl	8004cc4 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80022c8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80022cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f000 8123 	beq.w	800251c <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 80022d6:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80022da:	4613      	mov	r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	4413      	add	r3, r2
 80022e0:	00db      	lsls	r3, r3, #3
 80022e2:	3310      	adds	r3, #16
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	4413      	add	r3, r2
 80022e8:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	461a      	mov	r2, r3
 80022f0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	4413      	add	r3, r2
 80022f8:	881b      	ldrh	r3, [r3, #0]
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002300:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002304:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	461a      	mov	r2, r3
 800230e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	441a      	add	r2, r3
 8002316:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800231a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800231e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002322:	b29b      	uxth	r3, r3
 8002324:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002326:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002328:	78db      	ldrb	r3, [r3, #3]
 800232a:	2b01      	cmp	r3, #1
 800232c:	f040 80a2 	bne.w	8002474 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8002330:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002332:	2200      	movs	r2, #0
 8002334:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002336:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002338:	7b1b      	ldrb	r3, [r3, #12]
 800233a:	2b00      	cmp	r3, #0
 800233c:	f000 8093 	beq.w	8002466 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002340:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002344:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002348:	2b00      	cmp	r3, #0
 800234a:	d046      	beq.n	80023da <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800234c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800234e:	785b      	ldrb	r3, [r3, #1]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d126      	bne.n	80023a2 <PCD_EP_ISR_Handler+0x608>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	627b      	str	r3, [r7, #36]	@ 0x24
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002362:	b29b      	uxth	r3, r3
 8002364:	461a      	mov	r2, r3
 8002366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002368:	4413      	add	r3, r2
 800236a:	627b      	str	r3, [r7, #36]	@ 0x24
 800236c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	011a      	lsls	r2, r3, #4
 8002372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002374:	4413      	add	r3, r2
 8002376:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800237a:	623b      	str	r3, [r7, #32]
 800237c:	6a3b      	ldr	r3, [r7, #32]
 800237e:	881b      	ldrh	r3, [r3, #0]
 8002380:	b29b      	uxth	r3, r3
 8002382:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002386:	b29a      	uxth	r2, r3
 8002388:	6a3b      	ldr	r3, [r7, #32]
 800238a:	801a      	strh	r2, [r3, #0]
 800238c:	6a3b      	ldr	r3, [r7, #32]
 800238e:	881b      	ldrh	r3, [r3, #0]
 8002390:	b29b      	uxth	r3, r3
 8002392:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002396:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800239a:	b29a      	uxth	r2, r3
 800239c:	6a3b      	ldr	r3, [r7, #32]
 800239e:	801a      	strh	r2, [r3, #0]
 80023a0:	e061      	b.n	8002466 <PCD_EP_ISR_Handler+0x6cc>
 80023a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023a4:	785b      	ldrb	r3, [r3, #1]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d15d      	bne.n	8002466 <PCD_EP_ISR_Handler+0x6cc>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	461a      	mov	r2, r3
 80023bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023be:	4413      	add	r3, r2
 80023c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	011a      	lsls	r2, r3, #4
 80023c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023ca:	4413      	add	r3, r2
 80023cc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80023d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80023d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023d4:	2200      	movs	r2, #0
 80023d6:	801a      	strh	r2, [r3, #0]
 80023d8:	e045      	b.n	8002466 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80023e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023e2:	785b      	ldrb	r3, [r3, #1]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d126      	bne.n	8002436 <PCD_EP_ISR_Handler+0x69c>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	461a      	mov	r2, r3
 80023fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023fc:	4413      	add	r3, r2
 80023fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8002400:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	011a      	lsls	r2, r3, #4
 8002406:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002408:	4413      	add	r3, r2
 800240a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800240e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002412:	881b      	ldrh	r3, [r3, #0]
 8002414:	b29b      	uxth	r3, r3
 8002416:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800241a:	b29a      	uxth	r2, r3
 800241c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800241e:	801a      	strh	r2, [r3, #0]
 8002420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002422:	881b      	ldrh	r3, [r3, #0]
 8002424:	b29b      	uxth	r3, r3
 8002426:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800242a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800242e:	b29a      	uxth	r2, r3
 8002430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002432:	801a      	strh	r2, [r3, #0]
 8002434:	e017      	b.n	8002466 <PCD_EP_ISR_Handler+0x6cc>
 8002436:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002438:	785b      	ldrb	r3, [r3, #1]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d113      	bne.n	8002466 <PCD_EP_ISR_Handler+0x6cc>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002446:	b29b      	uxth	r3, r3
 8002448:	461a      	mov	r2, r3
 800244a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800244c:	4413      	add	r3, r2
 800244e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002450:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	011a      	lsls	r2, r3, #4
 8002456:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002458:	4413      	add	r3, r2
 800245a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800245e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002462:	2200      	movs	r2, #0
 8002464:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002466:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	4619      	mov	r1, r3
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f005 fd44 	bl	8007efa <HAL_PCD_DataInStageCallback>
 8002472:	e053      	b.n	800251c <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002474:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002478:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800247c:	2b00      	cmp	r3, #0
 800247e:	d146      	bne.n	800250e <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002488:	b29b      	uxth	r3, r3
 800248a:	461a      	mov	r2, r3
 800248c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	00db      	lsls	r3, r3, #3
 8002492:	4413      	add	r3, r2
 8002494:	3302      	adds	r3, #2
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	6812      	ldr	r2, [r2, #0]
 800249c:	4413      	add	r3, r2
 800249e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80024a2:	881b      	ldrh	r3, [r3, #0]
 80024a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024a8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80024ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024ae:	699a      	ldr	r2, [r3, #24]
 80024b0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d907      	bls.n	80024c8 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 80024b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024ba:	699a      	ldr	r2, [r3, #24]
 80024bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80024c0:	1ad2      	subs	r2, r2, r3
 80024c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024c4:	619a      	str	r2, [r3, #24]
 80024c6:	e002      	b.n	80024ce <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 80024c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024ca:	2200      	movs	r2, #0
 80024cc:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80024ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d106      	bne.n	80024e4 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80024d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	4619      	mov	r1, r3
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f005 fd0c 	bl	8007efa <HAL_PCD_DataInStageCallback>
 80024e2:	e01b      	b.n	800251c <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80024e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024e6:	695a      	ldr	r2, [r3, #20]
 80024e8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80024ec:	441a      	add	r2, r3
 80024ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024f0:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80024f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024f4:	69da      	ldr	r2, [r3, #28]
 80024f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80024fa:	441a      	add	r2, r3
 80024fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024fe:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002506:	4618      	mov	r0, r3
 8002508:	f002 fbdc 	bl	8004cc4 <USB_EPStartXfer>
 800250c:	e006      	b.n	800251c <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800250e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002512:	461a      	mov	r2, r3
 8002514:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 f91b 	bl	8002752 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002524:	b29b      	uxth	r3, r3
 8002526:	b21b      	sxth	r3, r3
 8002528:	2b00      	cmp	r3, #0
 800252a:	f6ff ac3b 	blt.w	8001da4 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800252e:	2300      	movs	r3, #0
}
 8002530:	4618      	mov	r0, r3
 8002532:	3758      	adds	r7, #88	@ 0x58
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b088      	sub	sp, #32
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	4613      	mov	r3, r2
 8002544:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002546:	88fb      	ldrh	r3, [r7, #6]
 8002548:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d07e      	beq.n	800264e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002558:	b29b      	uxth	r3, r3
 800255a:	461a      	mov	r2, r3
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	00db      	lsls	r3, r3, #3
 8002562:	4413      	add	r3, r2
 8002564:	3302      	adds	r3, #2
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	68fa      	ldr	r2, [r7, #12]
 800256a:	6812      	ldr	r2, [r2, #0]
 800256c:	4413      	add	r3, r2
 800256e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002572:	881b      	ldrh	r3, [r3, #0]
 8002574:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002578:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	699a      	ldr	r2, [r3, #24]
 800257e:	8b7b      	ldrh	r3, [r7, #26]
 8002580:	429a      	cmp	r2, r3
 8002582:	d306      	bcc.n	8002592 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	699a      	ldr	r2, [r3, #24]
 8002588:	8b7b      	ldrh	r3, [r7, #26]
 800258a:	1ad2      	subs	r2, r2, r3
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	619a      	str	r2, [r3, #24]
 8002590:	e002      	b.n	8002598 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	2200      	movs	r2, #0
 8002596:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d123      	bne.n	80025e8 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	461a      	mov	r2, r3
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	4413      	add	r3, r2
 80025ae:	881b      	ldrh	r3, [r3, #0]
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80025b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025ba:	833b      	strh	r3, [r7, #24]
 80025bc:	8b3b      	ldrh	r3, [r7, #24]
 80025be:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80025c2:	833b      	strh	r3, [r7, #24]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	461a      	mov	r2, r3
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	441a      	add	r2, r3
 80025d2:	8b3b      	ldrh	r3, [r7, #24]
 80025d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80025d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80025dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80025e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80025e8:	88fb      	ldrh	r3, [r7, #6]
 80025ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d01f      	beq.n	8002632 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	461a      	mov	r2, r3
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	4413      	add	r3, r2
 8002600:	881b      	ldrh	r3, [r3, #0]
 8002602:	b29b      	uxth	r3, r3
 8002604:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002608:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800260c:	82fb      	strh	r3, [r7, #22]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	461a      	mov	r2, r3
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	441a      	add	r2, r3
 800261c:	8afb      	ldrh	r3, [r7, #22]
 800261e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002622:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002626:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800262a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800262e:	b29b      	uxth	r3, r3
 8002630:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002632:	8b7b      	ldrh	r3, [r7, #26]
 8002634:	2b00      	cmp	r3, #0
 8002636:	f000 8087 	beq.w	8002748 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6818      	ldr	r0, [r3, #0]
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	6959      	ldr	r1, [r3, #20]
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	891a      	ldrh	r2, [r3, #8]
 8002646:	8b7b      	ldrh	r3, [r7, #26]
 8002648:	f004 f871 	bl	800672e <USB_ReadPMA>
 800264c:	e07c      	b.n	8002748 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002656:	b29b      	uxth	r3, r3
 8002658:	461a      	mov	r2, r3
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	4413      	add	r3, r2
 8002662:	3306      	adds	r3, #6
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	6812      	ldr	r2, [r2, #0]
 800266a:	4413      	add	r3, r2
 800266c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002670:	881b      	ldrh	r3, [r3, #0]
 8002672:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002676:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	699a      	ldr	r2, [r3, #24]
 800267c:	8b7b      	ldrh	r3, [r7, #26]
 800267e:	429a      	cmp	r2, r3
 8002680:	d306      	bcc.n	8002690 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	699a      	ldr	r2, [r3, #24]
 8002686:	8b7b      	ldrh	r3, [r7, #26]
 8002688:	1ad2      	subs	r2, r2, r3
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	619a      	str	r2, [r3, #24]
 800268e:	e002      	b.n	8002696 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	2200      	movs	r2, #0
 8002694:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d123      	bne.n	80026e6 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	461a      	mov	r2, r3
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	4413      	add	r3, r2
 80026ac:	881b      	ldrh	r3, [r3, #0]
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80026b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026b8:	83fb      	strh	r3, [r7, #30]
 80026ba:	8bfb      	ldrh	r3, [r7, #30]
 80026bc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80026c0:	83fb      	strh	r3, [r7, #30]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	461a      	mov	r2, r3
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	441a      	add	r2, r3
 80026d0:	8bfb      	ldrh	r3, [r7, #30]
 80026d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80026d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80026da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80026de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80026e6:	88fb      	ldrh	r3, [r7, #6]
 80026e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d11f      	bne.n	8002730 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	461a      	mov	r2, r3
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	4413      	add	r3, r2
 80026fe:	881b      	ldrh	r3, [r3, #0]
 8002700:	b29b      	uxth	r3, r3
 8002702:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002706:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800270a:	83bb      	strh	r3, [r7, #28]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	461a      	mov	r2, r3
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	441a      	add	r2, r3
 800271a:	8bbb      	ldrh	r3, [r7, #28]
 800271c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002720:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002724:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002728:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800272c:	b29b      	uxth	r3, r3
 800272e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002730:	8b7b      	ldrh	r3, [r7, #26]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d008      	beq.n	8002748 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6818      	ldr	r0, [r3, #0]
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	6959      	ldr	r1, [r3, #20]
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	895a      	ldrh	r2, [r3, #10]
 8002742:	8b7b      	ldrh	r3, [r7, #26]
 8002744:	f003 fff3 	bl	800672e <USB_ReadPMA>
    }
  }

  return count;
 8002748:	8b7b      	ldrh	r3, [r7, #26]
}
 800274a:	4618      	mov	r0, r3
 800274c:	3720      	adds	r7, #32
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b0a4      	sub	sp, #144	@ 0x90
 8002756:	af00      	add	r7, sp, #0
 8002758:	60f8      	str	r0, [r7, #12]
 800275a:	60b9      	str	r1, [r7, #8]
 800275c:	4613      	mov	r3, r2
 800275e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002760:	88fb      	ldrh	r3, [r7, #6]
 8002762:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002766:	2b00      	cmp	r3, #0
 8002768:	f000 81dd 	beq.w	8002b26 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002774:	b29b      	uxth	r3, r3
 8002776:	461a      	mov	r2, r3
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	00db      	lsls	r3, r3, #3
 800277e:	4413      	add	r3, r2
 8002780:	3302      	adds	r3, #2
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	6812      	ldr	r2, [r2, #0]
 8002788:	4413      	add	r3, r2
 800278a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800278e:	881b      	ldrh	r3, [r3, #0]
 8002790:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002794:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	699a      	ldr	r2, [r3, #24]
 800279c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d907      	bls.n	80027b4 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	699a      	ldr	r2, [r3, #24]
 80027a8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80027ac:	1ad2      	subs	r2, r2, r3
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	619a      	str	r2, [r3, #24]
 80027b2:	e002      	b.n	80027ba <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	2200      	movs	r2, #0
 80027b8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	f040 80b9 	bne.w	8002936 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	785b      	ldrb	r3, [r3, #1]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d126      	bne.n	800281a <HAL_PCD_EP_DB_Transmit+0xc8>
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80027da:	b29b      	uxth	r3, r3
 80027dc:	461a      	mov	r2, r3
 80027de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027e0:	4413      	add	r3, r2
 80027e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	011a      	lsls	r2, r3, #4
 80027ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027ec:	4413      	add	r3, r2
 80027ee:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80027f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80027f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027f6:	881b      	ldrh	r3, [r3, #0]
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027fe:	b29a      	uxth	r2, r3
 8002800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002802:	801a      	strh	r2, [r3, #0]
 8002804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002806:	881b      	ldrh	r3, [r3, #0]
 8002808:	b29b      	uxth	r3, r3
 800280a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800280e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002812:	b29a      	uxth	r2, r3
 8002814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002816:	801a      	strh	r2, [r3, #0]
 8002818:	e01a      	b.n	8002850 <HAL_PCD_EP_DB_Transmit+0xfe>
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	785b      	ldrb	r3, [r3, #1]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d116      	bne.n	8002850 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	637b      	str	r3, [r7, #52]	@ 0x34
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002830:	b29b      	uxth	r3, r3
 8002832:	461a      	mov	r2, r3
 8002834:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002836:	4413      	add	r3, r2
 8002838:	637b      	str	r3, [r7, #52]	@ 0x34
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	011a      	lsls	r2, r3, #4
 8002840:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002842:	4413      	add	r3, r2
 8002844:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002848:	633b      	str	r3, [r7, #48]	@ 0x30
 800284a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800284c:	2200      	movs	r2, #0
 800284e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	627b      	str	r3, [r7, #36]	@ 0x24
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	785b      	ldrb	r3, [r3, #1]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d126      	bne.n	80028ac <HAL_PCD_EP_DB_Transmit+0x15a>
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	61fb      	str	r3, [r7, #28]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800286c:	b29b      	uxth	r3, r3
 800286e:	461a      	mov	r2, r3
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	4413      	add	r3, r2
 8002874:	61fb      	str	r3, [r7, #28]
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	011a      	lsls	r2, r3, #4
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	4413      	add	r3, r2
 8002880:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002884:	61bb      	str	r3, [r7, #24]
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	881b      	ldrh	r3, [r3, #0]
 800288a:	b29b      	uxth	r3, r3
 800288c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002890:	b29a      	uxth	r2, r3
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	801a      	strh	r2, [r3, #0]
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	881b      	ldrh	r3, [r3, #0]
 800289a:	b29b      	uxth	r3, r3
 800289c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028a4:	b29a      	uxth	r2, r3
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	801a      	strh	r2, [r3, #0]
 80028aa:	e017      	b.n	80028dc <HAL_PCD_EP_DB_Transmit+0x18a>
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	785b      	ldrb	r3, [r3, #1]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d113      	bne.n	80028dc <HAL_PCD_EP_DB_Transmit+0x18a>
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80028bc:	b29b      	uxth	r3, r3
 80028be:	461a      	mov	r2, r3
 80028c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c2:	4413      	add	r3, r2
 80028c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	011a      	lsls	r2, r3, #4
 80028cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ce:	4413      	add	r3, r2
 80028d0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80028d4:	623b      	str	r3, [r7, #32]
 80028d6:	6a3b      	ldr	r3, [r7, #32]
 80028d8:	2200      	movs	r2, #0
 80028da:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	4619      	mov	r1, r3
 80028e2:	68f8      	ldr	r0, [r7, #12]
 80028e4:	f005 fb09 	bl	8007efa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80028e8:	88fb      	ldrh	r3, [r7, #6]
 80028ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	f000 82fc 	beq.w	8002eec <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	461a      	mov	r2, r3
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	4413      	add	r3, r2
 8002902:	881b      	ldrh	r3, [r3, #0]
 8002904:	b29b      	uxth	r3, r3
 8002906:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800290a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800290e:	82fb      	strh	r3, [r7, #22]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	461a      	mov	r2, r3
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	441a      	add	r2, r3
 800291e:	8afb      	ldrh	r3, [r7, #22]
 8002920:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002924:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002928:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800292c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002930:	b29b      	uxth	r3, r3
 8002932:	8013      	strh	r3, [r2, #0]
 8002934:	e2da      	b.n	8002eec <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002936:	88fb      	ldrh	r3, [r7, #6]
 8002938:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d021      	beq.n	8002984 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	461a      	mov	r2, r3
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	4413      	add	r3, r2
 800294e:	881b      	ldrh	r3, [r3, #0]
 8002950:	b29b      	uxth	r3, r3
 8002952:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002956:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800295a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	461a      	mov	r2, r3
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	441a      	add	r2, r3
 800296c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8002970:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002974:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002978:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800297c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002980:	b29b      	uxth	r3, r3
 8002982:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800298a:	2b01      	cmp	r3, #1
 800298c:	f040 82ae 	bne.w	8002eec <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	695a      	ldr	r2, [r3, #20]
 8002994:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002998:	441a      	add	r2, r3
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	69da      	ldr	r2, [r3, #28]
 80029a2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80029a6:	441a      	add	r2, r3
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	6a1a      	ldr	r2, [r3, #32]
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d30b      	bcc.n	80029d0 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	6a1a      	ldr	r2, [r3, #32]
 80029c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80029c8:	1ad2      	subs	r2, r2, r3
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	621a      	str	r2, [r3, #32]
 80029ce:	e017      	b.n	8002a00 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	6a1b      	ldr	r3, [r3, #32]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d108      	bne.n	80029ea <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80029d8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80029dc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80029e8:	e00a      	b.n	8002a00 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	6a1b      	ldr	r3, [r3, #32]
 80029f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	2200      	movs	r2, #0
 80029fe:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	785b      	ldrb	r3, [r3, #1]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d165      	bne.n	8002ad4 <HAL_PCD_EP_DB_Transmit+0x382>
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	461a      	mov	r2, r3
 8002a1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a1c:	4413      	add	r3, r2
 8002a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	011a      	lsls	r2, r3, #4
 8002a26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a28:	4413      	add	r3, r2
 8002a2a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002a2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a32:	881b      	ldrh	r3, [r3, #0]
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a3e:	801a      	strh	r2, [r3, #0]
 8002a40:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a44:	2b3e      	cmp	r3, #62	@ 0x3e
 8002a46:	d91d      	bls.n	8002a84 <HAL_PCD_EP_DB_Transmit+0x332>
 8002a48:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a4c:	095b      	lsrs	r3, r3, #5
 8002a4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002a50:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a54:	f003 031f 	and.w	r3, r3, #31
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d102      	bne.n	8002a62 <HAL_PCD_EP_DB_Transmit+0x310>
 8002a5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002a62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a64:	881b      	ldrh	r3, [r3, #0]
 8002a66:	b29a      	uxth	r2, r3
 8002a68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	029b      	lsls	r3, r3, #10
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	4313      	orrs	r3, r2
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a7c:	b29a      	uxth	r2, r3
 8002a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a80:	801a      	strh	r2, [r3, #0]
 8002a82:	e044      	b.n	8002b0e <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002a84:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d10a      	bne.n	8002aa2 <HAL_PCD_EP_DB_Transmit+0x350>
 8002a8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a8e:	881b      	ldrh	r3, [r3, #0]
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a9e:	801a      	strh	r2, [r3, #0]
 8002aa0:	e035      	b.n	8002b0e <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002aa2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002aa6:	085b      	lsrs	r3, r3, #1
 8002aa8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002aaa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d002      	beq.n	8002abc <HAL_PCD_EP_DB_Transmit+0x36a>
 8002ab6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ab8:	3301      	adds	r3, #1
 8002aba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002abc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002abe:	881b      	ldrh	r3, [r3, #0]
 8002ac0:	b29a      	uxth	r2, r3
 8002ac2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	029b      	lsls	r3, r3, #10
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	4313      	orrs	r3, r2
 8002acc:	b29a      	uxth	r2, r3
 8002ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ad0:	801a      	strh	r2, [r3, #0]
 8002ad2:	e01c      	b.n	8002b0e <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	785b      	ldrb	r3, [r3, #1]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d118      	bne.n	8002b0e <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	461a      	mov	r2, r3
 8002aee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002af0:	4413      	add	r3, r2
 8002af2:	647b      	str	r3, [r7, #68]	@ 0x44
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	011a      	lsls	r2, r3, #4
 8002afa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002afc:	4413      	add	r3, r2
 8002afe:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002b02:	643b      	str	r3, [r7, #64]	@ 0x40
 8002b04:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b08:	b29a      	uxth	r2, r3
 8002b0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b0c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6818      	ldr	r0, [r3, #0]
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	6959      	ldr	r1, [r3, #20]
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	891a      	ldrh	r2, [r3, #8]
 8002b1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	f003 fdbf 	bl	80066a2 <USB_WritePMA>
 8002b24:	e1e2      	b.n	8002eec <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	461a      	mov	r2, r3
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	4413      	add	r3, r2
 8002b3a:	3306      	adds	r3, #6
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	6812      	ldr	r2, [r2, #0]
 8002b42:	4413      	add	r3, r2
 8002b44:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002b48:	881b      	ldrh	r3, [r3, #0]
 8002b4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b4e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	699a      	ldr	r2, [r3, #24]
 8002b56:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d307      	bcc.n	8002b6e <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	699a      	ldr	r2, [r3, #24]
 8002b62:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002b66:	1ad2      	subs	r2, r2, r3
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	619a      	str	r2, [r3, #24]
 8002b6c:	e002      	b.n	8002b74 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	2200      	movs	r2, #0
 8002b72:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f040 80c0 	bne.w	8002cfe <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	785b      	ldrb	r3, [r3, #1]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d126      	bne.n	8002bd4 <HAL_PCD_EP_DB_Transmit+0x482>
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	461a      	mov	r2, r3
 8002b98:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002b9a:	4413      	add	r3, r2
 8002b9c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	011a      	lsls	r2, r3, #4
 8002ba4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002ba6:	4413      	add	r3, r2
 8002ba8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002bac:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002bae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002bb0:	881b      	ldrh	r3, [r3, #0]
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002bbc:	801a      	strh	r2, [r3, #0]
 8002bbe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002bc0:	881b      	ldrh	r3, [r3, #0]
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002bd0:	801a      	strh	r2, [r3, #0]
 8002bd2:	e01a      	b.n	8002c0a <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	785b      	ldrb	r3, [r3, #1]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d116      	bne.n	8002c0a <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	667b      	str	r3, [r7, #100]	@ 0x64
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	461a      	mov	r2, r3
 8002bee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002bf0:	4413      	add	r3, r2
 8002bf2:	667b      	str	r3, [r7, #100]	@ 0x64
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	011a      	lsls	r2, r3, #4
 8002bfa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002bfc:	4413      	add	r3, r2
 8002bfe:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002c02:	663b      	str	r3, [r7, #96]	@ 0x60
 8002c04:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c06:	2200      	movs	r2, #0
 8002c08:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	677b      	str	r3, [r7, #116]	@ 0x74
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	785b      	ldrb	r3, [r3, #1]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d12b      	bne.n	8002c70 <HAL_PCD_EP_DB_Transmit+0x51e>
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	461a      	mov	r2, r3
 8002c2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c2c:	4413      	add	r3, r2
 8002c2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	011a      	lsls	r2, r3, #4
 8002c36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c38:	4413      	add	r3, r2
 8002c3a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002c3e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002c42:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002c46:	881b      	ldrh	r3, [r3, #0]
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c4e:	b29a      	uxth	r2, r3
 8002c50:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002c54:	801a      	strh	r2, [r3, #0]
 8002c56:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002c5a:	881b      	ldrh	r3, [r3, #0]
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c66:	b29a      	uxth	r2, r3
 8002c68:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002c6c:	801a      	strh	r2, [r3, #0]
 8002c6e:	e017      	b.n	8002ca0 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	785b      	ldrb	r3, [r3, #1]
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d113      	bne.n	8002ca0 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	461a      	mov	r2, r3
 8002c84:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c86:	4413      	add	r3, r2
 8002c88:	677b      	str	r3, [r7, #116]	@ 0x74
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	011a      	lsls	r2, r3, #4
 8002c90:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c92:	4413      	add	r3, r2
 8002c94:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002c98:	673b      	str	r3, [r7, #112]	@ 0x70
 8002c9a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	68f8      	ldr	r0, [r7, #12]
 8002ca8:	f005 f927 	bl	8007efa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002cac:	88fb      	ldrh	r3, [r7, #6]
 8002cae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	f040 811a 	bne.w	8002eec <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	4413      	add	r3, r2
 8002cc6:	881b      	ldrh	r3, [r3, #0]
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002cce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cd2:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	461a      	mov	r2, r3
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	441a      	add	r2, r3
 8002ce4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002ce8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002cec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002cf0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002cf4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	8013      	strh	r3, [r2, #0]
 8002cfc:	e0f6      	b.n	8002eec <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002cfe:	88fb      	ldrh	r3, [r7, #6]
 8002d00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d121      	bne.n	8002d4c <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	4413      	add	r3, r2
 8002d16:	881b      	ldrh	r3, [r3, #0]
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d22:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	441a      	add	r2, r3
 8002d34:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002d38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002d3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002d40:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002d44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	f040 80ca 	bne.w	8002eec <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	695a      	ldr	r2, [r3, #20]
 8002d5c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002d60:	441a      	add	r2, r3
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	69da      	ldr	r2, [r3, #28]
 8002d6a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002d6e:	441a      	add	r2, r3
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	6a1a      	ldr	r2, [r3, #32]
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	691b      	ldr	r3, [r3, #16]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d30b      	bcc.n	8002d98 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	691b      	ldr	r3, [r3, #16]
 8002d84:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	6a1a      	ldr	r2, [r3, #32]
 8002d8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d90:	1ad2      	subs	r2, r2, r3
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	621a      	str	r2, [r3, #32]
 8002d96:	e017      	b.n	8002dc8 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	6a1b      	ldr	r3, [r3, #32]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d108      	bne.n	8002db2 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8002da0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002da4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002db0:	e00a      	b.n	8002dc8 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	657b      	str	r3, [r7, #84]	@ 0x54
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	785b      	ldrb	r3, [r3, #1]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d165      	bne.n	8002ea2 <HAL_PCD_EP_DB_Transmit+0x750>
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	461a      	mov	r2, r3
 8002de8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002dea:	4413      	add	r3, r2
 8002dec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	011a      	lsls	r2, r3, #4
 8002df4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002df6:	4413      	add	r3, r2
 8002df8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002dfc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002dfe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002e00:	881b      	ldrh	r3, [r3, #0]
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e08:	b29a      	uxth	r2, r3
 8002e0a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002e0c:	801a      	strh	r2, [r3, #0]
 8002e0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e12:	2b3e      	cmp	r3, #62	@ 0x3e
 8002e14:	d91d      	bls.n	8002e52 <HAL_PCD_EP_DB_Transmit+0x700>
 8002e16:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e1a:	095b      	lsrs	r3, r3, #5
 8002e1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002e1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e22:	f003 031f 	and.w	r3, r3, #31
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d102      	bne.n	8002e30 <HAL_PCD_EP_DB_Transmit+0x6de>
 8002e2a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e2c:	3b01      	subs	r3, #1
 8002e2e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002e30:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002e32:	881b      	ldrh	r3, [r3, #0]
 8002e34:	b29a      	uxth	r2, r3
 8002e36:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	029b      	lsls	r3, r3, #10
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002e4e:	801a      	strh	r2, [r3, #0]
 8002e50:	e041      	b.n	8002ed6 <HAL_PCD_EP_DB_Transmit+0x784>
 8002e52:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d10a      	bne.n	8002e70 <HAL_PCD_EP_DB_Transmit+0x71e>
 8002e5a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002e5c:	881b      	ldrh	r3, [r3, #0]
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e68:	b29a      	uxth	r2, r3
 8002e6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002e6c:	801a      	strh	r2, [r3, #0]
 8002e6e:	e032      	b.n	8002ed6 <HAL_PCD_EP_DB_Transmit+0x784>
 8002e70:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e74:	085b      	lsrs	r3, r3, #1
 8002e76:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002e78:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e7c:	f003 0301 	and.w	r3, r3, #1
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d002      	beq.n	8002e8a <HAL_PCD_EP_DB_Transmit+0x738>
 8002e84:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e86:	3301      	adds	r3, #1
 8002e88:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002e8a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002e8c:	881b      	ldrh	r3, [r3, #0]
 8002e8e:	b29a      	uxth	r2, r3
 8002e90:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	029b      	lsls	r3, r3, #10
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	b29a      	uxth	r2, r3
 8002e9c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002e9e:	801a      	strh	r2, [r3, #0]
 8002ea0:	e019      	b.n	8002ed6 <HAL_PCD_EP_DB_Transmit+0x784>
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	785b      	ldrb	r3, [r3, #1]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d115      	bne.n	8002ed6 <HAL_PCD_EP_DB_Transmit+0x784>
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002eb8:	4413      	add	r3, r2
 8002eba:	657b      	str	r3, [r7, #84]	@ 0x54
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	011a      	lsls	r2, r3, #4
 8002ec2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ec4:	4413      	add	r3, r2
 8002ec6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002eca:	653b      	str	r3, [r7, #80]	@ 0x50
 8002ecc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ed0:	b29a      	uxth	r2, r3
 8002ed2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ed4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6818      	ldr	r0, [r3, #0]
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	6959      	ldr	r1, [r3, #20]
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	895a      	ldrh	r2, [r3, #10]
 8002ee2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	f003 fbdb 	bl	80066a2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	4413      	add	r3, r2
 8002efa:	881b      	ldrh	r3, [r3, #0]
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002f02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f06:	82bb      	strh	r3, [r7, #20]
 8002f08:	8abb      	ldrh	r3, [r7, #20]
 8002f0a:	f083 0310 	eor.w	r3, r3, #16
 8002f0e:	82bb      	strh	r3, [r7, #20]
 8002f10:	8abb      	ldrh	r3, [r7, #20]
 8002f12:	f083 0320 	eor.w	r3, r3, #32
 8002f16:	82bb      	strh	r3, [r7, #20]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	441a      	add	r2, r3
 8002f26:	8abb      	ldrh	r3, [r7, #20]
 8002f28:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002f2c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002f30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3790      	adds	r7, #144	@ 0x90
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002f46:	b480      	push	{r7}
 8002f48:	b087      	sub	sp, #28
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	60f8      	str	r0, [r7, #12]
 8002f4e:	607b      	str	r3, [r7, #4]
 8002f50:	460b      	mov	r3, r1
 8002f52:	817b      	strh	r3, [r7, #10]
 8002f54:	4613      	mov	r3, r2
 8002f56:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002f58:	897b      	ldrh	r3, [r7, #10]
 8002f5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d00b      	beq.n	8002f7c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f64:	897b      	ldrh	r3, [r7, #10]
 8002f66:	f003 0207 	and.w	r2, r3, #7
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	4413      	add	r3, r2
 8002f70:	00db      	lsls	r3, r3, #3
 8002f72:	3310      	adds	r3, #16
 8002f74:	68fa      	ldr	r2, [r7, #12]
 8002f76:	4413      	add	r3, r2
 8002f78:	617b      	str	r3, [r7, #20]
 8002f7a:	e009      	b.n	8002f90 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f7c:	897a      	ldrh	r2, [r7, #10]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	4413      	add	r3, r2
 8002f84:	00db      	lsls	r3, r3, #3
 8002f86:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002f90:	893b      	ldrh	r3, [r7, #8]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d107      	bne.n	8002fa6 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	80da      	strh	r2, [r3, #6]
 8002fa4:	e00b      	b.n	8002fbe <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	0c1b      	lsrs	r3, r3, #16
 8002fb8:	b29a      	uxth	r2, r3
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	371c      	adds	r7, #28
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bc80      	pop	{r7}
 8002fc8:	4770      	bx	lr
	...

08002fcc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b086      	sub	sp, #24
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d101      	bne.n	8002fde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e272      	b.n	80034c4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0301 	and.w	r3, r3, #1
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	f000 8087 	beq.w	80030fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fec:	4b92      	ldr	r3, [pc, #584]	@ (8003238 <HAL_RCC_OscConfig+0x26c>)
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f003 030c 	and.w	r3, r3, #12
 8002ff4:	2b04      	cmp	r3, #4
 8002ff6:	d00c      	beq.n	8003012 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ff8:	4b8f      	ldr	r3, [pc, #572]	@ (8003238 <HAL_RCC_OscConfig+0x26c>)
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f003 030c 	and.w	r3, r3, #12
 8003000:	2b08      	cmp	r3, #8
 8003002:	d112      	bne.n	800302a <HAL_RCC_OscConfig+0x5e>
 8003004:	4b8c      	ldr	r3, [pc, #560]	@ (8003238 <HAL_RCC_OscConfig+0x26c>)
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800300c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003010:	d10b      	bne.n	800302a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003012:	4b89      	ldr	r3, [pc, #548]	@ (8003238 <HAL_RCC_OscConfig+0x26c>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d06c      	beq.n	80030f8 <HAL_RCC_OscConfig+0x12c>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d168      	bne.n	80030f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e24c      	b.n	80034c4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003032:	d106      	bne.n	8003042 <HAL_RCC_OscConfig+0x76>
 8003034:	4b80      	ldr	r3, [pc, #512]	@ (8003238 <HAL_RCC_OscConfig+0x26c>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a7f      	ldr	r2, [pc, #508]	@ (8003238 <HAL_RCC_OscConfig+0x26c>)
 800303a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800303e:	6013      	str	r3, [r2, #0]
 8003040:	e02e      	b.n	80030a0 <HAL_RCC_OscConfig+0xd4>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d10c      	bne.n	8003064 <HAL_RCC_OscConfig+0x98>
 800304a:	4b7b      	ldr	r3, [pc, #492]	@ (8003238 <HAL_RCC_OscConfig+0x26c>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a7a      	ldr	r2, [pc, #488]	@ (8003238 <HAL_RCC_OscConfig+0x26c>)
 8003050:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003054:	6013      	str	r3, [r2, #0]
 8003056:	4b78      	ldr	r3, [pc, #480]	@ (8003238 <HAL_RCC_OscConfig+0x26c>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a77      	ldr	r2, [pc, #476]	@ (8003238 <HAL_RCC_OscConfig+0x26c>)
 800305c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003060:	6013      	str	r3, [r2, #0]
 8003062:	e01d      	b.n	80030a0 <HAL_RCC_OscConfig+0xd4>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800306c:	d10c      	bne.n	8003088 <HAL_RCC_OscConfig+0xbc>
 800306e:	4b72      	ldr	r3, [pc, #456]	@ (8003238 <HAL_RCC_OscConfig+0x26c>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a71      	ldr	r2, [pc, #452]	@ (8003238 <HAL_RCC_OscConfig+0x26c>)
 8003074:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003078:	6013      	str	r3, [r2, #0]
 800307a:	4b6f      	ldr	r3, [pc, #444]	@ (8003238 <HAL_RCC_OscConfig+0x26c>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a6e      	ldr	r2, [pc, #440]	@ (8003238 <HAL_RCC_OscConfig+0x26c>)
 8003080:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003084:	6013      	str	r3, [r2, #0]
 8003086:	e00b      	b.n	80030a0 <HAL_RCC_OscConfig+0xd4>
 8003088:	4b6b      	ldr	r3, [pc, #428]	@ (8003238 <HAL_RCC_OscConfig+0x26c>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a6a      	ldr	r2, [pc, #424]	@ (8003238 <HAL_RCC_OscConfig+0x26c>)
 800308e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003092:	6013      	str	r3, [r2, #0]
 8003094:	4b68      	ldr	r3, [pc, #416]	@ (8003238 <HAL_RCC_OscConfig+0x26c>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a67      	ldr	r2, [pc, #412]	@ (8003238 <HAL_RCC_OscConfig+0x26c>)
 800309a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800309e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d013      	beq.n	80030d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a8:	f7fd fc3c 	bl	8000924 <HAL_GetTick>
 80030ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030b0:	f7fd fc38 	bl	8000924 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b64      	cmp	r3, #100	@ 0x64
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e200      	b.n	80034c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030c2:	4b5d      	ldr	r3, [pc, #372]	@ (8003238 <HAL_RCC_OscConfig+0x26c>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d0f0      	beq.n	80030b0 <HAL_RCC_OscConfig+0xe4>
 80030ce:	e014      	b.n	80030fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d0:	f7fd fc28 	bl	8000924 <HAL_GetTick>
 80030d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030d6:	e008      	b.n	80030ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030d8:	f7fd fc24 	bl	8000924 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b64      	cmp	r3, #100	@ 0x64
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e1ec      	b.n	80034c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ea:	4b53      	ldr	r3, [pc, #332]	@ (8003238 <HAL_RCC_OscConfig+0x26c>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1f0      	bne.n	80030d8 <HAL_RCC_OscConfig+0x10c>
 80030f6:	e000      	b.n	80030fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d063      	beq.n	80031ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003106:	4b4c      	ldr	r3, [pc, #304]	@ (8003238 <HAL_RCC_OscConfig+0x26c>)
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f003 030c 	and.w	r3, r3, #12
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00b      	beq.n	800312a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003112:	4b49      	ldr	r3, [pc, #292]	@ (8003238 <HAL_RCC_OscConfig+0x26c>)
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f003 030c 	and.w	r3, r3, #12
 800311a:	2b08      	cmp	r3, #8
 800311c:	d11c      	bne.n	8003158 <HAL_RCC_OscConfig+0x18c>
 800311e:	4b46      	ldr	r3, [pc, #280]	@ (8003238 <HAL_RCC_OscConfig+0x26c>)
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d116      	bne.n	8003158 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800312a:	4b43      	ldr	r3, [pc, #268]	@ (8003238 <HAL_RCC_OscConfig+0x26c>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d005      	beq.n	8003142 <HAL_RCC_OscConfig+0x176>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	2b01      	cmp	r3, #1
 800313c:	d001      	beq.n	8003142 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e1c0      	b.n	80034c4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003142:	4b3d      	ldr	r3, [pc, #244]	@ (8003238 <HAL_RCC_OscConfig+0x26c>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	00db      	lsls	r3, r3, #3
 8003150:	4939      	ldr	r1, [pc, #228]	@ (8003238 <HAL_RCC_OscConfig+0x26c>)
 8003152:	4313      	orrs	r3, r2
 8003154:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003156:	e03a      	b.n	80031ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	691b      	ldr	r3, [r3, #16]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d020      	beq.n	80031a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003160:	4b36      	ldr	r3, [pc, #216]	@ (800323c <HAL_RCC_OscConfig+0x270>)
 8003162:	2201      	movs	r2, #1
 8003164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003166:	f7fd fbdd 	bl	8000924 <HAL_GetTick>
 800316a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800316c:	e008      	b.n	8003180 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800316e:	f7fd fbd9 	bl	8000924 <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	2b02      	cmp	r3, #2
 800317a:	d901      	bls.n	8003180 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e1a1      	b.n	80034c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003180:	4b2d      	ldr	r3, [pc, #180]	@ (8003238 <HAL_RCC_OscConfig+0x26c>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0302 	and.w	r3, r3, #2
 8003188:	2b00      	cmp	r3, #0
 800318a:	d0f0      	beq.n	800316e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800318c:	4b2a      	ldr	r3, [pc, #168]	@ (8003238 <HAL_RCC_OscConfig+0x26c>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	695b      	ldr	r3, [r3, #20]
 8003198:	00db      	lsls	r3, r3, #3
 800319a:	4927      	ldr	r1, [pc, #156]	@ (8003238 <HAL_RCC_OscConfig+0x26c>)
 800319c:	4313      	orrs	r3, r2
 800319e:	600b      	str	r3, [r1, #0]
 80031a0:	e015      	b.n	80031ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031a2:	4b26      	ldr	r3, [pc, #152]	@ (800323c <HAL_RCC_OscConfig+0x270>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a8:	f7fd fbbc 	bl	8000924 <HAL_GetTick>
 80031ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ae:	e008      	b.n	80031c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031b0:	f7fd fbb8 	bl	8000924 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e180      	b.n	80034c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031c2:	4b1d      	ldr	r3, [pc, #116]	@ (8003238 <HAL_RCC_OscConfig+0x26c>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1f0      	bne.n	80031b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0308 	and.w	r3, r3, #8
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d03a      	beq.n	8003250 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d019      	beq.n	8003216 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031e2:	4b17      	ldr	r3, [pc, #92]	@ (8003240 <HAL_RCC_OscConfig+0x274>)
 80031e4:	2201      	movs	r2, #1
 80031e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031e8:	f7fd fb9c 	bl	8000924 <HAL_GetTick>
 80031ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031f0:	f7fd fb98 	bl	8000924 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e160      	b.n	80034c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003202:	4b0d      	ldr	r3, [pc, #52]	@ (8003238 <HAL_RCC_OscConfig+0x26c>)
 8003204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d0f0      	beq.n	80031f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800320e:	2001      	movs	r0, #1
 8003210:	f000 faba 	bl	8003788 <RCC_Delay>
 8003214:	e01c      	b.n	8003250 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003216:	4b0a      	ldr	r3, [pc, #40]	@ (8003240 <HAL_RCC_OscConfig+0x274>)
 8003218:	2200      	movs	r2, #0
 800321a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800321c:	f7fd fb82 	bl	8000924 <HAL_GetTick>
 8003220:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003222:	e00f      	b.n	8003244 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003224:	f7fd fb7e 	bl	8000924 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b02      	cmp	r3, #2
 8003230:	d908      	bls.n	8003244 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e146      	b.n	80034c4 <HAL_RCC_OscConfig+0x4f8>
 8003236:	bf00      	nop
 8003238:	40021000 	.word	0x40021000
 800323c:	42420000 	.word	0x42420000
 8003240:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003244:	4b92      	ldr	r3, [pc, #584]	@ (8003490 <HAL_RCC_OscConfig+0x4c4>)
 8003246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003248:	f003 0302 	and.w	r3, r3, #2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1e9      	bne.n	8003224 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0304 	and.w	r3, r3, #4
 8003258:	2b00      	cmp	r3, #0
 800325a:	f000 80a6 	beq.w	80033aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800325e:	2300      	movs	r3, #0
 8003260:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003262:	4b8b      	ldr	r3, [pc, #556]	@ (8003490 <HAL_RCC_OscConfig+0x4c4>)
 8003264:	69db      	ldr	r3, [r3, #28]
 8003266:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d10d      	bne.n	800328a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800326e:	4b88      	ldr	r3, [pc, #544]	@ (8003490 <HAL_RCC_OscConfig+0x4c4>)
 8003270:	69db      	ldr	r3, [r3, #28]
 8003272:	4a87      	ldr	r2, [pc, #540]	@ (8003490 <HAL_RCC_OscConfig+0x4c4>)
 8003274:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003278:	61d3      	str	r3, [r2, #28]
 800327a:	4b85      	ldr	r3, [pc, #532]	@ (8003490 <HAL_RCC_OscConfig+0x4c4>)
 800327c:	69db      	ldr	r3, [r3, #28]
 800327e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003282:	60bb      	str	r3, [r7, #8]
 8003284:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003286:	2301      	movs	r3, #1
 8003288:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800328a:	4b82      	ldr	r3, [pc, #520]	@ (8003494 <HAL_RCC_OscConfig+0x4c8>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003292:	2b00      	cmp	r3, #0
 8003294:	d118      	bne.n	80032c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003296:	4b7f      	ldr	r3, [pc, #508]	@ (8003494 <HAL_RCC_OscConfig+0x4c8>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a7e      	ldr	r2, [pc, #504]	@ (8003494 <HAL_RCC_OscConfig+0x4c8>)
 800329c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032a2:	f7fd fb3f 	bl	8000924 <HAL_GetTick>
 80032a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a8:	e008      	b.n	80032bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032aa:	f7fd fb3b 	bl	8000924 <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	2b64      	cmp	r3, #100	@ 0x64
 80032b6:	d901      	bls.n	80032bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e103      	b.n	80034c4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032bc:	4b75      	ldr	r3, [pc, #468]	@ (8003494 <HAL_RCC_OscConfig+0x4c8>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d0f0      	beq.n	80032aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d106      	bne.n	80032de <HAL_RCC_OscConfig+0x312>
 80032d0:	4b6f      	ldr	r3, [pc, #444]	@ (8003490 <HAL_RCC_OscConfig+0x4c4>)
 80032d2:	6a1b      	ldr	r3, [r3, #32]
 80032d4:	4a6e      	ldr	r2, [pc, #440]	@ (8003490 <HAL_RCC_OscConfig+0x4c4>)
 80032d6:	f043 0301 	orr.w	r3, r3, #1
 80032da:	6213      	str	r3, [r2, #32]
 80032dc:	e02d      	b.n	800333a <HAL_RCC_OscConfig+0x36e>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d10c      	bne.n	8003300 <HAL_RCC_OscConfig+0x334>
 80032e6:	4b6a      	ldr	r3, [pc, #424]	@ (8003490 <HAL_RCC_OscConfig+0x4c4>)
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	4a69      	ldr	r2, [pc, #420]	@ (8003490 <HAL_RCC_OscConfig+0x4c4>)
 80032ec:	f023 0301 	bic.w	r3, r3, #1
 80032f0:	6213      	str	r3, [r2, #32]
 80032f2:	4b67      	ldr	r3, [pc, #412]	@ (8003490 <HAL_RCC_OscConfig+0x4c4>)
 80032f4:	6a1b      	ldr	r3, [r3, #32]
 80032f6:	4a66      	ldr	r2, [pc, #408]	@ (8003490 <HAL_RCC_OscConfig+0x4c4>)
 80032f8:	f023 0304 	bic.w	r3, r3, #4
 80032fc:	6213      	str	r3, [r2, #32]
 80032fe:	e01c      	b.n	800333a <HAL_RCC_OscConfig+0x36e>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	2b05      	cmp	r3, #5
 8003306:	d10c      	bne.n	8003322 <HAL_RCC_OscConfig+0x356>
 8003308:	4b61      	ldr	r3, [pc, #388]	@ (8003490 <HAL_RCC_OscConfig+0x4c4>)
 800330a:	6a1b      	ldr	r3, [r3, #32]
 800330c:	4a60      	ldr	r2, [pc, #384]	@ (8003490 <HAL_RCC_OscConfig+0x4c4>)
 800330e:	f043 0304 	orr.w	r3, r3, #4
 8003312:	6213      	str	r3, [r2, #32]
 8003314:	4b5e      	ldr	r3, [pc, #376]	@ (8003490 <HAL_RCC_OscConfig+0x4c4>)
 8003316:	6a1b      	ldr	r3, [r3, #32]
 8003318:	4a5d      	ldr	r2, [pc, #372]	@ (8003490 <HAL_RCC_OscConfig+0x4c4>)
 800331a:	f043 0301 	orr.w	r3, r3, #1
 800331e:	6213      	str	r3, [r2, #32]
 8003320:	e00b      	b.n	800333a <HAL_RCC_OscConfig+0x36e>
 8003322:	4b5b      	ldr	r3, [pc, #364]	@ (8003490 <HAL_RCC_OscConfig+0x4c4>)
 8003324:	6a1b      	ldr	r3, [r3, #32]
 8003326:	4a5a      	ldr	r2, [pc, #360]	@ (8003490 <HAL_RCC_OscConfig+0x4c4>)
 8003328:	f023 0301 	bic.w	r3, r3, #1
 800332c:	6213      	str	r3, [r2, #32]
 800332e:	4b58      	ldr	r3, [pc, #352]	@ (8003490 <HAL_RCC_OscConfig+0x4c4>)
 8003330:	6a1b      	ldr	r3, [r3, #32]
 8003332:	4a57      	ldr	r2, [pc, #348]	@ (8003490 <HAL_RCC_OscConfig+0x4c4>)
 8003334:	f023 0304 	bic.w	r3, r3, #4
 8003338:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d015      	beq.n	800336e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003342:	f7fd faef 	bl	8000924 <HAL_GetTick>
 8003346:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003348:	e00a      	b.n	8003360 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800334a:	f7fd faeb 	bl	8000924 <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003358:	4293      	cmp	r3, r2
 800335a:	d901      	bls.n	8003360 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e0b1      	b.n	80034c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003360:	4b4b      	ldr	r3, [pc, #300]	@ (8003490 <HAL_RCC_OscConfig+0x4c4>)
 8003362:	6a1b      	ldr	r3, [r3, #32]
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d0ee      	beq.n	800334a <HAL_RCC_OscConfig+0x37e>
 800336c:	e014      	b.n	8003398 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800336e:	f7fd fad9 	bl	8000924 <HAL_GetTick>
 8003372:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003374:	e00a      	b.n	800338c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003376:	f7fd fad5 	bl	8000924 <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003384:	4293      	cmp	r3, r2
 8003386:	d901      	bls.n	800338c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e09b      	b.n	80034c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800338c:	4b40      	ldr	r3, [pc, #256]	@ (8003490 <HAL_RCC_OscConfig+0x4c4>)
 800338e:	6a1b      	ldr	r3, [r3, #32]
 8003390:	f003 0302 	and.w	r3, r3, #2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d1ee      	bne.n	8003376 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003398:	7dfb      	ldrb	r3, [r7, #23]
 800339a:	2b01      	cmp	r3, #1
 800339c:	d105      	bne.n	80033aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800339e:	4b3c      	ldr	r3, [pc, #240]	@ (8003490 <HAL_RCC_OscConfig+0x4c4>)
 80033a0:	69db      	ldr	r3, [r3, #28]
 80033a2:	4a3b      	ldr	r2, [pc, #236]	@ (8003490 <HAL_RCC_OscConfig+0x4c4>)
 80033a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	69db      	ldr	r3, [r3, #28]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	f000 8087 	beq.w	80034c2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033b4:	4b36      	ldr	r3, [pc, #216]	@ (8003490 <HAL_RCC_OscConfig+0x4c4>)
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f003 030c 	and.w	r3, r3, #12
 80033bc:	2b08      	cmp	r3, #8
 80033be:	d061      	beq.n	8003484 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	69db      	ldr	r3, [r3, #28]
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d146      	bne.n	8003456 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033c8:	4b33      	ldr	r3, [pc, #204]	@ (8003498 <HAL_RCC_OscConfig+0x4cc>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ce:	f7fd faa9 	bl	8000924 <HAL_GetTick>
 80033d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033d4:	e008      	b.n	80033e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033d6:	f7fd faa5 	bl	8000924 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d901      	bls.n	80033e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e06d      	b.n	80034c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033e8:	4b29      	ldr	r3, [pc, #164]	@ (8003490 <HAL_RCC_OscConfig+0x4c4>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d1f0      	bne.n	80033d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a1b      	ldr	r3, [r3, #32]
 80033f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033fc:	d108      	bne.n	8003410 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80033fe:	4b24      	ldr	r3, [pc, #144]	@ (8003490 <HAL_RCC_OscConfig+0x4c4>)
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	4921      	ldr	r1, [pc, #132]	@ (8003490 <HAL_RCC_OscConfig+0x4c4>)
 800340c:	4313      	orrs	r3, r2
 800340e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003410:	4b1f      	ldr	r3, [pc, #124]	@ (8003490 <HAL_RCC_OscConfig+0x4c4>)
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a19      	ldr	r1, [r3, #32]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003420:	430b      	orrs	r3, r1
 8003422:	491b      	ldr	r1, [pc, #108]	@ (8003490 <HAL_RCC_OscConfig+0x4c4>)
 8003424:	4313      	orrs	r3, r2
 8003426:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003428:	4b1b      	ldr	r3, [pc, #108]	@ (8003498 <HAL_RCC_OscConfig+0x4cc>)
 800342a:	2201      	movs	r2, #1
 800342c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800342e:	f7fd fa79 	bl	8000924 <HAL_GetTick>
 8003432:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003434:	e008      	b.n	8003448 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003436:	f7fd fa75 	bl	8000924 <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	2b02      	cmp	r3, #2
 8003442:	d901      	bls.n	8003448 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e03d      	b.n	80034c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003448:	4b11      	ldr	r3, [pc, #68]	@ (8003490 <HAL_RCC_OscConfig+0x4c4>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d0f0      	beq.n	8003436 <HAL_RCC_OscConfig+0x46a>
 8003454:	e035      	b.n	80034c2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003456:	4b10      	ldr	r3, [pc, #64]	@ (8003498 <HAL_RCC_OscConfig+0x4cc>)
 8003458:	2200      	movs	r2, #0
 800345a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800345c:	f7fd fa62 	bl	8000924 <HAL_GetTick>
 8003460:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003462:	e008      	b.n	8003476 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003464:	f7fd fa5e 	bl	8000924 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b02      	cmp	r3, #2
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e026      	b.n	80034c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003476:	4b06      	ldr	r3, [pc, #24]	@ (8003490 <HAL_RCC_OscConfig+0x4c4>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1f0      	bne.n	8003464 <HAL_RCC_OscConfig+0x498>
 8003482:	e01e      	b.n	80034c2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	69db      	ldr	r3, [r3, #28]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d107      	bne.n	800349c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e019      	b.n	80034c4 <HAL_RCC_OscConfig+0x4f8>
 8003490:	40021000 	.word	0x40021000
 8003494:	40007000 	.word	0x40007000
 8003498:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800349c:	4b0b      	ldr	r3, [pc, #44]	@ (80034cc <HAL_RCC_OscConfig+0x500>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a1b      	ldr	r3, [r3, #32]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d106      	bne.n	80034be <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d001      	beq.n	80034c2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e000      	b.n	80034c4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3718      	adds	r7, #24
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	40021000 	.word	0x40021000

080034d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d101      	bne.n	80034e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e0d0      	b.n	8003686 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034e4:	4b6a      	ldr	r3, [pc, #424]	@ (8003690 <HAL_RCC_ClockConfig+0x1c0>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0307 	and.w	r3, r3, #7
 80034ec:	683a      	ldr	r2, [r7, #0]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d910      	bls.n	8003514 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034f2:	4b67      	ldr	r3, [pc, #412]	@ (8003690 <HAL_RCC_ClockConfig+0x1c0>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f023 0207 	bic.w	r2, r3, #7
 80034fa:	4965      	ldr	r1, [pc, #404]	@ (8003690 <HAL_RCC_ClockConfig+0x1c0>)
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	4313      	orrs	r3, r2
 8003500:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003502:	4b63      	ldr	r3, [pc, #396]	@ (8003690 <HAL_RCC_ClockConfig+0x1c0>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0307 	and.w	r3, r3, #7
 800350a:	683a      	ldr	r2, [r7, #0]
 800350c:	429a      	cmp	r2, r3
 800350e:	d001      	beq.n	8003514 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e0b8      	b.n	8003686 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0302 	and.w	r3, r3, #2
 800351c:	2b00      	cmp	r3, #0
 800351e:	d020      	beq.n	8003562 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0304 	and.w	r3, r3, #4
 8003528:	2b00      	cmp	r3, #0
 800352a:	d005      	beq.n	8003538 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800352c:	4b59      	ldr	r3, [pc, #356]	@ (8003694 <HAL_RCC_ClockConfig+0x1c4>)
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	4a58      	ldr	r2, [pc, #352]	@ (8003694 <HAL_RCC_ClockConfig+0x1c4>)
 8003532:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003536:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0308 	and.w	r3, r3, #8
 8003540:	2b00      	cmp	r3, #0
 8003542:	d005      	beq.n	8003550 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003544:	4b53      	ldr	r3, [pc, #332]	@ (8003694 <HAL_RCC_ClockConfig+0x1c4>)
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	4a52      	ldr	r2, [pc, #328]	@ (8003694 <HAL_RCC_ClockConfig+0x1c4>)
 800354a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800354e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003550:	4b50      	ldr	r3, [pc, #320]	@ (8003694 <HAL_RCC_ClockConfig+0x1c4>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	494d      	ldr	r1, [pc, #308]	@ (8003694 <HAL_RCC_ClockConfig+0x1c4>)
 800355e:	4313      	orrs	r3, r2
 8003560:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	2b00      	cmp	r3, #0
 800356c:	d040      	beq.n	80035f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	2b01      	cmp	r3, #1
 8003574:	d107      	bne.n	8003586 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003576:	4b47      	ldr	r3, [pc, #284]	@ (8003694 <HAL_RCC_ClockConfig+0x1c4>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d115      	bne.n	80035ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e07f      	b.n	8003686 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	2b02      	cmp	r3, #2
 800358c:	d107      	bne.n	800359e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800358e:	4b41      	ldr	r3, [pc, #260]	@ (8003694 <HAL_RCC_ClockConfig+0x1c4>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d109      	bne.n	80035ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e073      	b.n	8003686 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800359e:	4b3d      	ldr	r3, [pc, #244]	@ (8003694 <HAL_RCC_ClockConfig+0x1c4>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0302 	and.w	r3, r3, #2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d101      	bne.n	80035ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e06b      	b.n	8003686 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035ae:	4b39      	ldr	r3, [pc, #228]	@ (8003694 <HAL_RCC_ClockConfig+0x1c4>)
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f023 0203 	bic.w	r2, r3, #3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	4936      	ldr	r1, [pc, #216]	@ (8003694 <HAL_RCC_ClockConfig+0x1c4>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035c0:	f7fd f9b0 	bl	8000924 <HAL_GetTick>
 80035c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035c6:	e00a      	b.n	80035de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035c8:	f7fd f9ac 	bl	8000924 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d901      	bls.n	80035de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e053      	b.n	8003686 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035de:	4b2d      	ldr	r3, [pc, #180]	@ (8003694 <HAL_RCC_ClockConfig+0x1c4>)
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f003 020c 	and.w	r2, r3, #12
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d1eb      	bne.n	80035c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035f0:	4b27      	ldr	r3, [pc, #156]	@ (8003690 <HAL_RCC_ClockConfig+0x1c0>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0307 	and.w	r3, r3, #7
 80035f8:	683a      	ldr	r2, [r7, #0]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d210      	bcs.n	8003620 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035fe:	4b24      	ldr	r3, [pc, #144]	@ (8003690 <HAL_RCC_ClockConfig+0x1c0>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f023 0207 	bic.w	r2, r3, #7
 8003606:	4922      	ldr	r1, [pc, #136]	@ (8003690 <HAL_RCC_ClockConfig+0x1c0>)
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	4313      	orrs	r3, r2
 800360c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800360e:	4b20      	ldr	r3, [pc, #128]	@ (8003690 <HAL_RCC_ClockConfig+0x1c0>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0307 	and.w	r3, r3, #7
 8003616:	683a      	ldr	r2, [r7, #0]
 8003618:	429a      	cmp	r2, r3
 800361a:	d001      	beq.n	8003620 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e032      	b.n	8003686 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0304 	and.w	r3, r3, #4
 8003628:	2b00      	cmp	r3, #0
 800362a:	d008      	beq.n	800363e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800362c:	4b19      	ldr	r3, [pc, #100]	@ (8003694 <HAL_RCC_ClockConfig+0x1c4>)
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	4916      	ldr	r1, [pc, #88]	@ (8003694 <HAL_RCC_ClockConfig+0x1c4>)
 800363a:	4313      	orrs	r3, r2
 800363c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0308 	and.w	r3, r3, #8
 8003646:	2b00      	cmp	r3, #0
 8003648:	d009      	beq.n	800365e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800364a:	4b12      	ldr	r3, [pc, #72]	@ (8003694 <HAL_RCC_ClockConfig+0x1c4>)
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	00db      	lsls	r3, r3, #3
 8003658:	490e      	ldr	r1, [pc, #56]	@ (8003694 <HAL_RCC_ClockConfig+0x1c4>)
 800365a:	4313      	orrs	r3, r2
 800365c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800365e:	f000 f821 	bl	80036a4 <HAL_RCC_GetSysClockFreq>
 8003662:	4602      	mov	r2, r0
 8003664:	4b0b      	ldr	r3, [pc, #44]	@ (8003694 <HAL_RCC_ClockConfig+0x1c4>)
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	091b      	lsrs	r3, r3, #4
 800366a:	f003 030f 	and.w	r3, r3, #15
 800366e:	490a      	ldr	r1, [pc, #40]	@ (8003698 <HAL_RCC_ClockConfig+0x1c8>)
 8003670:	5ccb      	ldrb	r3, [r1, r3]
 8003672:	fa22 f303 	lsr.w	r3, r2, r3
 8003676:	4a09      	ldr	r2, [pc, #36]	@ (800369c <HAL_RCC_ClockConfig+0x1cc>)
 8003678:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800367a:	4b09      	ldr	r3, [pc, #36]	@ (80036a0 <HAL_RCC_ClockConfig+0x1d0>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4618      	mov	r0, r3
 8003680:	f7fd f90e 	bl	80008a0 <HAL_InitTick>

  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3710      	adds	r7, #16
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	40022000 	.word	0x40022000
 8003694:	40021000 	.word	0x40021000
 8003698:	08008414 	.word	0x08008414
 800369c:	20000000 	.word	0x20000000
 80036a0:	20000004 	.word	0x20000004

080036a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b087      	sub	sp, #28
 80036a8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80036aa:	2300      	movs	r3, #0
 80036ac:	60fb      	str	r3, [r7, #12]
 80036ae:	2300      	movs	r3, #0
 80036b0:	60bb      	str	r3, [r7, #8]
 80036b2:	2300      	movs	r3, #0
 80036b4:	617b      	str	r3, [r7, #20]
 80036b6:	2300      	movs	r3, #0
 80036b8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80036ba:	2300      	movs	r3, #0
 80036bc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80036be:	4b1e      	ldr	r3, [pc, #120]	@ (8003738 <HAL_RCC_GetSysClockFreq+0x94>)
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f003 030c 	and.w	r3, r3, #12
 80036ca:	2b04      	cmp	r3, #4
 80036cc:	d002      	beq.n	80036d4 <HAL_RCC_GetSysClockFreq+0x30>
 80036ce:	2b08      	cmp	r3, #8
 80036d0:	d003      	beq.n	80036da <HAL_RCC_GetSysClockFreq+0x36>
 80036d2:	e027      	b.n	8003724 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80036d4:	4b19      	ldr	r3, [pc, #100]	@ (800373c <HAL_RCC_GetSysClockFreq+0x98>)
 80036d6:	613b      	str	r3, [r7, #16]
      break;
 80036d8:	e027      	b.n	800372a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	0c9b      	lsrs	r3, r3, #18
 80036de:	f003 030f 	and.w	r3, r3, #15
 80036e2:	4a17      	ldr	r2, [pc, #92]	@ (8003740 <HAL_RCC_GetSysClockFreq+0x9c>)
 80036e4:	5cd3      	ldrb	r3, [r2, r3]
 80036e6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d010      	beq.n	8003714 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80036f2:	4b11      	ldr	r3, [pc, #68]	@ (8003738 <HAL_RCC_GetSysClockFreq+0x94>)
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	0c5b      	lsrs	r3, r3, #17
 80036f8:	f003 0301 	and.w	r3, r3, #1
 80036fc:	4a11      	ldr	r2, [pc, #68]	@ (8003744 <HAL_RCC_GetSysClockFreq+0xa0>)
 80036fe:	5cd3      	ldrb	r3, [r2, r3]
 8003700:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a0d      	ldr	r2, [pc, #52]	@ (800373c <HAL_RCC_GetSysClockFreq+0x98>)
 8003706:	fb03 f202 	mul.w	r2, r3, r2
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003710:	617b      	str	r3, [r7, #20]
 8003712:	e004      	b.n	800371e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	4a0c      	ldr	r2, [pc, #48]	@ (8003748 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003718:	fb02 f303 	mul.w	r3, r2, r3
 800371c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	613b      	str	r3, [r7, #16]
      break;
 8003722:	e002      	b.n	800372a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003724:	4b05      	ldr	r3, [pc, #20]	@ (800373c <HAL_RCC_GetSysClockFreq+0x98>)
 8003726:	613b      	str	r3, [r7, #16]
      break;
 8003728:	bf00      	nop
    }
  }
  return sysclockfreq;
 800372a:	693b      	ldr	r3, [r7, #16]
}
 800372c:	4618      	mov	r0, r3
 800372e:	371c      	adds	r7, #28
 8003730:	46bd      	mov	sp, r7
 8003732:	bc80      	pop	{r7}
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop
 8003738:	40021000 	.word	0x40021000
 800373c:	007a1200 	.word	0x007a1200
 8003740:	0800842c 	.word	0x0800842c
 8003744:	0800843c 	.word	0x0800843c
 8003748:	003d0900 	.word	0x003d0900

0800374c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800374c:	b480      	push	{r7}
 800374e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003750:	4b02      	ldr	r3, [pc, #8]	@ (800375c <HAL_RCC_GetHCLKFreq+0x10>)
 8003752:	681b      	ldr	r3, [r3, #0]
}
 8003754:	4618      	mov	r0, r3
 8003756:	46bd      	mov	sp, r7
 8003758:	bc80      	pop	{r7}
 800375a:	4770      	bx	lr
 800375c:	20000000 	.word	0x20000000

08003760 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003764:	f7ff fff2 	bl	800374c <HAL_RCC_GetHCLKFreq>
 8003768:	4602      	mov	r2, r0
 800376a:	4b05      	ldr	r3, [pc, #20]	@ (8003780 <HAL_RCC_GetPCLK1Freq+0x20>)
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	0a1b      	lsrs	r3, r3, #8
 8003770:	f003 0307 	and.w	r3, r3, #7
 8003774:	4903      	ldr	r1, [pc, #12]	@ (8003784 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003776:	5ccb      	ldrb	r3, [r1, r3]
 8003778:	fa22 f303 	lsr.w	r3, r2, r3
}
 800377c:	4618      	mov	r0, r3
 800377e:	bd80      	pop	{r7, pc}
 8003780:	40021000 	.word	0x40021000
 8003784:	08008424 	.word	0x08008424

08003788 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003788:	b480      	push	{r7}
 800378a:	b085      	sub	sp, #20
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003790:	4b0a      	ldr	r3, [pc, #40]	@ (80037bc <RCC_Delay+0x34>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a0a      	ldr	r2, [pc, #40]	@ (80037c0 <RCC_Delay+0x38>)
 8003796:	fba2 2303 	umull	r2, r3, r2, r3
 800379a:	0a5b      	lsrs	r3, r3, #9
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	fb02 f303 	mul.w	r3, r2, r3
 80037a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80037a4:	bf00      	nop
  }
  while (Delay --);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	1e5a      	subs	r2, r3, #1
 80037aa:	60fa      	str	r2, [r7, #12]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d1f9      	bne.n	80037a4 <RCC_Delay+0x1c>
}
 80037b0:	bf00      	nop
 80037b2:	bf00      	nop
 80037b4:	3714      	adds	r7, #20
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bc80      	pop	{r7}
 80037ba:	4770      	bx	lr
 80037bc:	20000000 	.word	0x20000000
 80037c0:	10624dd3 	.word	0x10624dd3

080037c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b086      	sub	sp, #24
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80037cc:	2300      	movs	r3, #0
 80037ce:	613b      	str	r3, [r7, #16]
 80037d0:	2300      	movs	r3, #0
 80037d2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0301 	and.w	r3, r3, #1
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d07d      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80037e0:	2300      	movs	r3, #0
 80037e2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037e4:	4b4f      	ldr	r3, [pc, #316]	@ (8003924 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037e6:	69db      	ldr	r3, [r3, #28]
 80037e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d10d      	bne.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037f0:	4b4c      	ldr	r3, [pc, #304]	@ (8003924 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037f2:	69db      	ldr	r3, [r3, #28]
 80037f4:	4a4b      	ldr	r2, [pc, #300]	@ (8003924 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037fa:	61d3      	str	r3, [r2, #28]
 80037fc:	4b49      	ldr	r3, [pc, #292]	@ (8003924 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037fe:	69db      	ldr	r3, [r3, #28]
 8003800:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003804:	60bb      	str	r3, [r7, #8]
 8003806:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003808:	2301      	movs	r3, #1
 800380a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800380c:	4b46      	ldr	r3, [pc, #280]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003814:	2b00      	cmp	r3, #0
 8003816:	d118      	bne.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003818:	4b43      	ldr	r3, [pc, #268]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a42      	ldr	r2, [pc, #264]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800381e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003822:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003824:	f7fd f87e 	bl	8000924 <HAL_GetTick>
 8003828:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800382a:	e008      	b.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800382c:	f7fd f87a 	bl	8000924 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	2b64      	cmp	r3, #100	@ 0x64
 8003838:	d901      	bls.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e06d      	b.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800383e:	4b3a      	ldr	r3, [pc, #232]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003846:	2b00      	cmp	r3, #0
 8003848:	d0f0      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800384a:	4b36      	ldr	r3, [pc, #216]	@ (8003924 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003852:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d02e      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003862:	68fa      	ldr	r2, [r7, #12]
 8003864:	429a      	cmp	r2, r3
 8003866:	d027      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003868:	4b2e      	ldr	r3, [pc, #184]	@ (8003924 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800386a:	6a1b      	ldr	r3, [r3, #32]
 800386c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003870:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003872:	4b2e      	ldr	r3, [pc, #184]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003874:	2201      	movs	r2, #1
 8003876:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003878:	4b2c      	ldr	r3, [pc, #176]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800387a:	2200      	movs	r2, #0
 800387c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800387e:	4a29      	ldr	r2, [pc, #164]	@ (8003924 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	2b00      	cmp	r3, #0
 800388c:	d014      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800388e:	f7fd f849 	bl	8000924 <HAL_GetTick>
 8003892:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003894:	e00a      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003896:	f7fd f845 	bl	8000924 <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d901      	bls.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	e036      	b.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ac:	4b1d      	ldr	r3, [pc, #116]	@ (8003924 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ae:	6a1b      	ldr	r3, [r3, #32]
 80038b0:	f003 0302 	and.w	r3, r3, #2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d0ee      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038b8:	4b1a      	ldr	r3, [pc, #104]	@ (8003924 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ba:	6a1b      	ldr	r3, [r3, #32]
 80038bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	4917      	ldr	r1, [pc, #92]	@ (8003924 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80038ca:	7dfb      	ldrb	r3, [r7, #23]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d105      	bne.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038d0:	4b14      	ldr	r3, [pc, #80]	@ (8003924 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038d2:	69db      	ldr	r3, [r3, #28]
 80038d4:	4a13      	ldr	r2, [pc, #76]	@ (8003924 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038da:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0302 	and.w	r3, r3, #2
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d008      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038e8:	4b0e      	ldr	r3, [pc, #56]	@ (8003924 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	490b      	ldr	r1, [pc, #44]	@ (8003924 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0310 	and.w	r3, r3, #16
 8003902:	2b00      	cmp	r3, #0
 8003904:	d008      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003906:	4b07      	ldr	r3, [pc, #28]	@ (8003924 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	4904      	ldr	r1, [pc, #16]	@ (8003924 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003914:	4313      	orrs	r3, r2
 8003916:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3718      	adds	r7, #24
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	40021000 	.word	0x40021000
 8003928:	40007000 	.word	0x40007000
 800392c:	42420440 	.word	0x42420440

08003930 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d101      	bne.n	8003942 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e041      	b.n	80039c6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d106      	bne.n	800395c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f7fc ff14 	bl	8000784 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2202      	movs	r2, #2
 8003960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	3304      	adds	r3, #4
 800396c:	4619      	mov	r1, r3
 800396e:	4610      	mov	r0, r2
 8003970:	f000 f8f0 	bl	8003b54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
	...

080039d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b086      	sub	sp, #24
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039dc:	2300      	movs	r3, #0
 80039de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d101      	bne.n	80039ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80039ea:	2302      	movs	r3, #2
 80039ec:	e0ae      	b.n	8003b4c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2201      	movs	r2, #1
 80039f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2b0c      	cmp	r3, #12
 80039fa:	f200 809f 	bhi.w	8003b3c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80039fe:	a201      	add	r2, pc, #4	@ (adr r2, 8003a04 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a04:	08003a39 	.word	0x08003a39
 8003a08:	08003b3d 	.word	0x08003b3d
 8003a0c:	08003b3d 	.word	0x08003b3d
 8003a10:	08003b3d 	.word	0x08003b3d
 8003a14:	08003a79 	.word	0x08003a79
 8003a18:	08003b3d 	.word	0x08003b3d
 8003a1c:	08003b3d 	.word	0x08003b3d
 8003a20:	08003b3d 	.word	0x08003b3d
 8003a24:	08003abb 	.word	0x08003abb
 8003a28:	08003b3d 	.word	0x08003b3d
 8003a2c:	08003b3d 	.word	0x08003b3d
 8003a30:	08003b3d 	.word	0x08003b3d
 8003a34:	08003afb 	.word	0x08003afb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	68b9      	ldr	r1, [r7, #8]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f000 f8f6 	bl	8003c30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	699a      	ldr	r2, [r3, #24]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f042 0208 	orr.w	r2, r2, #8
 8003a52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	699a      	ldr	r2, [r3, #24]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f022 0204 	bic.w	r2, r2, #4
 8003a62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	6999      	ldr	r1, [r3, #24]
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	691a      	ldr	r2, [r3, #16]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	430a      	orrs	r2, r1
 8003a74:	619a      	str	r2, [r3, #24]
      break;
 8003a76:	e064      	b.n	8003b42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68b9      	ldr	r1, [r7, #8]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f000 f93c 	bl	8003cfc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	699a      	ldr	r2, [r3, #24]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	699a      	ldr	r2, [r3, #24]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003aa2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	6999      	ldr	r1, [r3, #24]
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	021a      	lsls	r2, r3, #8
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	619a      	str	r2, [r3, #24]
      break;
 8003ab8:	e043      	b.n	8003b42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68b9      	ldr	r1, [r7, #8]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f000 f985 	bl	8003dd0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	69da      	ldr	r2, [r3, #28]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f042 0208 	orr.w	r2, r2, #8
 8003ad4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	69da      	ldr	r2, [r3, #28]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f022 0204 	bic.w	r2, r2, #4
 8003ae4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	69d9      	ldr	r1, [r3, #28]
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	691a      	ldr	r2, [r3, #16]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	430a      	orrs	r2, r1
 8003af6:	61da      	str	r2, [r3, #28]
      break;
 8003af8:	e023      	b.n	8003b42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68b9      	ldr	r1, [r7, #8]
 8003b00:	4618      	mov	r0, r3
 8003b02:	f000 f9cf 	bl	8003ea4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	69da      	ldr	r2, [r3, #28]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	69da      	ldr	r2, [r3, #28]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	69d9      	ldr	r1, [r3, #28]
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	021a      	lsls	r2, r3, #8
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	430a      	orrs	r2, r1
 8003b38:	61da      	str	r2, [r3, #28]
      break;
 8003b3a:	e002      	b.n	8003b42 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	75fb      	strb	r3, [r7, #23]
      break;
 8003b40:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003b4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3718      	adds	r7, #24
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b085      	sub	sp, #20
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a2f      	ldr	r2, [pc, #188]	@ (8003c24 <TIM_Base_SetConfig+0xd0>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d00b      	beq.n	8003b84 <TIM_Base_SetConfig+0x30>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b72:	d007      	beq.n	8003b84 <TIM_Base_SetConfig+0x30>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a2c      	ldr	r2, [pc, #176]	@ (8003c28 <TIM_Base_SetConfig+0xd4>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d003      	beq.n	8003b84 <TIM_Base_SetConfig+0x30>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a2b      	ldr	r2, [pc, #172]	@ (8003c2c <TIM_Base_SetConfig+0xd8>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d108      	bne.n	8003b96 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	68fa      	ldr	r2, [r7, #12]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a22      	ldr	r2, [pc, #136]	@ (8003c24 <TIM_Base_SetConfig+0xd0>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d00b      	beq.n	8003bb6 <TIM_Base_SetConfig+0x62>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ba4:	d007      	beq.n	8003bb6 <TIM_Base_SetConfig+0x62>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a1f      	ldr	r2, [pc, #124]	@ (8003c28 <TIM_Base_SetConfig+0xd4>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d003      	beq.n	8003bb6 <TIM_Base_SetConfig+0x62>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a1e      	ldr	r2, [pc, #120]	@ (8003c2c <TIM_Base_SetConfig+0xd8>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d108      	bne.n	8003bc8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	68fa      	ldr	r2, [r7, #12]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	689a      	ldr	r2, [r3, #8]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4a0d      	ldr	r2, [pc, #52]	@ (8003c24 <TIM_Base_SetConfig+0xd0>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d103      	bne.n	8003bfc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	691a      	ldr	r2, [r3, #16]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d005      	beq.n	8003c1a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	f023 0201 	bic.w	r2, r3, #1
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	611a      	str	r2, [r3, #16]
  }
}
 8003c1a:	bf00      	nop
 8003c1c:	3714      	adds	r7, #20
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bc80      	pop	{r7}
 8003c22:	4770      	bx	lr
 8003c24:	40012c00 	.word	0x40012c00
 8003c28:	40000400 	.word	0x40000400
 8003c2c:	40000800 	.word	0x40000800

08003c30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b087      	sub	sp, #28
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a1b      	ldr	r3, [r3, #32]
 8003c3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a1b      	ldr	r3, [r3, #32]
 8003c44:	f023 0201 	bic.w	r2, r3, #1
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	699b      	ldr	r3, [r3, #24]
 8003c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f023 0303 	bic.w	r3, r3, #3
 8003c66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	f023 0302 	bic.w	r3, r3, #2
 8003c78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4a1c      	ldr	r2, [pc, #112]	@ (8003cf8 <TIM_OC1_SetConfig+0xc8>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d10c      	bne.n	8003ca6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	f023 0308 	bic.w	r3, r3, #8
 8003c92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	697a      	ldr	r2, [r7, #20]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	f023 0304 	bic.w	r3, r3, #4
 8003ca4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a13      	ldr	r2, [pc, #76]	@ (8003cf8 <TIM_OC1_SetConfig+0xc8>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d111      	bne.n	8003cd2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003cb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003cbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	695b      	ldr	r3, [r3, #20]
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	699b      	ldr	r3, [r3, #24]
 8003ccc:	693a      	ldr	r2, [r7, #16]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	693a      	ldr	r2, [r7, #16]
 8003cd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	685a      	ldr	r2, [r3, #4]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	697a      	ldr	r2, [r7, #20]
 8003cea:	621a      	str	r2, [r3, #32]
}
 8003cec:	bf00      	nop
 8003cee:	371c      	adds	r7, #28
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bc80      	pop	{r7}
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop
 8003cf8:	40012c00 	.word	0x40012c00

08003cfc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b087      	sub	sp, #28
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a1b      	ldr	r3, [r3, #32]
 8003d0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a1b      	ldr	r3, [r3, #32]
 8003d10:	f023 0210 	bic.w	r2, r3, #16
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	021b      	lsls	r3, r3, #8
 8003d3a:	68fa      	ldr	r2, [r7, #12]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	f023 0320 	bic.w	r3, r3, #32
 8003d46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	011b      	lsls	r3, r3, #4
 8003d4e:	697a      	ldr	r2, [r7, #20]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a1d      	ldr	r2, [pc, #116]	@ (8003dcc <TIM_OC2_SetConfig+0xd0>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d10d      	bne.n	8003d78 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	011b      	lsls	r3, r3, #4
 8003d6a:	697a      	ldr	r2, [r7, #20]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d76:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a14      	ldr	r2, [pc, #80]	@ (8003dcc <TIM_OC2_SetConfig+0xd0>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d113      	bne.n	8003da8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003d86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003d8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	695b      	ldr	r3, [r3, #20]
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	699b      	ldr	r3, [r3, #24]
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	693a      	ldr	r2, [r7, #16]
 8003dac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	685a      	ldr	r2, [r3, #4]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	697a      	ldr	r2, [r7, #20]
 8003dc0:	621a      	str	r2, [r3, #32]
}
 8003dc2:	bf00      	nop
 8003dc4:	371c      	adds	r7, #28
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bc80      	pop	{r7}
 8003dca:	4770      	bx	lr
 8003dcc:	40012c00 	.word	0x40012c00

08003dd0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b087      	sub	sp, #28
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a1b      	ldr	r3, [r3, #32]
 8003dde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6a1b      	ldr	r3, [r3, #32]
 8003de4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	69db      	ldr	r3, [r3, #28]
 8003df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f023 0303 	bic.w	r3, r3, #3
 8003e06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003e18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	021b      	lsls	r3, r3, #8
 8003e20:	697a      	ldr	r2, [r7, #20]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a1d      	ldr	r2, [pc, #116]	@ (8003ea0 <TIM_OC3_SetConfig+0xd0>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d10d      	bne.n	8003e4a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003e34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	021b      	lsls	r3, r3, #8
 8003e3c:	697a      	ldr	r2, [r7, #20]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003e48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a14      	ldr	r2, [pc, #80]	@ (8003ea0 <TIM_OC3_SetConfig+0xd0>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d113      	bne.n	8003e7a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003e58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	695b      	ldr	r3, [r3, #20]
 8003e66:	011b      	lsls	r3, r3, #4
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	011b      	lsls	r3, r3, #4
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	685a      	ldr	r2, [r3, #4]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	697a      	ldr	r2, [r7, #20]
 8003e92:	621a      	str	r2, [r3, #32]
}
 8003e94:	bf00      	nop
 8003e96:	371c      	adds	r7, #28
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bc80      	pop	{r7}
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop
 8003ea0:	40012c00 	.word	0x40012c00

08003ea4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b087      	sub	sp, #28
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
 8003eb2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a1b      	ldr	r3, [r3, #32]
 8003eb8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	69db      	ldr	r3, [r3, #28]
 8003eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ed2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003eda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	021b      	lsls	r3, r3, #8
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003eee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	031b      	lsls	r3, r3, #12
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a0f      	ldr	r2, [pc, #60]	@ (8003f3c <TIM_OC4_SetConfig+0x98>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d109      	bne.n	8003f18 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003f0a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	695b      	ldr	r3, [r3, #20]
 8003f10:	019b      	lsls	r3, r3, #6
 8003f12:	697a      	ldr	r2, [r7, #20]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	697a      	ldr	r2, [r7, #20]
 8003f1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	685a      	ldr	r2, [r3, #4]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	693a      	ldr	r2, [r7, #16]
 8003f30:	621a      	str	r2, [r3, #32]
}
 8003f32:	bf00      	nop
 8003f34:	371c      	adds	r7, #28
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bc80      	pop	{r7}
 8003f3a:	4770      	bx	lr
 8003f3c:	40012c00 	.word	0x40012c00

08003f40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b085      	sub	sp, #20
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d101      	bne.n	8003f58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f54:	2302      	movs	r3, #2
 8003f56:	e046      	b.n	8003fe6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2202      	movs	r2, #2
 8003f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68fa      	ldr	r2, [r7, #12]
 8003f90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a16      	ldr	r2, [pc, #88]	@ (8003ff0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d00e      	beq.n	8003fba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fa4:	d009      	beq.n	8003fba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a12      	ldr	r2, [pc, #72]	@ (8003ff4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d004      	beq.n	8003fba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a10      	ldr	r2, [pc, #64]	@ (8003ff8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d10c      	bne.n	8003fd4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003fc0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	68ba      	ldr	r2, [r7, #8]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68ba      	ldr	r2, [r7, #8]
 8003fd2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3714      	adds	r7, #20
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bc80      	pop	{r7}
 8003fee:	4770      	bx	lr
 8003ff0:	40012c00 	.word	0x40012c00
 8003ff4:	40000400 	.word	0x40000400
 8003ff8:	40000800 	.word	0x40000800

08003ffc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004006:	2300      	movs	r3, #0
 8004008:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004010:	2b01      	cmp	r3, #1
 8004012:	d101      	bne.n	8004018 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004014:	2302      	movs	r3, #2
 8004016:	e03d      	b.n	8004094 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	4313      	orrs	r3, r2
 800402c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	4313      	orrs	r3, r2
 800403a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	4313      	orrs	r3, r2
 8004048:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4313      	orrs	r3, r2
 8004056:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	4313      	orrs	r3, r2
 8004064:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	695b      	ldr	r3, [r3, #20]
 8004070:	4313      	orrs	r3, r2
 8004072:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	69db      	ldr	r3, [r3, #28]
 800407e:	4313      	orrs	r3, r2
 8004080:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	3714      	adds	r7, #20
 8004098:	46bd      	mov	sp, r7
 800409a:	bc80      	pop	{r7}
 800409c:	4770      	bx	lr

0800409e <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800409e:	b480      	push	{r7}
 80040a0:	b085      	sub	sp, #20
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	60f8      	str	r0, [r7, #12]
 80040a6:	4638      	mov	r0, r7
 80040a8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3714      	adds	r7, #20
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bc80      	pop	{r7}
 80040b6:	4770      	bx	lr

080040b8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b085      	sub	sp, #20
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80040c8:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80040cc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	b29a      	uxth	r2, r3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3714      	adds	r7, #20
 80040de:	46bd      	mov	sp, r7
 80040e0:	bc80      	pop	{r7}
 80040e2:	4770      	bx	lr

080040e4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b085      	sub	sp, #20
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80040ec:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80040f0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80040f8:	b29a      	uxth	r2, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	43db      	mvns	r3, r3
 8004100:	b29b      	uxth	r3, r3
 8004102:	4013      	ands	r3, r2
 8004104:	b29a      	uxth	r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3714      	adds	r7, #20
 8004112:	46bd      	mov	sp, r7
 8004114:	bc80      	pop	{r7}
 8004116:	4770      	bx	lr

08004118 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	460b      	mov	r3, r1
 8004122:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	370c      	adds	r7, #12
 800412a:	46bd      	mov	sp, r7
 800412c:	bc80      	pop	{r7}
 800412e:	4770      	bx	lr

08004130 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004130:	b480      	push	{r7}
 8004132:	b085      	sub	sp, #20
 8004134:	af00      	add	r7, sp, #0
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	4638      	mov	r0, r7
 800413a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2201      	movs	r2, #1
 8004142:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2200      	movs	r2, #0
 800414a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2200      	movs	r2, #0
 8004152:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2200      	movs	r2, #0
 800415a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800415e:	2300      	movs	r3, #0
}
 8004160:	4618      	mov	r0, r3
 8004162:	3714      	adds	r7, #20
 8004164:	46bd      	mov	sp, r7
 8004166:	bc80      	pop	{r7}
 8004168:	4770      	bx	lr
	...

0800416c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800416c:	b480      	push	{r7}
 800416e:	b09d      	sub	sp, #116	@ 0x74
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004176:	2300      	movs	r3, #0
 8004178:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	4413      	add	r3, r2
 8004186:	881b      	ldrh	r3, [r3, #0]
 8004188:	b29b      	uxth	r3, r3
 800418a:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800418e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004192:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	78db      	ldrb	r3, [r3, #3]
 800419a:	2b03      	cmp	r3, #3
 800419c:	d81f      	bhi.n	80041de <USB_ActivateEndpoint+0x72>
 800419e:	a201      	add	r2, pc, #4	@ (adr r2, 80041a4 <USB_ActivateEndpoint+0x38>)
 80041a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a4:	080041b5 	.word	0x080041b5
 80041a8:	080041d1 	.word	0x080041d1
 80041ac:	080041e7 	.word	0x080041e7
 80041b0:	080041c3 	.word	0x080041c3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80041b4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80041b8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80041bc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80041c0:	e012      	b.n	80041e8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80041c2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80041c6:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80041ca:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80041ce:	e00b      	b.n	80041e8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80041d0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80041d4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80041d8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80041dc:	e004      	b.n	80041e8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80041e4:	e000      	b.n	80041e8 <USB_ActivateEndpoint+0x7c>
      break;
 80041e6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	441a      	add	r2, r3
 80041f2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80041f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80041fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80041fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004202:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004206:	b29b      	uxth	r3, r3
 8004208:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	4413      	add	r3, r2
 8004214:	881b      	ldrh	r3, [r3, #0]
 8004216:	b29b      	uxth	r3, r3
 8004218:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800421c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004220:	b29b      	uxth	r3, r3
 8004222:	683a      	ldr	r2, [r7, #0]
 8004224:	7812      	ldrb	r2, [r2, #0]
 8004226:	4313      	orrs	r3, r2
 8004228:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	441a      	add	r2, r3
 8004236:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800423a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800423e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004242:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004246:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800424a:	b29b      	uxth	r3, r3
 800424c:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	7b1b      	ldrb	r3, [r3, #12]
 8004252:	2b00      	cmp	r3, #0
 8004254:	f040 8178 	bne.w	8004548 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	785b      	ldrb	r3, [r3, #1]
 800425c:	2b00      	cmp	r3, #0
 800425e:	f000 8084 	beq.w	800436a <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	61bb      	str	r3, [r7, #24]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800426c:	b29b      	uxth	r3, r3
 800426e:	461a      	mov	r2, r3
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	4413      	add	r3, r2
 8004274:	61bb      	str	r3, [r7, #24]
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	011a      	lsls	r2, r3, #4
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	4413      	add	r3, r2
 8004280:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004284:	617b      	str	r3, [r7, #20]
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	88db      	ldrh	r3, [r3, #6]
 800428a:	085b      	lsrs	r3, r3, #1
 800428c:	b29b      	uxth	r3, r3
 800428e:	005b      	lsls	r3, r3, #1
 8004290:	b29a      	uxth	r2, r3
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	4413      	add	r3, r2
 80042a0:	881b      	ldrh	r3, [r3, #0]
 80042a2:	827b      	strh	r3, [r7, #18]
 80042a4:	8a7b      	ldrh	r3, [r7, #18]
 80042a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d01b      	beq.n	80042e6 <USB_ActivateEndpoint+0x17a>
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	4413      	add	r3, r2
 80042b8:	881b      	ldrh	r3, [r3, #0]
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042c4:	823b      	strh	r3, [r7, #16]
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	441a      	add	r2, r3
 80042d0:	8a3b      	ldrh	r3, [r7, #16]
 80042d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80042d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80042da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80042de:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	78db      	ldrb	r3, [r3, #3]
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d020      	beq.n	8004330 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	4413      	add	r3, r2
 80042f8:	881b      	ldrh	r3, [r3, #0]
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004300:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004304:	81bb      	strh	r3, [r7, #12]
 8004306:	89bb      	ldrh	r3, [r7, #12]
 8004308:	f083 0320 	eor.w	r3, r3, #32
 800430c:	81bb      	strh	r3, [r7, #12]
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	441a      	add	r2, r3
 8004318:	89bb      	ldrh	r3, [r7, #12]
 800431a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800431e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004322:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004326:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800432a:	b29b      	uxth	r3, r3
 800432c:	8013      	strh	r3, [r2, #0]
 800432e:	e2d5      	b.n	80048dc <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	4413      	add	r3, r2
 800433a:	881b      	ldrh	r3, [r3, #0]
 800433c:	b29b      	uxth	r3, r3
 800433e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004342:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004346:	81fb      	strh	r3, [r7, #14]
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	441a      	add	r2, r3
 8004352:	89fb      	ldrh	r3, [r7, #14]
 8004354:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004358:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800435c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004360:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004364:	b29b      	uxth	r3, r3
 8004366:	8013      	strh	r3, [r2, #0]
 8004368:	e2b8      	b.n	80048dc <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	633b      	str	r3, [r7, #48]	@ 0x30
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004374:	b29b      	uxth	r3, r3
 8004376:	461a      	mov	r2, r3
 8004378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800437a:	4413      	add	r3, r2
 800437c:	633b      	str	r3, [r7, #48]	@ 0x30
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	011a      	lsls	r2, r3, #4
 8004384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004386:	4413      	add	r3, r2
 8004388:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800438c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	88db      	ldrh	r3, [r3, #6]
 8004392:	085b      	lsrs	r3, r3, #1
 8004394:	b29b      	uxth	r3, r3
 8004396:	005b      	lsls	r3, r3, #1
 8004398:	b29a      	uxth	r2, r3
 800439a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800439c:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	461a      	mov	r2, r3
 80043ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ae:	4413      	add	r3, r2
 80043b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	011a      	lsls	r2, r3, #4
 80043b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ba:	4413      	add	r3, r2
 80043bc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80043c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80043c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c4:	881b      	ldrh	r3, [r3, #0]
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043cc:	b29a      	uxth	r2, r3
 80043ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d0:	801a      	strh	r2, [r3, #0]
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	2b3e      	cmp	r3, #62	@ 0x3e
 80043d8:	d91d      	bls.n	8004416 <USB_ActivateEndpoint+0x2aa>
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	095b      	lsrs	r3, r3, #5
 80043e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	f003 031f 	and.w	r3, r3, #31
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d102      	bne.n	80043f4 <USB_ActivateEndpoint+0x288>
 80043ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80043f0:	3b01      	subs	r3, #1
 80043f2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80043f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f6:	881b      	ldrh	r3, [r3, #0]
 80043f8:	b29a      	uxth	r2, r3
 80043fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	029b      	lsls	r3, r3, #10
 8004400:	b29b      	uxth	r3, r3
 8004402:	4313      	orrs	r3, r2
 8004404:	b29b      	uxth	r3, r3
 8004406:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800440a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800440e:	b29a      	uxth	r2, r3
 8004410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004412:	801a      	strh	r2, [r3, #0]
 8004414:	e026      	b.n	8004464 <USB_ActivateEndpoint+0x2f8>
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d10a      	bne.n	8004434 <USB_ActivateEndpoint+0x2c8>
 800441e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004420:	881b      	ldrh	r3, [r3, #0]
 8004422:	b29b      	uxth	r3, r3
 8004424:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004428:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800442c:	b29a      	uxth	r2, r3
 800442e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004430:	801a      	strh	r2, [r3, #0]
 8004432:	e017      	b.n	8004464 <USB_ActivateEndpoint+0x2f8>
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	691b      	ldr	r3, [r3, #16]
 8004438:	085b      	lsrs	r3, r3, #1
 800443a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	f003 0301 	and.w	r3, r3, #1
 8004444:	2b00      	cmp	r3, #0
 8004446:	d002      	beq.n	800444e <USB_ActivateEndpoint+0x2e2>
 8004448:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800444a:	3301      	adds	r3, #1
 800444c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800444e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004450:	881b      	ldrh	r3, [r3, #0]
 8004452:	b29a      	uxth	r2, r3
 8004454:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004456:	b29b      	uxth	r3, r3
 8004458:	029b      	lsls	r3, r3, #10
 800445a:	b29b      	uxth	r3, r3
 800445c:	4313      	orrs	r3, r2
 800445e:	b29a      	uxth	r2, r3
 8004460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004462:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	4413      	add	r3, r2
 800446e:	881b      	ldrh	r3, [r3, #0]
 8004470:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004472:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004474:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d01b      	beq.n	80044b4 <USB_ActivateEndpoint+0x348>
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	4413      	add	r3, r2
 8004486:	881b      	ldrh	r3, [r3, #0]
 8004488:	b29b      	uxth	r3, r3
 800448a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800448e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004492:	843b      	strh	r3, [r7, #32]
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	441a      	add	r2, r3
 800449e:	8c3b      	ldrh	r3, [r7, #32]
 80044a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80044a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80044a8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80044ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d124      	bne.n	8004506 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	4413      	add	r3, r2
 80044c6:	881b      	ldrh	r3, [r3, #0]
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80044ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044d2:	83bb      	strh	r3, [r7, #28]
 80044d4:	8bbb      	ldrh	r3, [r7, #28]
 80044d6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80044da:	83bb      	strh	r3, [r7, #28]
 80044dc:	8bbb      	ldrh	r3, [r7, #28]
 80044de:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80044e2:	83bb      	strh	r3, [r7, #28]
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	441a      	add	r2, r3
 80044ee:	8bbb      	ldrh	r3, [r7, #28]
 80044f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80044f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80044f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004500:	b29b      	uxth	r3, r3
 8004502:	8013      	strh	r3, [r2, #0]
 8004504:	e1ea      	b.n	80048dc <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	4413      	add	r3, r2
 8004510:	881b      	ldrh	r3, [r3, #0]
 8004512:	b29b      	uxth	r3, r3
 8004514:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004518:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800451c:	83fb      	strh	r3, [r7, #30]
 800451e:	8bfb      	ldrh	r3, [r7, #30]
 8004520:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004524:	83fb      	strh	r3, [r7, #30]
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	441a      	add	r2, r3
 8004530:	8bfb      	ldrh	r3, [r7, #30]
 8004532:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004536:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800453a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800453e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004542:	b29b      	uxth	r3, r3
 8004544:	8013      	strh	r3, [r2, #0]
 8004546:	e1c9      	b.n	80048dc <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	78db      	ldrb	r3, [r3, #3]
 800454c:	2b02      	cmp	r3, #2
 800454e:	d11e      	bne.n	800458e <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	4413      	add	r3, r2
 800455a:	881b      	ldrh	r3, [r3, #0]
 800455c:	b29b      	uxth	r3, r3
 800455e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004562:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004566:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	441a      	add	r2, r3
 8004574:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8004578:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800457c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004580:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004584:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004588:	b29b      	uxth	r3, r3
 800458a:	8013      	strh	r3, [r2, #0]
 800458c:	e01d      	b.n	80045ca <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	4413      	add	r3, r2
 8004598:	881b      	ldrh	r3, [r3, #0]
 800459a:	b29b      	uxth	r3, r3
 800459c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80045a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045a4:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	441a      	add	r2, r3
 80045b2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80045b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80045ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	461a      	mov	r2, r3
 80045d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80045da:	4413      	add	r3, r2
 80045dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	011a      	lsls	r2, r3, #4
 80045e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80045e6:	4413      	add	r3, r2
 80045e8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80045ec:	65bb      	str	r3, [r7, #88]	@ 0x58
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	891b      	ldrh	r3, [r3, #8]
 80045f2:	085b      	lsrs	r3, r3, #1
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	005b      	lsls	r3, r3, #1
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80045fc:	801a      	strh	r2, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	657b      	str	r3, [r7, #84]	@ 0x54
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004608:	b29b      	uxth	r3, r3
 800460a:	461a      	mov	r2, r3
 800460c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800460e:	4413      	add	r3, r2
 8004610:	657b      	str	r3, [r7, #84]	@ 0x54
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	011a      	lsls	r2, r3, #4
 8004618:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800461a:	4413      	add	r3, r2
 800461c:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004620:	653b      	str	r3, [r7, #80]	@ 0x50
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	895b      	ldrh	r3, [r3, #10]
 8004626:	085b      	lsrs	r3, r3, #1
 8004628:	b29b      	uxth	r3, r3
 800462a:	005b      	lsls	r3, r3, #1
 800462c:	b29a      	uxth	r2, r3
 800462e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004630:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	785b      	ldrb	r3, [r3, #1]
 8004636:	2b00      	cmp	r3, #0
 8004638:	f040 8093 	bne.w	8004762 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	4413      	add	r3, r2
 8004646:	881b      	ldrh	r3, [r3, #0]
 8004648:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800464c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004650:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d01b      	beq.n	8004690 <USB_ActivateEndpoint+0x524>
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	4413      	add	r3, r2
 8004662:	881b      	ldrh	r3, [r3, #0]
 8004664:	b29b      	uxth	r3, r3
 8004666:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800466a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800466e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	441a      	add	r2, r3
 800467a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800467c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004680:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004684:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004688:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800468c:	b29b      	uxth	r3, r3
 800468e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	4413      	add	r3, r2
 800469a:	881b      	ldrh	r3, [r3, #0]
 800469c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800469e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80046a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d01b      	beq.n	80046e0 <USB_ActivateEndpoint+0x574>
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	4413      	add	r3, r2
 80046b2:	881b      	ldrh	r3, [r3, #0]
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046be:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	441a      	add	r2, r3
 80046ca:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80046cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046d8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80046dc:	b29b      	uxth	r3, r3
 80046de:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	4413      	add	r3, r2
 80046ea:	881b      	ldrh	r3, [r3, #0]
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80046f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046f6:	873b      	strh	r3, [r7, #56]	@ 0x38
 80046f8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80046fa:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80046fe:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004700:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004702:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004706:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	441a      	add	r2, r3
 8004712:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004714:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004718:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800471c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004720:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004724:	b29b      	uxth	r3, r3
 8004726:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	4413      	add	r3, r2
 8004732:	881b      	ldrh	r3, [r3, #0]
 8004734:	b29b      	uxth	r3, r3
 8004736:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800473a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800473e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	441a      	add	r2, r3
 800474a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800474c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004750:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004754:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004758:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800475c:	b29b      	uxth	r3, r3
 800475e:	8013      	strh	r3, [r2, #0]
 8004760:	e0bc      	b.n	80048dc <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	4413      	add	r3, r2
 800476c:	881b      	ldrh	r3, [r3, #0]
 800476e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004772:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004776:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d01d      	beq.n	80047ba <USB_ActivateEndpoint+0x64e>
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	4413      	add	r3, r2
 8004788:	881b      	ldrh	r3, [r3, #0]
 800478a:	b29b      	uxth	r3, r3
 800478c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004790:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004794:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	441a      	add	r2, r3
 80047a2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80047a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047ae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80047b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	4413      	add	r3, r2
 80047c4:	881b      	ldrh	r3, [r3, #0]
 80047c6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80047ca:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80047ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d01d      	beq.n	8004812 <USB_ActivateEndpoint+0x6a6>
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	4413      	add	r3, r2
 80047e0:	881b      	ldrh	r3, [r3, #0]
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047ec:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	441a      	add	r2, r3
 80047fa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80047fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004802:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004806:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800480a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800480e:	b29b      	uxth	r3, r3
 8004810:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	78db      	ldrb	r3, [r3, #3]
 8004816:	2b01      	cmp	r3, #1
 8004818:	d024      	beq.n	8004864 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	4413      	add	r3, r2
 8004824:	881b      	ldrh	r3, [r3, #0]
 8004826:	b29b      	uxth	r3, r3
 8004828:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800482c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004830:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004834:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004838:	f083 0320 	eor.w	r3, r3, #32
 800483c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	441a      	add	r2, r3
 800484a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800484e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004852:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004856:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800485a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800485e:	b29b      	uxth	r3, r3
 8004860:	8013      	strh	r3, [r2, #0]
 8004862:	e01d      	b.n	80048a0 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	4413      	add	r3, r2
 800486e:	881b      	ldrh	r3, [r3, #0]
 8004870:	b29b      	uxth	r3, r3
 8004872:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004876:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800487a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	441a      	add	r2, r3
 8004888:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800488c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004890:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004894:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004898:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800489c:	b29b      	uxth	r3, r3
 800489e:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	4413      	add	r3, r2
 80048aa:	881b      	ldrh	r3, [r3, #0]
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80048b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048b6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	441a      	add	r2, r3
 80048c4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80048c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048d8:	b29b      	uxth	r3, r3
 80048da:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80048dc:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3774      	adds	r7, #116	@ 0x74
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bc80      	pop	{r7}
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop

080048ec <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b08d      	sub	sp, #52	@ 0x34
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	7b1b      	ldrb	r3, [r3, #12]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	f040 808e 	bne.w	8004a1c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	785b      	ldrb	r3, [r3, #1]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d044      	beq.n	8004992 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	4413      	add	r3, r2
 8004912:	881b      	ldrh	r3, [r3, #0]
 8004914:	81bb      	strh	r3, [r7, #12]
 8004916:	89bb      	ldrh	r3, [r7, #12]
 8004918:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800491c:	2b00      	cmp	r3, #0
 800491e:	d01b      	beq.n	8004958 <USB_DeactivateEndpoint+0x6c>
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	4413      	add	r3, r2
 800492a:	881b      	ldrh	r3, [r3, #0]
 800492c:	b29b      	uxth	r3, r3
 800492e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004932:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004936:	817b      	strh	r3, [r7, #10]
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	441a      	add	r2, r3
 8004942:	897b      	ldrh	r3, [r7, #10]
 8004944:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004948:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800494c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004950:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004954:	b29b      	uxth	r3, r3
 8004956:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	4413      	add	r3, r2
 8004962:	881b      	ldrh	r3, [r3, #0]
 8004964:	b29b      	uxth	r3, r3
 8004966:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800496a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800496e:	813b      	strh	r3, [r7, #8]
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	441a      	add	r2, r3
 800497a:	893b      	ldrh	r3, [r7, #8]
 800497c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004980:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004984:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004988:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800498c:	b29b      	uxth	r3, r3
 800498e:	8013      	strh	r3, [r2, #0]
 8004990:	e192      	b.n	8004cb8 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	4413      	add	r3, r2
 800499c:	881b      	ldrh	r3, [r3, #0]
 800499e:	827b      	strh	r3, [r7, #18]
 80049a0:	8a7b      	ldrh	r3, [r7, #18]
 80049a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d01b      	beq.n	80049e2 <USB_DeactivateEndpoint+0xf6>
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	4413      	add	r3, r2
 80049b4:	881b      	ldrh	r3, [r3, #0]
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049c0:	823b      	strh	r3, [r7, #16]
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	441a      	add	r2, r3
 80049cc:	8a3b      	ldrh	r3, [r7, #16]
 80049ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049d6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80049da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049de:	b29b      	uxth	r3, r3
 80049e0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	4413      	add	r3, r2
 80049ec:	881b      	ldrh	r3, [r3, #0]
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80049f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049f8:	81fb      	strh	r3, [r7, #14]
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	441a      	add	r2, r3
 8004a04:	89fb      	ldrh	r3, [r7, #14]
 8004a06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	8013      	strh	r3, [r2, #0]
 8004a1a:	e14d      	b.n	8004cb8 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	785b      	ldrb	r3, [r3, #1]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	f040 80a5 	bne.w	8004b70 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	4413      	add	r3, r2
 8004a30:	881b      	ldrh	r3, [r3, #0]
 8004a32:	843b      	strh	r3, [r7, #32]
 8004a34:	8c3b      	ldrh	r3, [r7, #32]
 8004a36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d01b      	beq.n	8004a76 <USB_DeactivateEndpoint+0x18a>
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	4413      	add	r3, r2
 8004a48:	881b      	ldrh	r3, [r3, #0]
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a54:	83fb      	strh	r3, [r7, #30]
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	441a      	add	r2, r3
 8004a60:	8bfb      	ldrh	r3, [r7, #30]
 8004a62:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a66:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a6a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004a6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	4413      	add	r3, r2
 8004a80:	881b      	ldrh	r3, [r3, #0]
 8004a82:	83bb      	strh	r3, [r7, #28]
 8004a84:	8bbb      	ldrh	r3, [r7, #28]
 8004a86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d01b      	beq.n	8004ac6 <USB_DeactivateEndpoint+0x1da>
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	4413      	add	r3, r2
 8004a98:	881b      	ldrh	r3, [r3, #0]
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004aa0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004aa4:	837b      	strh	r3, [r7, #26]
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	441a      	add	r2, r3
 8004ab0:	8b7b      	ldrh	r3, [r7, #26]
 8004ab2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ab6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004aba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004abe:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	4413      	add	r3, r2
 8004ad0:	881b      	ldrh	r3, [r3, #0]
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ad8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004adc:	833b      	strh	r3, [r7, #24]
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	441a      	add	r2, r3
 8004ae8:	8b3b      	ldrh	r3, [r7, #24]
 8004aea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004aee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004af2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004af6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	4413      	add	r3, r2
 8004b08:	881b      	ldrh	r3, [r3, #0]
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b14:	82fb      	strh	r3, [r7, #22]
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	441a      	add	r2, r3
 8004b20:	8afb      	ldrh	r3, [r7, #22]
 8004b22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	4413      	add	r3, r2
 8004b40:	881b      	ldrh	r3, [r3, #0]
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b4c:	82bb      	strh	r3, [r7, #20]
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	441a      	add	r2, r3
 8004b58:	8abb      	ldrh	r3, [r7, #20]
 8004b5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	8013      	strh	r3, [r2, #0]
 8004b6e:	e0a3      	b.n	8004cb8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	4413      	add	r3, r2
 8004b7a:	881b      	ldrh	r3, [r3, #0]
 8004b7c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8004b7e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004b80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d01b      	beq.n	8004bc0 <USB_DeactivateEndpoint+0x2d4>
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	4413      	add	r3, r2
 8004b92:	881b      	ldrh	r3, [r3, #0]
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b9e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	441a      	add	r2, r3
 8004baa:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004bac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bb0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bb4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004bb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	4413      	add	r3, r2
 8004bca:	881b      	ldrh	r3, [r3, #0]
 8004bcc:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8004bce:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004bd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d01b      	beq.n	8004c10 <USB_DeactivateEndpoint+0x324>
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	4413      	add	r3, r2
 8004be2:	881b      	ldrh	r3, [r3, #0]
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bee:	853b      	strh	r3, [r7, #40]	@ 0x28
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	441a      	add	r2, r3
 8004bfa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004bfc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c00:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c08:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	4413      	add	r3, r2
 8004c1a:	881b      	ldrh	r3, [r3, #0]
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c26:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	441a      	add	r2, r3
 8004c32:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004c34:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c38:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c3c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004c40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	4413      	add	r3, r2
 8004c52:	881b      	ldrh	r3, [r3, #0]
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c5e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	441a      	add	r2, r3
 8004c6a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004c6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	4413      	add	r3, r2
 8004c8a:	881b      	ldrh	r3, [r3, #0]
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004c92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c96:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	441a      	add	r2, r3
 8004ca2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004ca4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ca8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004cac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3734      	adds	r7, #52	@ 0x34
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bc80      	pop	{r7}
 8004cc2:	4770      	bx	lr

08004cc4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b0c2      	sub	sp, #264	@ 0x108
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004cd2:	6018      	str	r0, [r3, #0]
 8004cd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004cdc:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004cde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ce2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	785b      	ldrb	r3, [r3, #1]
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	f040 86b7 	bne.w	8005a5e <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004cf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cf4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	699a      	ldr	r2, [r3, #24]
 8004cfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d908      	bls.n	8004d1e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004d0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	691b      	ldr	r3, [r3, #16]
 8004d18:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004d1c:	e007      	b.n	8004d2e <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004d1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	699b      	ldr	r3, [r3, #24]
 8004d2a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004d2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	7b1b      	ldrb	r3, [r3, #12]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d13a      	bne.n	8004db4 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004d3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	6959      	ldr	r1, [r3, #20]
 8004d4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	88da      	ldrh	r2, [r3, #6]
 8004d56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004d60:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004d64:	6800      	ldr	r0, [r0, #0]
 8004d66:	f001 fc9c 	bl	80066a2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004d6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d6e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	613b      	str	r3, [r7, #16]
 8004d76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d7a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	461a      	mov	r2, r3
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	613b      	str	r3, [r7, #16]
 8004d8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	011a      	lsls	r2, r3, #4
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	4413      	add	r3, r2
 8004da0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004da4:	60fb      	str	r3, [r7, #12]
 8004da6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004daa:	b29a      	uxth	r2, r3
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	801a      	strh	r2, [r3, #0]
 8004db0:	f000 be1f 	b.w	80059f2 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004db4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004db8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	78db      	ldrb	r3, [r3, #3]
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	f040 8462 	bne.w	800568a <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004dc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	6a1a      	ldr	r2, [r3, #32]
 8004dd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	f240 83df 	bls.w	80055a2 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004de4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004de8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004df2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	4413      	add	r3, r2
 8004dfe:	881b      	ldrh	r3, [r3, #0]
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e0a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8004e0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	441a      	add	r2, r3
 8004e28:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8004e2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e34:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004e38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004e40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	6a1a      	ldr	r2, [r3, #32]
 8004e4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e50:	1ad2      	subs	r2, r2, r3
 8004e52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004e5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e62:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	4413      	add	r3, r2
 8004e78:	881b      	ldrh	r3, [r3, #0]
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	f000 81c7 	beq.w	8005214 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004e86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e8a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	785b      	ldrb	r3, [r3, #1]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d177      	bne.n	8004f92 <USB_EPStartXfer+0x2ce>
 8004ea2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ea6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004eae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004eb2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ec2:	4413      	add	r3, r2
 8004ec4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ec6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004eca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	011a      	lsls	r2, r3, #4
 8004ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ed6:	4413      	add	r3, r2
 8004ed8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004edc:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee0:	881b      	ldrh	r3, [r3, #0]
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ee8:	b29a      	uxth	r2, r3
 8004eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eec:	801a      	strh	r2, [r3, #0]
 8004eee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ef2:	2b3e      	cmp	r3, #62	@ 0x3e
 8004ef4:	d921      	bls.n	8004f3a <USB_EPStartXfer+0x276>
 8004ef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004efa:	095b      	lsrs	r3, r3, #5
 8004efc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004f00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f04:	f003 031f 	and.w	r3, r3, #31
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d104      	bne.n	8004f16 <USB_EPStartXfer+0x252>
 8004f0c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004f10:	3b01      	subs	r3, #1
 8004f12:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f18:	881b      	ldrh	r3, [r3, #0]
 8004f1a:	b29a      	uxth	r2, r3
 8004f1c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	029b      	lsls	r3, r3, #10
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	4313      	orrs	r3, r2
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f32:	b29a      	uxth	r2, r3
 8004f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f36:	801a      	strh	r2, [r3, #0]
 8004f38:	e050      	b.n	8004fdc <USB_EPStartXfer+0x318>
 8004f3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d10a      	bne.n	8004f58 <USB_EPStartXfer+0x294>
 8004f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f44:	881b      	ldrh	r3, [r3, #0]
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f50:	b29a      	uxth	r2, r3
 8004f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f54:	801a      	strh	r2, [r3, #0]
 8004f56:	e041      	b.n	8004fdc <USB_EPStartXfer+0x318>
 8004f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f5c:	085b      	lsrs	r3, r3, #1
 8004f5e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004f62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f66:	f003 0301 	and.w	r3, r3, #1
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d004      	beq.n	8004f78 <USB_EPStartXfer+0x2b4>
 8004f6e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004f72:	3301      	adds	r3, #1
 8004f74:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f7a:	881b      	ldrh	r3, [r3, #0]
 8004f7c:	b29a      	uxth	r2, r3
 8004f7e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	029b      	lsls	r3, r3, #10
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	b29a      	uxth	r2, r3
 8004f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f8e:	801a      	strh	r2, [r3, #0]
 8004f90:	e024      	b.n	8004fdc <USB_EPStartXfer+0x318>
 8004f92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	785b      	ldrb	r3, [r3, #1]
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d11c      	bne.n	8004fdc <USB_EPStartXfer+0x318>
 8004fa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fa6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fb6:	4413      	add	r3, r2
 8004fb8:	633b      	str	r3, [r7, #48]	@ 0x30
 8004fba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	011a      	lsls	r2, r3, #4
 8004fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fca:	4413      	add	r3, r2
 8004fcc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004fd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004fd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fd6:	b29a      	uxth	r2, r3
 8004fd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fda:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004fdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fe0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	895b      	ldrh	r3, [r3, #10]
 8004fe8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004fec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ff0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	6959      	ldr	r1, [r3, #20]
 8004ff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005002:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005006:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800500a:	6800      	ldr	r0, [r0, #0]
 800500c:	f001 fb49 	bl	80066a2 <USB_WritePMA>
            ep->xfer_buff += len;
 8005010:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005014:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	695a      	ldr	r2, [r3, #20]
 800501c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005020:	441a      	add	r2, r3
 8005022:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005026:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800502e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005032:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	6a1a      	ldr	r2, [r3, #32]
 800503a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800503e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	429a      	cmp	r2, r3
 8005048:	d90f      	bls.n	800506a <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800504a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800504e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	6a1a      	ldr	r2, [r3, #32]
 8005056:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800505a:	1ad2      	subs	r2, r2, r3
 800505c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005060:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	621a      	str	r2, [r3, #32]
 8005068:	e00e      	b.n	8005088 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800506a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800506e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800507a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800507e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	2200      	movs	r2, #0
 8005086:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005088:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800508c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	785b      	ldrb	r3, [r3, #1]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d177      	bne.n	8005188 <USB_EPStartXfer+0x4c4>
 8005098:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800509c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	61bb      	str	r3, [r7, #24]
 80050a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	461a      	mov	r2, r3
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	4413      	add	r3, r2
 80050ba:	61bb      	str	r3, [r7, #24]
 80050bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	011a      	lsls	r2, r3, #4
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	4413      	add	r3, r2
 80050ce:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80050d2:	617b      	str	r3, [r7, #20]
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	881b      	ldrh	r3, [r3, #0]
 80050d8:	b29b      	uxth	r3, r3
 80050da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050de:	b29a      	uxth	r2, r3
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	801a      	strh	r2, [r3, #0]
 80050e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050e8:	2b3e      	cmp	r3, #62	@ 0x3e
 80050ea:	d921      	bls.n	8005130 <USB_EPStartXfer+0x46c>
 80050ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050f0:	095b      	lsrs	r3, r3, #5
 80050f2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80050f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050fa:	f003 031f 	and.w	r3, r3, #31
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d104      	bne.n	800510c <USB_EPStartXfer+0x448>
 8005102:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005106:	3b01      	subs	r3, #1
 8005108:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	881b      	ldrh	r3, [r3, #0]
 8005110:	b29a      	uxth	r2, r3
 8005112:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005116:	b29b      	uxth	r3, r3
 8005118:	029b      	lsls	r3, r3, #10
 800511a:	b29b      	uxth	r3, r3
 800511c:	4313      	orrs	r3, r2
 800511e:	b29b      	uxth	r3, r3
 8005120:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005124:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005128:	b29a      	uxth	r2, r3
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	801a      	strh	r2, [r3, #0]
 800512e:	e056      	b.n	80051de <USB_EPStartXfer+0x51a>
 8005130:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005134:	2b00      	cmp	r3, #0
 8005136:	d10a      	bne.n	800514e <USB_EPStartXfer+0x48a>
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	881b      	ldrh	r3, [r3, #0]
 800513c:	b29b      	uxth	r3, r3
 800513e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005142:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005146:	b29a      	uxth	r2, r3
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	801a      	strh	r2, [r3, #0]
 800514c:	e047      	b.n	80051de <USB_EPStartXfer+0x51a>
 800514e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005152:	085b      	lsrs	r3, r3, #1
 8005154:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005158:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800515c:	f003 0301 	and.w	r3, r3, #1
 8005160:	2b00      	cmp	r3, #0
 8005162:	d004      	beq.n	800516e <USB_EPStartXfer+0x4aa>
 8005164:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005168:	3301      	adds	r3, #1
 800516a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	881b      	ldrh	r3, [r3, #0]
 8005172:	b29a      	uxth	r2, r3
 8005174:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005178:	b29b      	uxth	r3, r3
 800517a:	029b      	lsls	r3, r3, #10
 800517c:	b29b      	uxth	r3, r3
 800517e:	4313      	orrs	r3, r2
 8005180:	b29a      	uxth	r2, r3
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	801a      	strh	r2, [r3, #0]
 8005186:	e02a      	b.n	80051de <USB_EPStartXfer+0x51a>
 8005188:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800518c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	785b      	ldrb	r3, [r3, #1]
 8005194:	2b01      	cmp	r3, #1
 8005196:	d122      	bne.n	80051de <USB_EPStartXfer+0x51a>
 8005198:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800519c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	623b      	str	r3, [r7, #32]
 80051a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	461a      	mov	r2, r3
 80051b6:	6a3b      	ldr	r3, [r7, #32]
 80051b8:	4413      	add	r3, r2
 80051ba:	623b      	str	r3, [r7, #32]
 80051bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	011a      	lsls	r2, r3, #4
 80051ca:	6a3b      	ldr	r3, [r7, #32]
 80051cc:	4413      	add	r3, r2
 80051ce:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80051d2:	61fb      	str	r3, [r7, #28]
 80051d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051d8:	b29a      	uxth	r2, r3
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80051de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	891b      	ldrh	r3, [r3, #8]
 80051ea:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80051ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	6959      	ldr	r1, [r3, #20]
 80051fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051fe:	b29b      	uxth	r3, r3
 8005200:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005204:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005208:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800520c:	6800      	ldr	r0, [r0, #0]
 800520e:	f001 fa48 	bl	80066a2 <USB_WritePMA>
 8005212:	e3ee      	b.n	80059f2 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005214:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005218:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	785b      	ldrb	r3, [r3, #1]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d177      	bne.n	8005314 <USB_EPStartXfer+0x650>
 8005224:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005228:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005230:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005234:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800523e:	b29b      	uxth	r3, r3
 8005240:	461a      	mov	r2, r3
 8005242:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005244:	4413      	add	r3, r2
 8005246:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005248:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800524c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	011a      	lsls	r2, r3, #4
 8005256:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005258:	4413      	add	r3, r2
 800525a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800525e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005260:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005262:	881b      	ldrh	r3, [r3, #0]
 8005264:	b29b      	uxth	r3, r3
 8005266:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800526a:	b29a      	uxth	r2, r3
 800526c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800526e:	801a      	strh	r2, [r3, #0]
 8005270:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005274:	2b3e      	cmp	r3, #62	@ 0x3e
 8005276:	d921      	bls.n	80052bc <USB_EPStartXfer+0x5f8>
 8005278:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800527c:	095b      	lsrs	r3, r3, #5
 800527e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005282:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005286:	f003 031f 	and.w	r3, r3, #31
 800528a:	2b00      	cmp	r3, #0
 800528c:	d104      	bne.n	8005298 <USB_EPStartXfer+0x5d4>
 800528e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005292:	3b01      	subs	r3, #1
 8005294:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005298:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800529a:	881b      	ldrh	r3, [r3, #0]
 800529c:	b29a      	uxth	r2, r3
 800529e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	029b      	lsls	r3, r3, #10
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	4313      	orrs	r3, r2
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052b4:	b29a      	uxth	r2, r3
 80052b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052b8:	801a      	strh	r2, [r3, #0]
 80052ba:	e056      	b.n	800536a <USB_EPStartXfer+0x6a6>
 80052bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d10a      	bne.n	80052da <USB_EPStartXfer+0x616>
 80052c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052c6:	881b      	ldrh	r3, [r3, #0]
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052d2:	b29a      	uxth	r2, r3
 80052d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052d6:	801a      	strh	r2, [r3, #0]
 80052d8:	e047      	b.n	800536a <USB_EPStartXfer+0x6a6>
 80052da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052de:	085b      	lsrs	r3, r3, #1
 80052e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80052e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052e8:	f003 0301 	and.w	r3, r3, #1
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d004      	beq.n	80052fa <USB_EPStartXfer+0x636>
 80052f0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80052f4:	3301      	adds	r3, #1
 80052f6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80052fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052fc:	881b      	ldrh	r3, [r3, #0]
 80052fe:	b29a      	uxth	r2, r3
 8005300:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005304:	b29b      	uxth	r3, r3
 8005306:	029b      	lsls	r3, r3, #10
 8005308:	b29b      	uxth	r3, r3
 800530a:	4313      	orrs	r3, r2
 800530c:	b29a      	uxth	r2, r3
 800530e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005310:	801a      	strh	r2, [r3, #0]
 8005312:	e02a      	b.n	800536a <USB_EPStartXfer+0x6a6>
 8005314:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005318:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	785b      	ldrb	r3, [r3, #1]
 8005320:	2b01      	cmp	r3, #1
 8005322:	d122      	bne.n	800536a <USB_EPStartXfer+0x6a6>
 8005324:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005328:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005330:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005334:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800533e:	b29b      	uxth	r3, r3
 8005340:	461a      	mov	r2, r3
 8005342:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005344:	4413      	add	r3, r2
 8005346:	653b      	str	r3, [r7, #80]	@ 0x50
 8005348:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800534c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	011a      	lsls	r2, r3, #4
 8005356:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005358:	4413      	add	r3, r2
 800535a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800535e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005360:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005364:	b29a      	uxth	r2, r3
 8005366:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005368:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800536a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800536e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	891b      	ldrh	r3, [r3, #8]
 8005376:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800537a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800537e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	6959      	ldr	r1, [r3, #20]
 8005386:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800538a:	b29b      	uxth	r3, r3
 800538c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005390:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005394:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005398:	6800      	ldr	r0, [r0, #0]
 800539a:	f001 f982 	bl	80066a2 <USB_WritePMA>
            ep->xfer_buff += len;
 800539e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	695a      	ldr	r2, [r3, #20]
 80053aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053ae:	441a      	add	r2, r3
 80053b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80053bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	6a1a      	ldr	r2, [r3, #32]
 80053c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	691b      	ldr	r3, [r3, #16]
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d90f      	bls.n	80053f8 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80053d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	6a1a      	ldr	r2, [r3, #32]
 80053e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053e8:	1ad2      	subs	r2, r2, r3
 80053ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	621a      	str	r2, [r3, #32]
 80053f6:	e00e      	b.n	8005416 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80053f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	6a1b      	ldr	r3, [r3, #32]
 8005404:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005408:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800540c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	2200      	movs	r2, #0
 8005414:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005416:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800541a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	643b      	str	r3, [r7, #64]	@ 0x40
 8005422:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005426:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	785b      	ldrb	r3, [r3, #1]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d177      	bne.n	8005522 <USB_EPStartXfer+0x85e>
 8005432:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005436:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800543e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005442:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800544c:	b29b      	uxth	r3, r3
 800544e:	461a      	mov	r2, r3
 8005450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005452:	4413      	add	r3, r2
 8005454:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005456:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800545a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	011a      	lsls	r2, r3, #4
 8005464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005466:	4413      	add	r3, r2
 8005468:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800546c:	637b      	str	r3, [r7, #52]	@ 0x34
 800546e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005470:	881b      	ldrh	r3, [r3, #0]
 8005472:	b29b      	uxth	r3, r3
 8005474:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005478:	b29a      	uxth	r2, r3
 800547a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800547c:	801a      	strh	r2, [r3, #0]
 800547e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005482:	2b3e      	cmp	r3, #62	@ 0x3e
 8005484:	d921      	bls.n	80054ca <USB_EPStartXfer+0x806>
 8005486:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800548a:	095b      	lsrs	r3, r3, #5
 800548c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005490:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005494:	f003 031f 	and.w	r3, r3, #31
 8005498:	2b00      	cmp	r3, #0
 800549a:	d104      	bne.n	80054a6 <USB_EPStartXfer+0x7e2>
 800549c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054a0:	3b01      	subs	r3, #1
 80054a2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80054a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054a8:	881b      	ldrh	r3, [r3, #0]
 80054aa:	b29a      	uxth	r2, r3
 80054ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	029b      	lsls	r3, r3, #10
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	4313      	orrs	r3, r2
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054c2:	b29a      	uxth	r2, r3
 80054c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054c6:	801a      	strh	r2, [r3, #0]
 80054c8:	e050      	b.n	800556c <USB_EPStartXfer+0x8a8>
 80054ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d10a      	bne.n	80054e8 <USB_EPStartXfer+0x824>
 80054d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054d4:	881b      	ldrh	r3, [r3, #0]
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054e0:	b29a      	uxth	r2, r3
 80054e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054e4:	801a      	strh	r2, [r3, #0]
 80054e6:	e041      	b.n	800556c <USB_EPStartXfer+0x8a8>
 80054e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054ec:	085b      	lsrs	r3, r3, #1
 80054ee:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80054f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054f6:	f003 0301 	and.w	r3, r3, #1
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d004      	beq.n	8005508 <USB_EPStartXfer+0x844>
 80054fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005502:	3301      	adds	r3, #1
 8005504:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005508:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800550a:	881b      	ldrh	r3, [r3, #0]
 800550c:	b29a      	uxth	r2, r3
 800550e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005512:	b29b      	uxth	r3, r3
 8005514:	029b      	lsls	r3, r3, #10
 8005516:	b29b      	uxth	r3, r3
 8005518:	4313      	orrs	r3, r2
 800551a:	b29a      	uxth	r2, r3
 800551c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800551e:	801a      	strh	r2, [r3, #0]
 8005520:	e024      	b.n	800556c <USB_EPStartXfer+0x8a8>
 8005522:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005526:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	785b      	ldrb	r3, [r3, #1]
 800552e:	2b01      	cmp	r3, #1
 8005530:	d11c      	bne.n	800556c <USB_EPStartXfer+0x8a8>
 8005532:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005536:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005540:	b29b      	uxth	r3, r3
 8005542:	461a      	mov	r2, r3
 8005544:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005546:	4413      	add	r3, r2
 8005548:	643b      	str	r3, [r7, #64]	@ 0x40
 800554a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800554e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	011a      	lsls	r2, r3, #4
 8005558:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800555a:	4413      	add	r3, r2
 800555c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005560:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005562:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005566:	b29a      	uxth	r2, r3
 8005568:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800556a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800556c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005570:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	895b      	ldrh	r3, [r3, #10]
 8005578:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800557c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005580:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	6959      	ldr	r1, [r3, #20]
 8005588:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800558c:	b29b      	uxth	r3, r3
 800558e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005592:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005596:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800559a:	6800      	ldr	r0, [r0, #0]
 800559c:	f001 f881 	bl	80066a2 <USB_WritePMA>
 80055a0:	e227      	b.n	80059f2 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80055a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	6a1b      	ldr	r3, [r3, #32]
 80055ae:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80055b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	4413      	add	r3, r2
 80055cc:	881b      	ldrh	r3, [r3, #0]
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80055d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055d8:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80055dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	441a      	add	r2, r3
 80055f6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80055fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80055fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005602:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005606:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800560a:	b29b      	uxth	r3, r3
 800560c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800560e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005612:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800561a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800561e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005628:	b29b      	uxth	r3, r3
 800562a:	461a      	mov	r2, r3
 800562c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800562e:	4413      	add	r3, r2
 8005630:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005632:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005636:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	011a      	lsls	r2, r3, #4
 8005640:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005642:	4413      	add	r3, r2
 8005644:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005648:	65bb      	str	r3, [r7, #88]	@ 0x58
 800564a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800564e:	b29a      	uxth	r2, r3
 8005650:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005652:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005654:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005658:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	891b      	ldrh	r3, [r3, #8]
 8005660:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005664:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005668:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	6959      	ldr	r1, [r3, #20]
 8005670:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005674:	b29b      	uxth	r3, r3
 8005676:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800567a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800567e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005682:	6800      	ldr	r0, [r0, #0]
 8005684:	f001 f80d 	bl	80066a2 <USB_WritePMA>
 8005688:	e1b3      	b.n	80059f2 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800568a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800568e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	6a1a      	ldr	r2, [r3, #32]
 8005696:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800569a:	1ad2      	subs	r2, r2, r3
 800569c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80056a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	4413      	add	r3, r2
 80056c2:	881b      	ldrh	r3, [r3, #0]
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	f000 80c6 	beq.w	800585c <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80056d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	673b      	str	r3, [r7, #112]	@ 0x70
 80056dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	785b      	ldrb	r3, [r3, #1]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d177      	bne.n	80057dc <USB_EPStartXfer+0xb18>
 80056ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80056f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005706:	b29b      	uxth	r3, r3
 8005708:	461a      	mov	r2, r3
 800570a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800570c:	4413      	add	r3, r2
 800570e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005710:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005714:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	011a      	lsls	r2, r3, #4
 800571e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005720:	4413      	add	r3, r2
 8005722:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005726:	667b      	str	r3, [r7, #100]	@ 0x64
 8005728:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800572a:	881b      	ldrh	r3, [r3, #0]
 800572c:	b29b      	uxth	r3, r3
 800572e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005732:	b29a      	uxth	r2, r3
 8005734:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005736:	801a      	strh	r2, [r3, #0]
 8005738:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800573c:	2b3e      	cmp	r3, #62	@ 0x3e
 800573e:	d921      	bls.n	8005784 <USB_EPStartXfer+0xac0>
 8005740:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005744:	095b      	lsrs	r3, r3, #5
 8005746:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800574a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800574e:	f003 031f 	and.w	r3, r3, #31
 8005752:	2b00      	cmp	r3, #0
 8005754:	d104      	bne.n	8005760 <USB_EPStartXfer+0xa9c>
 8005756:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800575a:	3b01      	subs	r3, #1
 800575c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005760:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005762:	881b      	ldrh	r3, [r3, #0]
 8005764:	b29a      	uxth	r2, r3
 8005766:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800576a:	b29b      	uxth	r3, r3
 800576c:	029b      	lsls	r3, r3, #10
 800576e:	b29b      	uxth	r3, r3
 8005770:	4313      	orrs	r3, r2
 8005772:	b29b      	uxth	r3, r3
 8005774:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005778:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800577c:	b29a      	uxth	r2, r3
 800577e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005780:	801a      	strh	r2, [r3, #0]
 8005782:	e050      	b.n	8005826 <USB_EPStartXfer+0xb62>
 8005784:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005788:	2b00      	cmp	r3, #0
 800578a:	d10a      	bne.n	80057a2 <USB_EPStartXfer+0xade>
 800578c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800578e:	881b      	ldrh	r3, [r3, #0]
 8005790:	b29b      	uxth	r3, r3
 8005792:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005796:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800579a:	b29a      	uxth	r2, r3
 800579c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800579e:	801a      	strh	r2, [r3, #0]
 80057a0:	e041      	b.n	8005826 <USB_EPStartXfer+0xb62>
 80057a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057a6:	085b      	lsrs	r3, r3, #1
 80057a8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80057ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057b0:	f003 0301 	and.w	r3, r3, #1
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d004      	beq.n	80057c2 <USB_EPStartXfer+0xafe>
 80057b8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80057bc:	3301      	adds	r3, #1
 80057be:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80057c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80057c4:	881b      	ldrh	r3, [r3, #0]
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	029b      	lsls	r3, r3, #10
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	4313      	orrs	r3, r2
 80057d4:	b29a      	uxth	r2, r3
 80057d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80057d8:	801a      	strh	r2, [r3, #0]
 80057da:	e024      	b.n	8005826 <USB_EPStartXfer+0xb62>
 80057dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	785b      	ldrb	r3, [r3, #1]
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d11c      	bne.n	8005826 <USB_EPStartXfer+0xb62>
 80057ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	461a      	mov	r2, r3
 80057fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005800:	4413      	add	r3, r2
 8005802:	673b      	str	r3, [r7, #112]	@ 0x70
 8005804:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005808:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	011a      	lsls	r2, r3, #4
 8005812:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005814:	4413      	add	r3, r2
 8005816:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800581a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800581c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005820:	b29a      	uxth	r2, r3
 8005822:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005824:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005826:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800582a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	895b      	ldrh	r3, [r3, #10]
 8005832:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005836:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800583a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	6959      	ldr	r1, [r3, #20]
 8005842:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005846:	b29b      	uxth	r3, r3
 8005848:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800584c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005850:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005854:	6800      	ldr	r0, [r0, #0]
 8005856:	f000 ff24 	bl	80066a2 <USB_WritePMA>
 800585a:	e0ca      	b.n	80059f2 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800585c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005860:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	785b      	ldrb	r3, [r3, #1]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d177      	bne.n	800595c <USB_EPStartXfer+0xc98>
 800586c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005870:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005878:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800587c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005886:	b29b      	uxth	r3, r3
 8005888:	461a      	mov	r2, r3
 800588a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800588c:	4413      	add	r3, r2
 800588e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005890:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005894:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	011a      	lsls	r2, r3, #4
 800589e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80058a0:	4413      	add	r3, r2
 80058a2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80058a6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80058a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80058aa:	881b      	ldrh	r3, [r3, #0]
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058b2:	b29a      	uxth	r2, r3
 80058b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80058b6:	801a      	strh	r2, [r3, #0]
 80058b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058bc:	2b3e      	cmp	r3, #62	@ 0x3e
 80058be:	d921      	bls.n	8005904 <USB_EPStartXfer+0xc40>
 80058c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058c4:	095b      	lsrs	r3, r3, #5
 80058c6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80058ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058ce:	f003 031f 	and.w	r3, r3, #31
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d104      	bne.n	80058e0 <USB_EPStartXfer+0xc1c>
 80058d6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80058da:	3b01      	subs	r3, #1
 80058dc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80058e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80058e2:	881b      	ldrh	r3, [r3, #0]
 80058e4:	b29a      	uxth	r2, r3
 80058e6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	029b      	lsls	r3, r3, #10
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	4313      	orrs	r3, r2
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058fc:	b29a      	uxth	r2, r3
 80058fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005900:	801a      	strh	r2, [r3, #0]
 8005902:	e05c      	b.n	80059be <USB_EPStartXfer+0xcfa>
 8005904:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005908:	2b00      	cmp	r3, #0
 800590a:	d10a      	bne.n	8005922 <USB_EPStartXfer+0xc5e>
 800590c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800590e:	881b      	ldrh	r3, [r3, #0]
 8005910:	b29b      	uxth	r3, r3
 8005912:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005916:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800591a:	b29a      	uxth	r2, r3
 800591c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800591e:	801a      	strh	r2, [r3, #0]
 8005920:	e04d      	b.n	80059be <USB_EPStartXfer+0xcfa>
 8005922:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005926:	085b      	lsrs	r3, r3, #1
 8005928:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800592c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005930:	f003 0301 	and.w	r3, r3, #1
 8005934:	2b00      	cmp	r3, #0
 8005936:	d004      	beq.n	8005942 <USB_EPStartXfer+0xc7e>
 8005938:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800593c:	3301      	adds	r3, #1
 800593e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005942:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005944:	881b      	ldrh	r3, [r3, #0]
 8005946:	b29a      	uxth	r2, r3
 8005948:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800594c:	b29b      	uxth	r3, r3
 800594e:	029b      	lsls	r3, r3, #10
 8005950:	b29b      	uxth	r3, r3
 8005952:	4313      	orrs	r3, r2
 8005954:	b29a      	uxth	r2, r3
 8005956:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005958:	801a      	strh	r2, [r3, #0]
 800595a:	e030      	b.n	80059be <USB_EPStartXfer+0xcfa>
 800595c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005960:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	785b      	ldrb	r3, [r3, #1]
 8005968:	2b01      	cmp	r3, #1
 800596a:	d128      	bne.n	80059be <USB_EPStartXfer+0xcfa>
 800596c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005970:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800597a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800597e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005988:	b29b      	uxth	r3, r3
 800598a:	461a      	mov	r2, r3
 800598c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005990:	4413      	add	r3, r2
 8005992:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005996:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800599a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	011a      	lsls	r2, r3, #4
 80059a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80059a8:	4413      	add	r3, r2
 80059aa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80059ae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80059b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059b6:	b29a      	uxth	r2, r3
 80059b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80059bc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80059be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	891b      	ldrh	r3, [r3, #8]
 80059ca:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80059ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	6959      	ldr	r1, [r3, #20]
 80059da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059de:	b29b      	uxth	r3, r3
 80059e0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80059e4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80059e8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80059ec:	6800      	ldr	r0, [r0, #0]
 80059ee:	f000 fe58 	bl	80066a2 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80059f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	4413      	add	r3, r2
 8005a0c:	881b      	ldrh	r3, [r3, #0]
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a18:	817b      	strh	r3, [r7, #10]
 8005a1a:	897b      	ldrh	r3, [r7, #10]
 8005a1c:	f083 0310 	eor.w	r3, r3, #16
 8005a20:	817b      	strh	r3, [r7, #10]
 8005a22:	897b      	ldrh	r3, [r7, #10]
 8005a24:	f083 0320 	eor.w	r3, r3, #32
 8005a28:	817b      	strh	r3, [r7, #10]
 8005a2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	441a      	add	r2, r3
 8005a44:	897b      	ldrh	r3, [r7, #10]
 8005a46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	8013      	strh	r3, [r2, #0]
 8005a5a:	f000 bcde 	b.w	800641a <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005a5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	7b1b      	ldrb	r3, [r3, #12]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	f040 80bb 	bne.w	8005be6 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005a70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	699a      	ldr	r2, [r3, #24]
 8005a7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	691b      	ldr	r3, [r3, #16]
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d917      	bls.n	8005abc <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005a8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8005a9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005aa0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	699a      	ldr	r2, [r3, #24]
 8005aa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005aac:	1ad2      	subs	r2, r2, r3
 8005aae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ab2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	619a      	str	r2, [r3, #24]
 8005aba:	e00e      	b.n	8005ada <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005abc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ac0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	699b      	ldr	r3, [r3, #24]
 8005ac8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8005acc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ad0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005ada:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ade:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005ae8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005aec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	461a      	mov	r2, r3
 8005afa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005afe:	4413      	add	r3, r2
 8005b00:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005b04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	011a      	lsls	r2, r3, #4
 8005b12:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005b16:	4413      	add	r3, r2
 8005b18:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005b1c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005b20:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b24:	881b      	ldrh	r3, [r3, #0]
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b2c:	b29a      	uxth	r2, r3
 8005b2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b32:	801a      	strh	r2, [r3, #0]
 8005b34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b38:	2b3e      	cmp	r3, #62	@ 0x3e
 8005b3a:	d924      	bls.n	8005b86 <USB_EPStartXfer+0xec2>
 8005b3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b40:	095b      	lsrs	r3, r3, #5
 8005b42:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005b46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b4a:	f003 031f 	and.w	r3, r3, #31
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d104      	bne.n	8005b5c <USB_EPStartXfer+0xe98>
 8005b52:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005b56:	3b01      	subs	r3, #1
 8005b58:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005b5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b60:	881b      	ldrh	r3, [r3, #0]
 8005b62:	b29a      	uxth	r2, r3
 8005b64:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	029b      	lsls	r3, r3, #10
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b7a:	b29a      	uxth	r2, r3
 8005b7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b80:	801a      	strh	r2, [r3, #0]
 8005b82:	f000 bc10 	b.w	80063a6 <USB_EPStartXfer+0x16e2>
 8005b86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d10c      	bne.n	8005ba8 <USB_EPStartXfer+0xee4>
 8005b8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b92:	881b      	ldrh	r3, [r3, #0]
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b9e:	b29a      	uxth	r2, r3
 8005ba0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ba4:	801a      	strh	r2, [r3, #0]
 8005ba6:	e3fe      	b.n	80063a6 <USB_EPStartXfer+0x16e2>
 8005ba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bac:	085b      	lsrs	r3, r3, #1
 8005bae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005bb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bb6:	f003 0301 	and.w	r3, r3, #1
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d004      	beq.n	8005bc8 <USB_EPStartXfer+0xf04>
 8005bbe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005bc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005bcc:	881b      	ldrh	r3, [r3, #0]
 8005bce:	b29a      	uxth	r2, r3
 8005bd0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	029b      	lsls	r3, r3, #10
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	b29a      	uxth	r2, r3
 8005bde:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005be2:	801a      	strh	r2, [r3, #0]
 8005be4:	e3df      	b.n	80063a6 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005be6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	78db      	ldrb	r3, [r3, #3]
 8005bf2:	2b02      	cmp	r3, #2
 8005bf4:	f040 8218 	bne.w	8006028 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005bf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	785b      	ldrb	r3, [r3, #1]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	f040 809d 	bne.w	8005d44 <USB_EPStartXfer+0x1080>
 8005c0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c0e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005c18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	461a      	mov	r2, r3
 8005c2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005c2e:	4413      	add	r3, r2
 8005c30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005c34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	011a      	lsls	r2, r3, #4
 8005c42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005c46:	4413      	add	r3, r2
 8005c48:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005c4c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005c50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005c54:	881b      	ldrh	r3, [r3, #0]
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c5c:	b29a      	uxth	r2, r3
 8005c5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005c62:	801a      	strh	r2, [r3, #0]
 8005c64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	691b      	ldr	r3, [r3, #16]
 8005c70:	2b3e      	cmp	r3, #62	@ 0x3e
 8005c72:	d92b      	bls.n	8005ccc <USB_EPStartXfer+0x1008>
 8005c74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	691b      	ldr	r3, [r3, #16]
 8005c80:	095b      	lsrs	r3, r3, #5
 8005c82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005c86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	691b      	ldr	r3, [r3, #16]
 8005c92:	f003 031f 	and.w	r3, r3, #31
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d104      	bne.n	8005ca4 <USB_EPStartXfer+0xfe0>
 8005c9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c9e:	3b01      	subs	r3, #1
 8005ca0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005ca4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005ca8:	881b      	ldrh	r3, [r3, #0]
 8005caa:	b29a      	uxth	r2, r3
 8005cac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	029b      	lsls	r3, r3, #10
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cc2:	b29a      	uxth	r2, r3
 8005cc4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005cc8:	801a      	strh	r2, [r3, #0]
 8005cca:	e070      	b.n	8005dae <USB_EPStartXfer+0x10ea>
 8005ccc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	691b      	ldr	r3, [r3, #16]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d10c      	bne.n	8005cf6 <USB_EPStartXfer+0x1032>
 8005cdc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005ce0:	881b      	ldrh	r3, [r3, #0]
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ce8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cec:	b29a      	uxth	r2, r3
 8005cee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005cf2:	801a      	strh	r2, [r3, #0]
 8005cf4:	e05b      	b.n	8005dae <USB_EPStartXfer+0x10ea>
 8005cf6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cfa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	085b      	lsrs	r3, r3, #1
 8005d04:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005d08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	691b      	ldr	r3, [r3, #16]
 8005d14:	f003 0301 	and.w	r3, r3, #1
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d004      	beq.n	8005d26 <USB_EPStartXfer+0x1062>
 8005d1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d20:	3301      	adds	r3, #1
 8005d22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005d26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005d2a:	881b      	ldrh	r3, [r3, #0]
 8005d2c:	b29a      	uxth	r2, r3
 8005d2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	029b      	lsls	r3, r3, #10
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	b29a      	uxth	r2, r3
 8005d3c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005d40:	801a      	strh	r2, [r3, #0]
 8005d42:	e034      	b.n	8005dae <USB_EPStartXfer+0x10ea>
 8005d44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	785b      	ldrb	r3, [r3, #1]
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d12c      	bne.n	8005dae <USB_EPStartXfer+0x10ea>
 8005d54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d58:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005d62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	461a      	mov	r2, r3
 8005d74:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005d78:	4413      	add	r3, r2
 8005d7a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005d7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	011a      	lsls	r2, r3, #4
 8005d8c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005d90:	4413      	add	r3, r2
 8005d92:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005d96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005d9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	691b      	ldr	r3, [r3, #16]
 8005da6:	b29a      	uxth	r2, r3
 8005da8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005dac:	801a      	strh	r2, [r3, #0]
 8005dae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005db2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005dbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	785b      	ldrb	r3, [r3, #1]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	f040 809d 	bne.w	8005f08 <USB_EPStartXfer+0x1244>
 8005dce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dd2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005ddc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005de0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	461a      	mov	r2, r3
 8005dee:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005df2:	4413      	add	r3, r2
 8005df4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005df8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	011a      	lsls	r2, r3, #4
 8005e06:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005e0a:	4413      	add	r3, r2
 8005e0c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005e10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005e14:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005e18:	881b      	ldrh	r3, [r3, #0]
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e20:	b29a      	uxth	r2, r3
 8005e22:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005e26:	801a      	strh	r2, [r3, #0]
 8005e28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	691b      	ldr	r3, [r3, #16]
 8005e34:	2b3e      	cmp	r3, #62	@ 0x3e
 8005e36:	d92b      	bls.n	8005e90 <USB_EPStartXfer+0x11cc>
 8005e38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	691b      	ldr	r3, [r3, #16]
 8005e44:	095b      	lsrs	r3, r3, #5
 8005e46:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005e4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	f003 031f 	and.w	r3, r3, #31
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d104      	bne.n	8005e68 <USB_EPStartXfer+0x11a4>
 8005e5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e62:	3b01      	subs	r3, #1
 8005e64:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005e68:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005e6c:	881b      	ldrh	r3, [r3, #0]
 8005e6e:	b29a      	uxth	r2, r3
 8005e70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	029b      	lsls	r3, r3, #10
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e86:	b29a      	uxth	r2, r3
 8005e88:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005e8c:	801a      	strh	r2, [r3, #0]
 8005e8e:	e069      	b.n	8005f64 <USB_EPStartXfer+0x12a0>
 8005e90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	691b      	ldr	r3, [r3, #16]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d10c      	bne.n	8005eba <USB_EPStartXfer+0x11f6>
 8005ea0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005ea4:	881b      	ldrh	r3, [r3, #0]
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005eac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005eb0:	b29a      	uxth	r2, r3
 8005eb2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005eb6:	801a      	strh	r2, [r3, #0]
 8005eb8:	e054      	b.n	8005f64 <USB_EPStartXfer+0x12a0>
 8005eba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ebe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	691b      	ldr	r3, [r3, #16]
 8005ec6:	085b      	lsrs	r3, r3, #1
 8005ec8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005ecc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ed0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	691b      	ldr	r3, [r3, #16]
 8005ed8:	f003 0301 	and.w	r3, r3, #1
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d004      	beq.n	8005eea <USB_EPStartXfer+0x1226>
 8005ee0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ee4:	3301      	adds	r3, #1
 8005ee6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005eea:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005eee:	881b      	ldrh	r3, [r3, #0]
 8005ef0:	b29a      	uxth	r2, r3
 8005ef2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	029b      	lsls	r3, r3, #10
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	4313      	orrs	r3, r2
 8005efe:	b29a      	uxth	r2, r3
 8005f00:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005f04:	801a      	strh	r2, [r3, #0]
 8005f06:	e02d      	b.n	8005f64 <USB_EPStartXfer+0x12a0>
 8005f08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	785b      	ldrb	r3, [r3, #1]
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d125      	bne.n	8005f64 <USB_EPStartXfer+0x12a0>
 8005f18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	461a      	mov	r2, r3
 8005f2a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005f2e:	4413      	add	r3, r2
 8005f30:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005f34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	011a      	lsls	r2, r3, #4
 8005f42:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005f46:	4413      	add	r3, r2
 8005f48:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005f4c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005f50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	691b      	ldr	r3, [r3, #16]
 8005f5c:	b29a      	uxth	r2, r3
 8005f5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005f62:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005f64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	69db      	ldr	r3, [r3, #28]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	f000 8218 	beq.w	80063a6 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005f76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f7a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	4413      	add	r3, r2
 8005f90:	881b      	ldrh	r3, [r3, #0]
 8005f92:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005f96:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005f9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d005      	beq.n	8005fae <USB_EPStartXfer+0x12ea>
 8005fa2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005fa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d10d      	bne.n	8005fca <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005fae:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005fb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	f040 81f5 	bne.w	80063a6 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005fbc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005fc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	f040 81ee 	bne.w	80063a6 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005fca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	4413      	add	r3, r2
 8005fe4:	881b      	ldrh	r3, [r3, #0]
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ff0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8005ff4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ff8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006002:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	441a      	add	r2, r3
 800600e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006012:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006016:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800601a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800601e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006022:	b29b      	uxth	r3, r3
 8006024:	8013      	strh	r3, [r2, #0]
 8006026:	e1be      	b.n	80063a6 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006028:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800602c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	78db      	ldrb	r3, [r3, #3]
 8006034:	2b01      	cmp	r3, #1
 8006036:	f040 81b4 	bne.w	80063a2 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800603a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800603e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	699a      	ldr	r2, [r3, #24]
 8006046:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800604a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	429a      	cmp	r2, r3
 8006054:	d917      	bls.n	8006086 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8006056:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800605a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8006066:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800606a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	699a      	ldr	r2, [r3, #24]
 8006072:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006076:	1ad2      	subs	r2, r2, r3
 8006078:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800607c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	619a      	str	r2, [r3, #24]
 8006084:	e00e      	b.n	80060a4 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8006086:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800608a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	699b      	ldr	r3, [r3, #24]
 8006092:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8006096:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800609a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	2200      	movs	r2, #0
 80060a2:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80060a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	785b      	ldrb	r3, [r3, #1]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	f040 8085 	bne.w	80061c0 <USB_EPStartXfer+0x14fc>
 80060b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80060c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	461a      	mov	r2, r3
 80060d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80060da:	4413      	add	r3, r2
 80060dc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80060e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	011a      	lsls	r2, r3, #4
 80060ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80060f2:	4413      	add	r3, r2
 80060f4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80060f8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80060fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006100:	881b      	ldrh	r3, [r3, #0]
 8006102:	b29b      	uxth	r3, r3
 8006104:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006108:	b29a      	uxth	r2, r3
 800610a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800610e:	801a      	strh	r2, [r3, #0]
 8006110:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006114:	2b3e      	cmp	r3, #62	@ 0x3e
 8006116:	d923      	bls.n	8006160 <USB_EPStartXfer+0x149c>
 8006118:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800611c:	095b      	lsrs	r3, r3, #5
 800611e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006122:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006126:	f003 031f 	and.w	r3, r3, #31
 800612a:	2b00      	cmp	r3, #0
 800612c:	d104      	bne.n	8006138 <USB_EPStartXfer+0x1474>
 800612e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006132:	3b01      	subs	r3, #1
 8006134:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006138:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800613c:	881b      	ldrh	r3, [r3, #0]
 800613e:	b29a      	uxth	r2, r3
 8006140:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006144:	b29b      	uxth	r3, r3
 8006146:	029b      	lsls	r3, r3, #10
 8006148:	b29b      	uxth	r3, r3
 800614a:	4313      	orrs	r3, r2
 800614c:	b29b      	uxth	r3, r3
 800614e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006152:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006156:	b29a      	uxth	r2, r3
 8006158:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800615c:	801a      	strh	r2, [r3, #0]
 800615e:	e060      	b.n	8006222 <USB_EPStartXfer+0x155e>
 8006160:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006164:	2b00      	cmp	r3, #0
 8006166:	d10c      	bne.n	8006182 <USB_EPStartXfer+0x14be>
 8006168:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800616c:	881b      	ldrh	r3, [r3, #0]
 800616e:	b29b      	uxth	r3, r3
 8006170:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006174:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006178:	b29a      	uxth	r2, r3
 800617a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800617e:	801a      	strh	r2, [r3, #0]
 8006180:	e04f      	b.n	8006222 <USB_EPStartXfer+0x155e>
 8006182:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006186:	085b      	lsrs	r3, r3, #1
 8006188:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800618c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006190:	f003 0301 	and.w	r3, r3, #1
 8006194:	2b00      	cmp	r3, #0
 8006196:	d004      	beq.n	80061a2 <USB_EPStartXfer+0x14de>
 8006198:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800619c:	3301      	adds	r3, #1
 800619e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80061a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80061a6:	881b      	ldrh	r3, [r3, #0]
 80061a8:	b29a      	uxth	r2, r3
 80061aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	029b      	lsls	r3, r3, #10
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	4313      	orrs	r3, r2
 80061b6:	b29a      	uxth	r2, r3
 80061b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80061bc:	801a      	strh	r2, [r3, #0]
 80061be:	e030      	b.n	8006222 <USB_EPStartXfer+0x155e>
 80061c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	785b      	ldrb	r3, [r3, #1]
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d128      	bne.n	8006222 <USB_EPStartXfer+0x155e>
 80061d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80061de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	461a      	mov	r2, r3
 80061f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80061f4:	4413      	add	r3, r2
 80061f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80061fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	011a      	lsls	r2, r3, #4
 8006208:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800620c:	4413      	add	r3, r2
 800620e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006212:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006216:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800621a:	b29a      	uxth	r2, r3
 800621c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006220:	801a      	strh	r2, [r3, #0]
 8006222:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006226:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006230:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006234:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	785b      	ldrb	r3, [r3, #1]
 800623c:	2b00      	cmp	r3, #0
 800623e:	f040 8085 	bne.w	800634c <USB_EPStartXfer+0x1688>
 8006242:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006246:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006250:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006254:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800625e:	b29b      	uxth	r3, r3
 8006260:	461a      	mov	r2, r3
 8006262:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006266:	4413      	add	r3, r2
 8006268:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800626c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006270:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	011a      	lsls	r2, r3, #4
 800627a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800627e:	4413      	add	r3, r2
 8006280:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006284:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006288:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800628c:	881b      	ldrh	r3, [r3, #0]
 800628e:	b29b      	uxth	r3, r3
 8006290:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006294:	b29a      	uxth	r2, r3
 8006296:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800629a:	801a      	strh	r2, [r3, #0]
 800629c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062a0:	2b3e      	cmp	r3, #62	@ 0x3e
 80062a2:	d923      	bls.n	80062ec <USB_EPStartXfer+0x1628>
 80062a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062a8:	095b      	lsrs	r3, r3, #5
 80062aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80062ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062b2:	f003 031f 	and.w	r3, r3, #31
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d104      	bne.n	80062c4 <USB_EPStartXfer+0x1600>
 80062ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80062be:	3b01      	subs	r3, #1
 80062c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80062c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80062c8:	881b      	ldrh	r3, [r3, #0]
 80062ca:	b29a      	uxth	r2, r3
 80062cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	029b      	lsls	r3, r3, #10
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	4313      	orrs	r3, r2
 80062d8:	b29b      	uxth	r3, r3
 80062da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062e2:	b29a      	uxth	r2, r3
 80062e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80062e8:	801a      	strh	r2, [r3, #0]
 80062ea:	e05c      	b.n	80063a6 <USB_EPStartXfer+0x16e2>
 80062ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d10c      	bne.n	800630e <USB_EPStartXfer+0x164a>
 80062f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80062f8:	881b      	ldrh	r3, [r3, #0]
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006300:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006304:	b29a      	uxth	r2, r3
 8006306:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800630a:	801a      	strh	r2, [r3, #0]
 800630c:	e04b      	b.n	80063a6 <USB_EPStartXfer+0x16e2>
 800630e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006312:	085b      	lsrs	r3, r3, #1
 8006314:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006318:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800631c:	f003 0301 	and.w	r3, r3, #1
 8006320:	2b00      	cmp	r3, #0
 8006322:	d004      	beq.n	800632e <USB_EPStartXfer+0x166a>
 8006324:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006328:	3301      	adds	r3, #1
 800632a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800632e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006332:	881b      	ldrh	r3, [r3, #0]
 8006334:	b29a      	uxth	r2, r3
 8006336:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800633a:	b29b      	uxth	r3, r3
 800633c:	029b      	lsls	r3, r3, #10
 800633e:	b29b      	uxth	r3, r3
 8006340:	4313      	orrs	r3, r2
 8006342:	b29a      	uxth	r2, r3
 8006344:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006348:	801a      	strh	r2, [r3, #0]
 800634a:	e02c      	b.n	80063a6 <USB_EPStartXfer+0x16e2>
 800634c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006350:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	785b      	ldrb	r3, [r3, #1]
 8006358:	2b01      	cmp	r3, #1
 800635a:	d124      	bne.n	80063a6 <USB_EPStartXfer+0x16e2>
 800635c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006360:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800636a:	b29b      	uxth	r3, r3
 800636c:	461a      	mov	r2, r3
 800636e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006372:	4413      	add	r3, r2
 8006374:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006378:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800637c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	011a      	lsls	r2, r3, #4
 8006386:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800638a:	4413      	add	r3, r2
 800638c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006390:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006394:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006398:	b29a      	uxth	r2, r3
 800639a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800639e:	801a      	strh	r2, [r3, #0]
 80063a0:	e001      	b.n	80063a6 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	e03a      	b.n	800641c <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80063a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063ae:	681a      	ldr	r2, [r3, #0]
 80063b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	4413      	add	r3, r2
 80063c0:	881b      	ldrh	r3, [r3, #0]
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80063c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063cc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80063d0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80063d4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80063d8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80063dc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80063e0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80063e4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80063e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	009b      	lsls	r3, r3, #2
 8006400:	441a      	add	r2, r3
 8006402:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006406:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800640a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800640e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006412:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006416:	b29b      	uxth	r3, r3
 8006418:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800641a:	2300      	movs	r3, #0
}
 800641c:	4618      	mov	r0, r3
 800641e:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}

08006426 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006426:	b480      	push	{r7}
 8006428:	b085      	sub	sp, #20
 800642a:	af00      	add	r7, sp, #0
 800642c:	6078      	str	r0, [r7, #4]
 800642e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	785b      	ldrb	r3, [r3, #1]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d020      	beq.n	800647a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	009b      	lsls	r3, r3, #2
 8006440:	4413      	add	r3, r2
 8006442:	881b      	ldrh	r3, [r3, #0]
 8006444:	b29b      	uxth	r3, r3
 8006446:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800644a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800644e:	81bb      	strh	r3, [r7, #12]
 8006450:	89bb      	ldrh	r3, [r7, #12]
 8006452:	f083 0310 	eor.w	r3, r3, #16
 8006456:	81bb      	strh	r3, [r7, #12]
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	441a      	add	r2, r3
 8006462:	89bb      	ldrh	r3, [r7, #12]
 8006464:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006468:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800646c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006470:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006474:	b29b      	uxth	r3, r3
 8006476:	8013      	strh	r3, [r2, #0]
 8006478:	e01f      	b.n	80064ba <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800647a:	687a      	ldr	r2, [r7, #4]
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	009b      	lsls	r3, r3, #2
 8006482:	4413      	add	r3, r2
 8006484:	881b      	ldrh	r3, [r3, #0]
 8006486:	b29b      	uxth	r3, r3
 8006488:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800648c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006490:	81fb      	strh	r3, [r7, #14]
 8006492:	89fb      	ldrh	r3, [r7, #14]
 8006494:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006498:	81fb      	strh	r3, [r7, #14]
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	441a      	add	r2, r3
 80064a4:	89fb      	ldrh	r3, [r7, #14]
 80064a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80064ba:	2300      	movs	r3, #0
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3714      	adds	r7, #20
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bc80      	pop	{r7}
 80064c4:	4770      	bx	lr

080064c6 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80064c6:	b480      	push	{r7}
 80064c8:	b087      	sub	sp, #28
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	6078      	str	r0, [r7, #4]
 80064ce:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	7b1b      	ldrb	r3, [r3, #12]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	f040 809d 	bne.w	8006614 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	785b      	ldrb	r3, [r3, #1]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d04c      	beq.n	800657c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	009b      	lsls	r3, r3, #2
 80064ea:	4413      	add	r3, r2
 80064ec:	881b      	ldrh	r3, [r3, #0]
 80064ee:	823b      	strh	r3, [r7, #16]
 80064f0:	8a3b      	ldrh	r3, [r7, #16]
 80064f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d01b      	beq.n	8006532 <USB_EPClearStall+0x6c>
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	4413      	add	r3, r2
 8006504:	881b      	ldrh	r3, [r3, #0]
 8006506:	b29b      	uxth	r3, r3
 8006508:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800650c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006510:	81fb      	strh	r3, [r7, #14]
 8006512:	687a      	ldr	r2, [r7, #4]
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	781b      	ldrb	r3, [r3, #0]
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	441a      	add	r2, r3
 800651c:	89fb      	ldrh	r3, [r7, #14]
 800651e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006522:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006526:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800652a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800652e:	b29b      	uxth	r3, r3
 8006530:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	78db      	ldrb	r3, [r3, #3]
 8006536:	2b01      	cmp	r3, #1
 8006538:	d06c      	beq.n	8006614 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	781b      	ldrb	r3, [r3, #0]
 8006540:	009b      	lsls	r3, r3, #2
 8006542:	4413      	add	r3, r2
 8006544:	881b      	ldrh	r3, [r3, #0]
 8006546:	b29b      	uxth	r3, r3
 8006548:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800654c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006550:	81bb      	strh	r3, [r7, #12]
 8006552:	89bb      	ldrh	r3, [r7, #12]
 8006554:	f083 0320 	eor.w	r3, r3, #32
 8006558:	81bb      	strh	r3, [r7, #12]
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	441a      	add	r2, r3
 8006564:	89bb      	ldrh	r3, [r7, #12]
 8006566:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800656a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800656e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006572:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006576:	b29b      	uxth	r3, r3
 8006578:	8013      	strh	r3, [r2, #0]
 800657a:	e04b      	b.n	8006614 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	4413      	add	r3, r2
 8006586:	881b      	ldrh	r3, [r3, #0]
 8006588:	82fb      	strh	r3, [r7, #22]
 800658a:	8afb      	ldrh	r3, [r7, #22]
 800658c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006590:	2b00      	cmp	r3, #0
 8006592:	d01b      	beq.n	80065cc <USB_EPClearStall+0x106>
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	4413      	add	r3, r2
 800659e:	881b      	ldrh	r3, [r3, #0]
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065aa:	82bb      	strh	r3, [r7, #20]
 80065ac:	687a      	ldr	r2, [r7, #4]
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	781b      	ldrb	r3, [r3, #0]
 80065b2:	009b      	lsls	r3, r3, #2
 80065b4:	441a      	add	r2, r3
 80065b6:	8abb      	ldrh	r3, [r7, #20]
 80065b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80065c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	781b      	ldrb	r3, [r3, #0]
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	4413      	add	r3, r2
 80065d6:	881b      	ldrh	r3, [r3, #0]
 80065d8:	b29b      	uxth	r3, r3
 80065da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80065de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065e2:	827b      	strh	r3, [r7, #18]
 80065e4:	8a7b      	ldrh	r3, [r7, #18]
 80065e6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80065ea:	827b      	strh	r3, [r7, #18]
 80065ec:	8a7b      	ldrh	r3, [r7, #18]
 80065ee:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80065f2:	827b      	strh	r3, [r7, #18]
 80065f4:	687a      	ldr	r2, [r7, #4]
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	441a      	add	r2, r3
 80065fe:	8a7b      	ldrh	r3, [r7, #18]
 8006600:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006604:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006608:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800660c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006610:	b29b      	uxth	r3, r3
 8006612:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	371c      	adds	r7, #28
 800661a:	46bd      	mov	sp, r7
 800661c:	bc80      	pop	{r7}
 800661e:	4770      	bx	lr

08006620 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	460b      	mov	r3, r1
 800662a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800662c:	78fb      	ldrb	r3, [r7, #3]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d103      	bne.n	800663a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2280      	movs	r2, #128	@ 0x80
 8006636:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800663a:	2300      	movs	r3, #0
}
 800663c:	4618      	mov	r0, r3
 800663e:	370c      	adds	r7, #12
 8006640:	46bd      	mov	sp, r7
 8006642:	bc80      	pop	{r7}
 8006644:	4770      	bx	lr

08006646 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006646:	b480      	push	{r7}
 8006648:	b083      	sub	sp, #12
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800664e:	2300      	movs	r3, #0
}
 8006650:	4618      	mov	r0, r3
 8006652:	370c      	adds	r7, #12
 8006654:	46bd      	mov	sp, r7
 8006656:	bc80      	pop	{r7}
 8006658:	4770      	bx	lr

0800665a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800665a:	b480      	push	{r7}
 800665c:	b083      	sub	sp, #12
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006662:	2300      	movs	r3, #0
}
 8006664:	4618      	mov	r0, r3
 8006666:	370c      	adds	r7, #12
 8006668:	46bd      	mov	sp, r7
 800666a:	bc80      	pop	{r7}
 800666c:	4770      	bx	lr

0800666e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800666e:	b480      	push	{r7}
 8006670:	b085      	sub	sp, #20
 8006672:	af00      	add	r7, sp, #0
 8006674:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800667c:	b29b      	uxth	r3, r3
 800667e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006680:	68fb      	ldr	r3, [r7, #12]
}
 8006682:	4618      	mov	r0, r3
 8006684:	3714      	adds	r7, #20
 8006686:	46bd      	mov	sp, r7
 8006688:	bc80      	pop	{r7}
 800668a:	4770      	bx	lr

0800668c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006696:	2300      	movs	r3, #0
}
 8006698:	4618      	mov	r0, r3
 800669a:	370c      	adds	r7, #12
 800669c:	46bd      	mov	sp, r7
 800669e:	bc80      	pop	{r7}
 80066a0:	4770      	bx	lr

080066a2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80066a2:	b480      	push	{r7}
 80066a4:	b08b      	sub	sp, #44	@ 0x2c
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	60f8      	str	r0, [r7, #12]
 80066aa:	60b9      	str	r1, [r7, #8]
 80066ac:	4611      	mov	r1, r2
 80066ae:	461a      	mov	r2, r3
 80066b0:	460b      	mov	r3, r1
 80066b2:	80fb      	strh	r3, [r7, #6]
 80066b4:	4613      	mov	r3, r2
 80066b6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80066b8:	88bb      	ldrh	r3, [r7, #4]
 80066ba:	3301      	adds	r3, #1
 80066bc:	085b      	lsrs	r3, r3, #1
 80066be:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80066c8:	88fb      	ldrh	r3, [r7, #6]
 80066ca:	005a      	lsls	r2, r3, #1
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	4413      	add	r3, r2
 80066d0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80066d4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80066d6:	69bb      	ldr	r3, [r7, #24]
 80066d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80066da:	e01f      	b.n	800671c <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 80066dc:	69fb      	ldr	r3, [r7, #28]
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	3301      	adds	r3, #1
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	b21b      	sxth	r3, r3
 80066ea:	021b      	lsls	r3, r3, #8
 80066ec:	b21a      	sxth	r2, r3
 80066ee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	b21b      	sxth	r3, r3
 80066f6:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80066f8:	6a3b      	ldr	r3, [r7, #32]
 80066fa:	8a7a      	ldrh	r2, [r7, #18]
 80066fc:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80066fe:	6a3b      	ldr	r3, [r7, #32]
 8006700:	3302      	adds	r3, #2
 8006702:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006704:	6a3b      	ldr	r3, [r7, #32]
 8006706:	3302      	adds	r3, #2
 8006708:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800670a:	69fb      	ldr	r3, [r7, #28]
 800670c:	3301      	adds	r3, #1
 800670e:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006710:	69fb      	ldr	r3, [r7, #28]
 8006712:	3301      	adds	r3, #1
 8006714:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006718:	3b01      	subs	r3, #1
 800671a:	627b      	str	r3, [r7, #36]	@ 0x24
 800671c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800671e:	2b00      	cmp	r3, #0
 8006720:	d1dc      	bne.n	80066dc <USB_WritePMA+0x3a>
  }
}
 8006722:	bf00      	nop
 8006724:	bf00      	nop
 8006726:	372c      	adds	r7, #44	@ 0x2c
 8006728:	46bd      	mov	sp, r7
 800672a:	bc80      	pop	{r7}
 800672c:	4770      	bx	lr

0800672e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800672e:	b480      	push	{r7}
 8006730:	b08b      	sub	sp, #44	@ 0x2c
 8006732:	af00      	add	r7, sp, #0
 8006734:	60f8      	str	r0, [r7, #12]
 8006736:	60b9      	str	r1, [r7, #8]
 8006738:	4611      	mov	r1, r2
 800673a:	461a      	mov	r2, r3
 800673c:	460b      	mov	r3, r1
 800673e:	80fb      	strh	r3, [r7, #6]
 8006740:	4613      	mov	r3, r2
 8006742:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006744:	88bb      	ldrh	r3, [r7, #4]
 8006746:	085b      	lsrs	r3, r3, #1
 8006748:	b29b      	uxth	r3, r3
 800674a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006754:	88fb      	ldrh	r3, [r7, #6]
 8006756:	005a      	lsls	r2, r3, #1
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	4413      	add	r3, r2
 800675c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006760:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006762:	69bb      	ldr	r3, [r7, #24]
 8006764:	627b      	str	r3, [r7, #36]	@ 0x24
 8006766:	e01b      	b.n	80067a0 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006768:	6a3b      	ldr	r3, [r7, #32]
 800676a:	881b      	ldrh	r3, [r3, #0]
 800676c:	b29b      	uxth	r3, r3
 800676e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006770:	6a3b      	ldr	r3, [r7, #32]
 8006772:	3302      	adds	r3, #2
 8006774:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	b2da      	uxtb	r2, r3
 800677a:	69fb      	ldr	r3, [r7, #28]
 800677c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800677e:	69fb      	ldr	r3, [r7, #28]
 8006780:	3301      	adds	r3, #1
 8006782:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	0a1b      	lsrs	r3, r3, #8
 8006788:	b2da      	uxtb	r2, r3
 800678a:	69fb      	ldr	r3, [r7, #28]
 800678c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800678e:	69fb      	ldr	r3, [r7, #28]
 8006790:	3301      	adds	r3, #1
 8006792:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006794:	6a3b      	ldr	r3, [r7, #32]
 8006796:	3302      	adds	r3, #2
 8006798:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800679a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800679c:	3b01      	subs	r3, #1
 800679e:	627b      	str	r3, [r7, #36]	@ 0x24
 80067a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d1e0      	bne.n	8006768 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80067a6:	88bb      	ldrh	r3, [r7, #4]
 80067a8:	f003 0301 	and.w	r3, r3, #1
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d007      	beq.n	80067c2 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80067b2:	6a3b      	ldr	r3, [r7, #32]
 80067b4:	881b      	ldrh	r3, [r3, #0]
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	b2da      	uxtb	r2, r3
 80067be:	69fb      	ldr	r3, [r7, #28]
 80067c0:	701a      	strb	r2, [r3, #0]
  }
}
 80067c2:	bf00      	nop
 80067c4:	372c      	adds	r7, #44	@ 0x2c
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bc80      	pop	{r7}
 80067ca:	4770      	bx	lr

080067cc <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b082      	sub	sp, #8
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	460b      	mov	r3, r1
 80067d6:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80067d8:	2304      	movs	r3, #4
 80067da:	2203      	movs	r2, #3
 80067dc:	2181      	movs	r1, #129	@ 0x81
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f001 fc5d 	bl	800809e <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2201      	movs	r2, #1
 80067e8:	62da      	str	r2, [r3, #44]	@ 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80067ea:	2010      	movs	r0, #16
 80067ec:	f001 fd6a 	bl	80082c4 <USBD_static_malloc>
 80067f0:	4602      	mov	r2, r0
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d101      	bne.n	8006806 <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 8006802:	2302      	movs	r3, #2
 8006804:	e005      	b.n	8006812 <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800680c:	2200      	movs	r2, #0
 800680e:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 8006810:	2300      	movs	r3, #0
}
 8006812:	4618      	mov	r0, r3
 8006814:	3708      	adds	r7, #8
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}

0800681a <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 800681a:	b580      	push	{r7, lr}
 800681c:	b082      	sub	sp, #8
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
 8006822:	460b      	mov	r3, r1
 8006824:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8006826:	2181      	movs	r1, #129	@ 0x81
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f001 fc5e 	bl	80080ea <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800683a:	2b00      	cmp	r3, #0
 800683c:	d009      	beq.n	8006852 <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006844:	4618      	mov	r0, r3
 8006846:	f001 fd49 	bl	80082dc <USBD_static_free>
    pdev->pClassData = NULL;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return USBD_OK;
 8006852:	2300      	movs	r3, #0
}
 8006854:	4618      	mov	r0, r3
 8006856:	3708      	adds	r7, #8
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b088      	sub	sp, #32
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800686c:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800686e:	2300      	movs	r3, #0
 8006870:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 8006872:	2300      	movs	r3, #0
 8006874:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8006876:	2300      	movs	r3, #0
 8006878:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800687a:	2300      	movs	r3, #0
 800687c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	781b      	ldrb	r3, [r3, #0]
 8006882:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006886:	2b00      	cmp	r3, #0
 8006888:	d045      	beq.n	8006916 <USBD_HID_Setup+0xba>
 800688a:	2b20      	cmp	r3, #32
 800688c:	f040 80d3 	bne.w	8006a36 <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	785b      	ldrb	r3, [r3, #1]
 8006894:	3b02      	subs	r3, #2
 8006896:	2b09      	cmp	r3, #9
 8006898:	d835      	bhi.n	8006906 <USBD_HID_Setup+0xaa>
 800689a:	a201      	add	r2, pc, #4	@ (adr r2, 80068a0 <USBD_HID_Setup+0x44>)
 800689c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068a0:	080068f7 	.word	0x080068f7
 80068a4:	080068d7 	.word	0x080068d7
 80068a8:	08006907 	.word	0x08006907
 80068ac:	08006907 	.word	0x08006907
 80068b0:	08006907 	.word	0x08006907
 80068b4:	08006907 	.word	0x08006907
 80068b8:	08006907 	.word	0x08006907
 80068bc:	08006907 	.word	0x08006907
 80068c0:	080068e5 	.word	0x080068e5
 80068c4:	080068c9 	.word	0x080068c9
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	885b      	ldrh	r3, [r3, #2]
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	461a      	mov	r2, r3
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	601a      	str	r2, [r3, #0]
          break;
 80068d4:	e01e      	b.n	8006914 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	2201      	movs	r2, #1
 80068da:	4619      	mov	r1, r3
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f001 f91f 	bl	8007b20 <USBD_CtlSendData>
          break;
 80068e2:	e017      	b.n	8006914 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	885b      	ldrh	r3, [r3, #2]
 80068e8:	0a1b      	lsrs	r3, r3, #8
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	461a      	mov	r2, r3
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	605a      	str	r2, [r3, #4]
          break;
 80068f4:	e00e      	b.n	8006914 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	3304      	adds	r3, #4
 80068fa:	2201      	movs	r2, #1
 80068fc:	4619      	mov	r1, r3
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f001 f90e 	bl	8007b20 <USBD_CtlSendData>
          break;
 8006904:	e006      	b.n	8006914 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 8006906:	6839      	ldr	r1, [r7, #0]
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f001 f89f 	bl	8007a4c <USBD_CtlError>
          ret = USBD_FAIL;
 800690e:	2302      	movs	r3, #2
 8006910:	75fb      	strb	r3, [r7, #23]
          break;
 8006912:	bf00      	nop
      }
      break;
 8006914:	e096      	b.n	8006a44 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	785b      	ldrb	r3, [r3, #1]
 800691a:	2b0b      	cmp	r3, #11
 800691c:	f200 8083 	bhi.w	8006a26 <USBD_HID_Setup+0x1ca>
 8006920:	a201      	add	r2, pc, #4	@ (adr r2, 8006928 <USBD_HID_Setup+0xcc>)
 8006922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006926:	bf00      	nop
 8006928:	08006959 	.word	0x08006959
 800692c:	08006a27 	.word	0x08006a27
 8006930:	08006a27 	.word	0x08006a27
 8006934:	08006a27 	.word	0x08006a27
 8006938:	08006a27 	.word	0x08006a27
 800693c:	08006a27 	.word	0x08006a27
 8006940:	08006981 	.word	0x08006981
 8006944:	08006a27 	.word	0x08006a27
 8006948:	08006a27 	.word	0x08006a27
 800694c:	08006a27 	.word	0x08006a27
 8006950:	080069d9 	.word	0x080069d9
 8006954:	08006a01 	.word	0x08006a01
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800695e:	2b03      	cmp	r3, #3
 8006960:	d107      	bne.n	8006972 <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006962:	f107 030e 	add.w	r3, r7, #14
 8006966:	2202      	movs	r2, #2
 8006968:	4619      	mov	r1, r3
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f001 f8d8 	bl	8007b20 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006970:	e060      	b.n	8006a34 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8006972:	6839      	ldr	r1, [r7, #0]
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f001 f869 	bl	8007a4c <USBD_CtlError>
            ret = USBD_FAIL;
 800697a:	2302      	movs	r3, #2
 800697c:	75fb      	strb	r3, [r7, #23]
          break;
 800697e:	e059      	b.n	8006a34 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	885b      	ldrh	r3, [r3, #2]
 8006984:	0a1b      	lsrs	r3, r3, #8
 8006986:	b29b      	uxth	r3, r3
 8006988:	2b22      	cmp	r3, #34	@ 0x22
 800698a:	d108      	bne.n	800699e <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	88db      	ldrh	r3, [r3, #6]
 8006990:	2b4a      	cmp	r3, #74	@ 0x4a
 8006992:	bf28      	it	cs
 8006994:	234a      	movcs	r3, #74	@ 0x4a
 8006996:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 8006998:	4b2d      	ldr	r3, [pc, #180]	@ (8006a50 <USBD_HID_Setup+0x1f4>)
 800699a:	61bb      	str	r3, [r7, #24]
 800699c:	e015      	b.n	80069ca <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	885b      	ldrh	r3, [r3, #2]
 80069a2:	0a1b      	lsrs	r3, r3, #8
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	2b21      	cmp	r3, #33	@ 0x21
 80069a8:	d108      	bne.n	80069bc <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 80069aa:	4b2a      	ldr	r3, [pc, #168]	@ (8006a54 <USBD_HID_Setup+0x1f8>)
 80069ac:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	88db      	ldrh	r3, [r3, #6]
 80069b2:	2b09      	cmp	r3, #9
 80069b4:	bf28      	it	cs
 80069b6:	2309      	movcs	r3, #9
 80069b8:	83fb      	strh	r3, [r7, #30]
 80069ba:	e006      	b.n	80069ca <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 80069bc:	6839      	ldr	r1, [r7, #0]
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f001 f844 	bl	8007a4c <USBD_CtlError>
            ret = USBD_FAIL;
 80069c4:	2302      	movs	r3, #2
 80069c6:	75fb      	strb	r3, [r7, #23]
            break;
 80069c8:	e034      	b.n	8006a34 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 80069ca:	8bfb      	ldrh	r3, [r7, #30]
 80069cc:	461a      	mov	r2, r3
 80069ce:	69b9      	ldr	r1, [r7, #24]
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f001 f8a5 	bl	8007b20 <USBD_CtlSendData>
          break;
 80069d6:	e02d      	b.n	8006a34 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80069de:	2b03      	cmp	r3, #3
 80069e0:	d107      	bne.n	80069f2 <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	3308      	adds	r3, #8
 80069e6:	2201      	movs	r2, #1
 80069e8:	4619      	mov	r1, r3
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f001 f898 	bl	8007b20 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80069f0:	e020      	b.n	8006a34 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 80069f2:	6839      	ldr	r1, [r7, #0]
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f001 f829 	bl	8007a4c <USBD_CtlError>
            ret = USBD_FAIL;
 80069fa:	2302      	movs	r3, #2
 80069fc:	75fb      	strb	r3, [r7, #23]
          break;
 80069fe:	e019      	b.n	8006a34 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a06:	2b03      	cmp	r3, #3
 8006a08:	d106      	bne.n	8006a18 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	885b      	ldrh	r3, [r3, #2]
 8006a0e:	b2db      	uxtb	r3, r3
 8006a10:	461a      	mov	r2, r3
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a16:	e00d      	b.n	8006a34 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8006a18:	6839      	ldr	r1, [r7, #0]
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f001 f816 	bl	8007a4c <USBD_CtlError>
            ret = USBD_FAIL;
 8006a20:	2302      	movs	r3, #2
 8006a22:	75fb      	strb	r3, [r7, #23]
          break;
 8006a24:	e006      	b.n	8006a34 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 8006a26:	6839      	ldr	r1, [r7, #0]
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f001 f80f 	bl	8007a4c <USBD_CtlError>
          ret = USBD_FAIL;
 8006a2e:	2302      	movs	r3, #2
 8006a30:	75fb      	strb	r3, [r7, #23]
          break;
 8006a32:	bf00      	nop
      }
      break;
 8006a34:	e006      	b.n	8006a44 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 8006a36:	6839      	ldr	r1, [r7, #0]
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f001 f807 	bl	8007a4c <USBD_CtlError>
      ret = USBD_FAIL;
 8006a3e:	2302      	movs	r3, #2
 8006a40:	75fb      	strb	r3, [r7, #23]
      break;
 8006a42:	bf00      	nop
  }

  return ret;
 8006a44:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3720      	adds	r7, #32
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}
 8006a4e:	bf00      	nop
 8006a50:	200000c8 	.word	0x200000c8
 8006a54:	200000b0 	.word	0x200000b0

08006a58 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b083      	sub	sp, #12
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2222      	movs	r2, #34	@ 0x22
 8006a64:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8006a66:	4b03      	ldr	r3, [pc, #12]	@ (8006a74 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	370c      	adds	r7, #12
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bc80      	pop	{r7}
 8006a70:	4770      	bx	lr
 8006a72:	bf00      	nop
 8006a74:	20000044 	.word	0x20000044

08006a78 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b083      	sub	sp, #12
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2222      	movs	r2, #34	@ 0x22
 8006a84:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8006a86:	4b03      	ldr	r3, [pc, #12]	@ (8006a94 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	370c      	adds	r7, #12
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bc80      	pop	{r7}
 8006a90:	4770      	bx	lr
 8006a92:	bf00      	nop
 8006a94:	20000068 	.word	0x20000068

08006a98 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b083      	sub	sp, #12
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2222      	movs	r2, #34	@ 0x22
 8006aa4:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8006aa6:	4b03      	ldr	r3, [pc, #12]	@ (8006ab4 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	370c      	adds	r7, #12
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bc80      	pop	{r7}
 8006ab0:	4770      	bx	lr
 8006ab2:	bf00      	nop
 8006ab4:	2000008c 	.word	0x2000008c

08006ab8 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b083      	sub	sp, #12
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	460b      	mov	r3, r1
 8006ac2:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006aca:	2200      	movs	r2, #0
 8006acc:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8006ace:	2300      	movs	r3, #0
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	370c      	adds	r7, #12
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bc80      	pop	{r7}
 8006ad8:	4770      	bx	lr
	...

08006adc <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b083      	sub	sp, #12
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	220a      	movs	r2, #10
 8006ae8:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8006aea:	4b03      	ldr	r3, [pc, #12]	@ (8006af8 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	370c      	adds	r7, #12
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bc80      	pop	{r7}
 8006af4:	4770      	bx	lr
 8006af6:	bf00      	nop
 8006af8:	200000bc 	.word	0x200000bc

08006afc <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b084      	sub	sp, #16
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	60f8      	str	r0, [r7, #12]
 8006b04:	60b9      	str	r1, [r7, #8]
 8006b06:	4613      	mov	r3, r2
 8006b08:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d101      	bne.n	8006b14 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006b10:	2302      	movs	r3, #2
 8006b12:	e01a      	b.n	8006b4a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d003      	beq.n	8006b26 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2200      	movs	r2, #0
 8006b22:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d003      	beq.n	8006b34 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	68ba      	ldr	r2, [r7, #8]
 8006b30:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2201      	movs	r2, #1
 8006b38:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	79fa      	ldrb	r2, [r7, #7]
 8006b40:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006b42:	68f8      	ldr	r0, [r7, #12]
 8006b44:	f001 fa48 	bl	8007fd8 <USBD_LL_Init>

  return USBD_OK;
 8006b48:	2300      	movs	r3, #0
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3710      	adds	r7, #16
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}

08006b52 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006b52:	b480      	push	{r7}
 8006b54:	b085      	sub	sp, #20
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	6078      	str	r0, [r7, #4]
 8006b5a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d006      	beq.n	8006b74 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	683a      	ldr	r2, [r7, #0]
 8006b6a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	73fb      	strb	r3, [r7, #15]
 8006b72:	e001      	b.n	8006b78 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006b74:	2302      	movs	r3, #2
 8006b76:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3714      	adds	r7, #20
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bc80      	pop	{r7}
 8006b82:	4770      	bx	lr

08006b84 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b082      	sub	sp, #8
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f001 fa6b 	bl	8008068 <USBD_LL_Start>

  return USBD_OK;
 8006b92:	2300      	movs	r3, #0
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3708      	adds	r7, #8
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b083      	sub	sp, #12
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006ba4:	2300      	movs	r3, #0
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	370c      	adds	r7, #12
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bc80      	pop	{r7}
 8006bae:	4770      	bx	lr

08006bb0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b084      	sub	sp, #16
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	460b      	mov	r3, r1
 8006bba:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006bbc:	2302      	movs	r3, #2
 8006bbe:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d00c      	beq.n	8006be4 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	78fa      	ldrb	r2, [r7, #3]
 8006bd4:	4611      	mov	r1, r2
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	4798      	blx	r3
 8006bda:	4603      	mov	r3, r0
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d101      	bne.n	8006be4 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006be0:	2300      	movs	r3, #0
 8006be2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3710      	adds	r7, #16
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}

08006bee <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006bee:	b580      	push	{r7, lr}
 8006bf0:	b082      	sub	sp, #8
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	6078      	str	r0, [r7, #4]
 8006bf6:	460b      	mov	r3, r1
 8006bf8:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	78fa      	ldrb	r2, [r7, #3]
 8006c04:	4611      	mov	r1, r2
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	4798      	blx	r3

  return USBD_OK;
 8006c0a:	2300      	movs	r3, #0
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3708      	adds	r7, #8
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b082      	sub	sp, #8
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006c24:	6839      	ldr	r1, [r7, #0]
 8006c26:	4618      	mov	r0, r3
 8006c28:	f000 fed7 	bl	80079da <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8006c48:	f003 031f 	and.w	r3, r3, #31
 8006c4c:	2b02      	cmp	r3, #2
 8006c4e:	d016      	beq.n	8006c7e <USBD_LL_SetupStage+0x6a>
 8006c50:	2b02      	cmp	r3, #2
 8006c52:	d81c      	bhi.n	8006c8e <USBD_LL_SetupStage+0x7a>
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d002      	beq.n	8006c5e <USBD_LL_SetupStage+0x4a>
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d008      	beq.n	8006c6e <USBD_LL_SetupStage+0x5a>
 8006c5c:	e017      	b.n	8006c8e <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006c64:	4619      	mov	r1, r3
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 f9ca 	bl	8007000 <USBD_StdDevReq>
      break;
 8006c6c:	e01a      	b.n	8006ca4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006c74:	4619      	mov	r1, r3
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f000 fa2c 	bl	80070d4 <USBD_StdItfReq>
      break;
 8006c7c:	e012      	b.n	8006ca4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006c84:	4619      	mov	r1, r3
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 fa6c 	bl	8007164 <USBD_StdEPReq>
      break;
 8006c8c:	e00a      	b.n	8006ca4 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8006c94:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006c98:	b2db      	uxtb	r3, r3
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f001 fa43 	bl	8008128 <USBD_LL_StallEP>
      break;
 8006ca2:	bf00      	nop
  }

  return USBD_OK;
 8006ca4:	2300      	movs	r3, #0
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3708      	adds	r7, #8
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}

08006cae <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006cae:	b580      	push	{r7, lr}
 8006cb0:	b086      	sub	sp, #24
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	60f8      	str	r0, [r7, #12]
 8006cb6:	460b      	mov	r3, r1
 8006cb8:	607a      	str	r2, [r7, #4]
 8006cba:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006cbc:	7afb      	ldrb	r3, [r7, #11]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d14b      	bne.n	8006d5a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006cc8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006cd0:	2b03      	cmp	r3, #3
 8006cd2:	d134      	bne.n	8006d3e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	68da      	ldr	r2, [r3, #12]
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	691b      	ldr	r3, [r3, #16]
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d919      	bls.n	8006d14 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	68da      	ldr	r2, [r3, #12]
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	691b      	ldr	r3, [r3, #16]
 8006ce8:	1ad2      	subs	r2, r2, r3
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	68da      	ldr	r2, [r3, #12]
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d203      	bcs.n	8006d02 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	e002      	b.n	8006d08 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	461a      	mov	r2, r3
 8006d0a:	6879      	ldr	r1, [r7, #4]
 8006d0c:	68f8      	ldr	r0, [r7, #12]
 8006d0e:	f000 ff35 	bl	8007b7c <USBD_CtlContinueRx>
 8006d12:	e038      	b.n	8006d86 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d1a:	691b      	ldr	r3, [r3, #16]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d00a      	beq.n	8006d36 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006d26:	2b03      	cmp	r3, #3
 8006d28:	d105      	bne.n	8006d36 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d30:	691b      	ldr	r3, [r3, #16]
 8006d32:	68f8      	ldr	r0, [r7, #12]
 8006d34:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006d36:	68f8      	ldr	r0, [r7, #12]
 8006d38:	f000 ff32 	bl	8007ba0 <USBD_CtlSendStatus>
 8006d3c:	e023      	b.n	8006d86 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006d44:	2b05      	cmp	r3, #5
 8006d46:	d11e      	bne.n	8006d86 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006d50:	2100      	movs	r1, #0
 8006d52:	68f8      	ldr	r0, [r7, #12]
 8006d54:	f001 f9e8 	bl	8008128 <USBD_LL_StallEP>
 8006d58:	e015      	b.n	8006d86 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d60:	699b      	ldr	r3, [r3, #24]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00d      	beq.n	8006d82 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006d6c:	2b03      	cmp	r3, #3
 8006d6e:	d108      	bne.n	8006d82 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d76:	699b      	ldr	r3, [r3, #24]
 8006d78:	7afa      	ldrb	r2, [r7, #11]
 8006d7a:	4611      	mov	r1, r2
 8006d7c:	68f8      	ldr	r0, [r7, #12]
 8006d7e:	4798      	blx	r3
 8006d80:	e001      	b.n	8006d86 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006d82:	2302      	movs	r3, #2
 8006d84:	e000      	b.n	8006d88 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006d86:	2300      	movs	r3, #0
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3718      	adds	r7, #24
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b086      	sub	sp, #24
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	60f8      	str	r0, [r7, #12]
 8006d98:	460b      	mov	r3, r1
 8006d9a:	607a      	str	r2, [r7, #4]
 8006d9c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006d9e:	7afb      	ldrb	r3, [r7, #11]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d17f      	bne.n	8006ea4 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	3314      	adds	r3, #20
 8006da8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006db0:	2b02      	cmp	r3, #2
 8006db2:	d15c      	bne.n	8006e6e <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	68da      	ldr	r2, [r3, #12]
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	691b      	ldr	r3, [r3, #16]
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d915      	bls.n	8006dec <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	68da      	ldr	r2, [r3, #12]
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	691b      	ldr	r3, [r3, #16]
 8006dc8:	1ad2      	subs	r2, r2, r3
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	68db      	ldr	r3, [r3, #12]
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	461a      	mov	r2, r3
 8006dd6:	6879      	ldr	r1, [r7, #4]
 8006dd8:	68f8      	ldr	r0, [r7, #12]
 8006dda:	f000 febd 	bl	8007b58 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006dde:	2300      	movs	r3, #0
 8006de0:	2200      	movs	r2, #0
 8006de2:	2100      	movs	r1, #0
 8006de4:	68f8      	ldr	r0, [r7, #12]
 8006de6:	f001 fa4a 	bl	800827e <USBD_LL_PrepareReceive>
 8006dea:	e04e      	b.n	8006e8a <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	697a      	ldr	r2, [r7, #20]
 8006df2:	6912      	ldr	r2, [r2, #16]
 8006df4:	fbb3 f1f2 	udiv	r1, r3, r2
 8006df8:	fb01 f202 	mul.w	r2, r1, r2
 8006dfc:	1a9b      	subs	r3, r3, r2
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d11c      	bne.n	8006e3c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	689a      	ldr	r2, [r3, #8]
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d316      	bcc.n	8006e3c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	689a      	ldr	r2, [r3, #8]
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d20f      	bcs.n	8006e3c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	2100      	movs	r1, #0
 8006e20:	68f8      	ldr	r0, [r7, #12]
 8006e22:	f000 fe99 	bl	8007b58 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e2e:	2300      	movs	r3, #0
 8006e30:	2200      	movs	r2, #0
 8006e32:	2100      	movs	r1, #0
 8006e34:	68f8      	ldr	r0, [r7, #12]
 8006e36:	f001 fa22 	bl	800827e <USBD_LL_PrepareReceive>
 8006e3a:	e026      	b.n	8006e8a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d00a      	beq.n	8006e5e <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006e4e:	2b03      	cmp	r3, #3
 8006e50:	d105      	bne.n	8006e5e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e58:	68db      	ldr	r3, [r3, #12]
 8006e5a:	68f8      	ldr	r0, [r7, #12]
 8006e5c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006e5e:	2180      	movs	r1, #128	@ 0x80
 8006e60:	68f8      	ldr	r0, [r7, #12]
 8006e62:	f001 f961 	bl	8008128 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006e66:	68f8      	ldr	r0, [r7, #12]
 8006e68:	f000 fead 	bl	8007bc6 <USBD_CtlReceiveStatus>
 8006e6c:	e00d      	b.n	8006e8a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006e74:	2b04      	cmp	r3, #4
 8006e76:	d004      	beq.n	8006e82 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d103      	bne.n	8006e8a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006e82:	2180      	movs	r1, #128	@ 0x80
 8006e84:	68f8      	ldr	r0, [r7, #12]
 8006e86:	f001 f94f 	bl	8008128 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d11d      	bne.n	8006ed0 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006e94:	68f8      	ldr	r0, [r7, #12]
 8006e96:	f7ff fe81 	bl	8006b9c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006ea2:	e015      	b.n	8006ed0 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006eaa:	695b      	ldr	r3, [r3, #20]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d00d      	beq.n	8006ecc <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006eb6:	2b03      	cmp	r3, #3
 8006eb8:	d108      	bne.n	8006ecc <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ec0:	695b      	ldr	r3, [r3, #20]
 8006ec2:	7afa      	ldrb	r2, [r7, #11]
 8006ec4:	4611      	mov	r1, r2
 8006ec6:	68f8      	ldr	r0, [r7, #12]
 8006ec8:	4798      	blx	r3
 8006eca:	e001      	b.n	8006ed0 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006ecc:	2302      	movs	r3, #2
 8006ece:	e000      	b.n	8006ed2 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006ed0:	2300      	movs	r3, #0
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3718      	adds	r7, #24
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}

08006eda <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006eda:	b580      	push	{r7, lr}
 8006edc:	b082      	sub	sp, #8
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006ee2:	2340      	movs	r3, #64	@ 0x40
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	2100      	movs	r1, #0
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f001 f8d8 	bl	800809e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2240      	movs	r2, #64	@ 0x40
 8006efa:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006efe:	2340      	movs	r3, #64	@ 0x40
 8006f00:	2200      	movs	r2, #0
 8006f02:	2180      	movs	r1, #128	@ 0x80
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f001 f8ca 	bl	800809e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2240      	movs	r2, #64	@ 0x40
 8006f14:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2201      	movs	r2, #1
 8006f1a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2200      	movs	r2, #0
 8006f22:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d009      	beq.n	8006f52 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	6852      	ldr	r2, [r2, #4]
 8006f4a:	b2d2      	uxtb	r2, r2
 8006f4c:	4611      	mov	r1, r2
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	4798      	blx	r3
  }

  return USBD_OK;
 8006f52:	2300      	movs	r3, #0
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3708      	adds	r7, #8
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}

08006f5c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b083      	sub	sp, #12
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	460b      	mov	r3, r1
 8006f66:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	78fa      	ldrb	r2, [r7, #3]
 8006f6c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006f6e:	2300      	movs	r3, #0
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	370c      	adds	r7, #12
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bc80      	pop	{r7}
 8006f78:	4770      	bx	lr

08006f7a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006f7a:	b480      	push	{r7}
 8006f7c:	b083      	sub	sp, #12
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2204      	movs	r2, #4
 8006f92:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006f96:	2300      	movs	r3, #0
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	370c      	adds	r7, #12
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bc80      	pop	{r7}
 8006fa0:	4770      	bx	lr

08006fa2 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006fa2:	b480      	push	{r7}
 8006fa4:	b083      	sub	sp, #12
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006fb0:	2b04      	cmp	r3, #4
 8006fb2:	d105      	bne.n	8006fc0 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006fc0:	2300      	movs	r3, #0
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	370c      	adds	r7, #12
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bc80      	pop	{r7}
 8006fca:	4770      	bx	lr

08006fcc <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b082      	sub	sp, #8
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006fda:	2b03      	cmp	r3, #3
 8006fdc:	d10b      	bne.n	8006ff6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006fe4:	69db      	ldr	r3, [r3, #28]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d005      	beq.n	8006ff6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ff0:	69db      	ldr	r3, [r3, #28]
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006ff6:	2300      	movs	r3, #0
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3708      	adds	r7, #8
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}

08007000 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b084      	sub	sp, #16
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800700a:	2300      	movs	r3, #0
 800700c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007016:	2b40      	cmp	r3, #64	@ 0x40
 8007018:	d005      	beq.n	8007026 <USBD_StdDevReq+0x26>
 800701a:	2b40      	cmp	r3, #64	@ 0x40
 800701c:	d84f      	bhi.n	80070be <USBD_StdDevReq+0xbe>
 800701e:	2b00      	cmp	r3, #0
 8007020:	d009      	beq.n	8007036 <USBD_StdDevReq+0x36>
 8007022:	2b20      	cmp	r3, #32
 8007024:	d14b      	bne.n	80070be <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	6839      	ldr	r1, [r7, #0]
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	4798      	blx	r3
      break;
 8007034:	e048      	b.n	80070c8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	785b      	ldrb	r3, [r3, #1]
 800703a:	2b09      	cmp	r3, #9
 800703c:	d839      	bhi.n	80070b2 <USBD_StdDevReq+0xb2>
 800703e:	a201      	add	r2, pc, #4	@ (adr r2, 8007044 <USBD_StdDevReq+0x44>)
 8007040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007044:	08007095 	.word	0x08007095
 8007048:	080070a9 	.word	0x080070a9
 800704c:	080070b3 	.word	0x080070b3
 8007050:	0800709f 	.word	0x0800709f
 8007054:	080070b3 	.word	0x080070b3
 8007058:	08007077 	.word	0x08007077
 800705c:	0800706d 	.word	0x0800706d
 8007060:	080070b3 	.word	0x080070b3
 8007064:	0800708b 	.word	0x0800708b
 8007068:	08007081 	.word	0x08007081
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800706c:	6839      	ldr	r1, [r7, #0]
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 f9dc 	bl	800742c <USBD_GetDescriptor>
          break;
 8007074:	e022      	b.n	80070bc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007076:	6839      	ldr	r1, [r7, #0]
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f000 fb3f 	bl	80076fc <USBD_SetAddress>
          break;
 800707e:	e01d      	b.n	80070bc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007080:	6839      	ldr	r1, [r7, #0]
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 fb7e 	bl	8007784 <USBD_SetConfig>
          break;
 8007088:	e018      	b.n	80070bc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800708a:	6839      	ldr	r1, [r7, #0]
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f000 fc07 	bl	80078a0 <USBD_GetConfig>
          break;
 8007092:	e013      	b.n	80070bc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007094:	6839      	ldr	r1, [r7, #0]
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 fc37 	bl	800790a <USBD_GetStatus>
          break;
 800709c:	e00e      	b.n	80070bc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800709e:	6839      	ldr	r1, [r7, #0]
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f000 fc65 	bl	8007970 <USBD_SetFeature>
          break;
 80070a6:	e009      	b.n	80070bc <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80070a8:	6839      	ldr	r1, [r7, #0]
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 fc74 	bl	8007998 <USBD_ClrFeature>
          break;
 80070b0:	e004      	b.n	80070bc <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80070b2:	6839      	ldr	r1, [r7, #0]
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f000 fcc9 	bl	8007a4c <USBD_CtlError>
          break;
 80070ba:	bf00      	nop
      }
      break;
 80070bc:	e004      	b.n	80070c8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80070be:	6839      	ldr	r1, [r7, #0]
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f000 fcc3 	bl	8007a4c <USBD_CtlError>
      break;
 80070c6:	bf00      	nop
  }

  return ret;
 80070c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3710      	adds	r7, #16
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}
 80070d2:	bf00      	nop

080070d4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b084      	sub	sp, #16
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80070de:	2300      	movs	r3, #0
 80070e0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	781b      	ldrb	r3, [r3, #0]
 80070e6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80070ea:	2b40      	cmp	r3, #64	@ 0x40
 80070ec:	d005      	beq.n	80070fa <USBD_StdItfReq+0x26>
 80070ee:	2b40      	cmp	r3, #64	@ 0x40
 80070f0:	d82e      	bhi.n	8007150 <USBD_StdItfReq+0x7c>
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d001      	beq.n	80070fa <USBD_StdItfReq+0x26>
 80070f6:	2b20      	cmp	r3, #32
 80070f8:	d12a      	bne.n	8007150 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007100:	3b01      	subs	r3, #1
 8007102:	2b02      	cmp	r3, #2
 8007104:	d81d      	bhi.n	8007142 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	889b      	ldrh	r3, [r3, #4]
 800710a:	b2db      	uxtb	r3, r3
 800710c:	2b01      	cmp	r3, #1
 800710e:	d813      	bhi.n	8007138 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	6839      	ldr	r1, [r7, #0]
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	4798      	blx	r3
 800711e:	4603      	mov	r3, r0
 8007120:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	88db      	ldrh	r3, [r3, #6]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d110      	bne.n	800714c <USBD_StdItfReq+0x78>
 800712a:	7bfb      	ldrb	r3, [r7, #15]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d10d      	bne.n	800714c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f000 fd35 	bl	8007ba0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007136:	e009      	b.n	800714c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007138:	6839      	ldr	r1, [r7, #0]
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 fc86 	bl	8007a4c <USBD_CtlError>
          break;
 8007140:	e004      	b.n	800714c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007142:	6839      	ldr	r1, [r7, #0]
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f000 fc81 	bl	8007a4c <USBD_CtlError>
          break;
 800714a:	e000      	b.n	800714e <USBD_StdItfReq+0x7a>
          break;
 800714c:	bf00      	nop
      }
      break;
 800714e:	e004      	b.n	800715a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007150:	6839      	ldr	r1, [r7, #0]
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 fc7a 	bl	8007a4c <USBD_CtlError>
      break;
 8007158:	bf00      	nop
  }

  return USBD_OK;
 800715a:	2300      	movs	r3, #0
}
 800715c:	4618      	mov	r0, r3
 800715e:	3710      	adds	r7, #16
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}

08007164 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b084      	sub	sp, #16
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800716e:	2300      	movs	r3, #0
 8007170:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	889b      	ldrh	r3, [r3, #4]
 8007176:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007180:	2b40      	cmp	r3, #64	@ 0x40
 8007182:	d007      	beq.n	8007194 <USBD_StdEPReq+0x30>
 8007184:	2b40      	cmp	r3, #64	@ 0x40
 8007186:	f200 8146 	bhi.w	8007416 <USBD_StdEPReq+0x2b2>
 800718a:	2b00      	cmp	r3, #0
 800718c:	d00a      	beq.n	80071a4 <USBD_StdEPReq+0x40>
 800718e:	2b20      	cmp	r3, #32
 8007190:	f040 8141 	bne.w	8007416 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	6839      	ldr	r1, [r7, #0]
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	4798      	blx	r3
      break;
 80071a2:	e13d      	b.n	8007420 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80071ac:	2b20      	cmp	r3, #32
 80071ae:	d10a      	bne.n	80071c6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	6839      	ldr	r1, [r7, #0]
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	4798      	blx	r3
 80071be:	4603      	mov	r3, r0
 80071c0:	73fb      	strb	r3, [r7, #15]

        return ret;
 80071c2:	7bfb      	ldrb	r3, [r7, #15]
 80071c4:	e12d      	b.n	8007422 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	785b      	ldrb	r3, [r3, #1]
 80071ca:	2b03      	cmp	r3, #3
 80071cc:	d007      	beq.n	80071de <USBD_StdEPReq+0x7a>
 80071ce:	2b03      	cmp	r3, #3
 80071d0:	f300 811b 	bgt.w	800740a <USBD_StdEPReq+0x2a6>
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d072      	beq.n	80072be <USBD_StdEPReq+0x15a>
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d03a      	beq.n	8007252 <USBD_StdEPReq+0xee>
 80071dc:	e115      	b.n	800740a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071e4:	2b02      	cmp	r3, #2
 80071e6:	d002      	beq.n	80071ee <USBD_StdEPReq+0x8a>
 80071e8:	2b03      	cmp	r3, #3
 80071ea:	d015      	beq.n	8007218 <USBD_StdEPReq+0xb4>
 80071ec:	e02b      	b.n	8007246 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80071ee:	7bbb      	ldrb	r3, [r7, #14]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d00c      	beq.n	800720e <USBD_StdEPReq+0xaa>
 80071f4:	7bbb      	ldrb	r3, [r7, #14]
 80071f6:	2b80      	cmp	r3, #128	@ 0x80
 80071f8:	d009      	beq.n	800720e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80071fa:	7bbb      	ldrb	r3, [r7, #14]
 80071fc:	4619      	mov	r1, r3
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f000 ff92 	bl	8008128 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007204:	2180      	movs	r1, #128	@ 0x80
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 ff8e 	bl	8008128 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800720c:	e020      	b.n	8007250 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800720e:	6839      	ldr	r1, [r7, #0]
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f000 fc1b 	bl	8007a4c <USBD_CtlError>
              break;
 8007216:	e01b      	b.n	8007250 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	885b      	ldrh	r3, [r3, #2]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d10e      	bne.n	800723e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007220:	7bbb      	ldrb	r3, [r7, #14]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d00b      	beq.n	800723e <USBD_StdEPReq+0xda>
 8007226:	7bbb      	ldrb	r3, [r7, #14]
 8007228:	2b80      	cmp	r3, #128	@ 0x80
 800722a:	d008      	beq.n	800723e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	88db      	ldrh	r3, [r3, #6]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d104      	bne.n	800723e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007234:	7bbb      	ldrb	r3, [r7, #14]
 8007236:	4619      	mov	r1, r3
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 ff75 	bl	8008128 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 fcae 	bl	8007ba0 <USBD_CtlSendStatus>

              break;
 8007244:	e004      	b.n	8007250 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007246:	6839      	ldr	r1, [r7, #0]
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f000 fbff 	bl	8007a4c <USBD_CtlError>
              break;
 800724e:	bf00      	nop
          }
          break;
 8007250:	e0e0      	b.n	8007414 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007258:	2b02      	cmp	r3, #2
 800725a:	d002      	beq.n	8007262 <USBD_StdEPReq+0xfe>
 800725c:	2b03      	cmp	r3, #3
 800725e:	d015      	beq.n	800728c <USBD_StdEPReq+0x128>
 8007260:	e026      	b.n	80072b0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007262:	7bbb      	ldrb	r3, [r7, #14]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d00c      	beq.n	8007282 <USBD_StdEPReq+0x11e>
 8007268:	7bbb      	ldrb	r3, [r7, #14]
 800726a:	2b80      	cmp	r3, #128	@ 0x80
 800726c:	d009      	beq.n	8007282 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800726e:	7bbb      	ldrb	r3, [r7, #14]
 8007270:	4619      	mov	r1, r3
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f000 ff58 	bl	8008128 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007278:	2180      	movs	r1, #128	@ 0x80
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 ff54 	bl	8008128 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007280:	e01c      	b.n	80072bc <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007282:	6839      	ldr	r1, [r7, #0]
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f000 fbe1 	bl	8007a4c <USBD_CtlError>
              break;
 800728a:	e017      	b.n	80072bc <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	885b      	ldrh	r3, [r3, #2]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d112      	bne.n	80072ba <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007294:	7bbb      	ldrb	r3, [r7, #14]
 8007296:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800729a:	2b00      	cmp	r3, #0
 800729c:	d004      	beq.n	80072a8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800729e:	7bbb      	ldrb	r3, [r7, #14]
 80072a0:	4619      	mov	r1, r3
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 ff5f 	bl	8008166 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 fc79 	bl	8007ba0 <USBD_CtlSendStatus>
              }
              break;
 80072ae:	e004      	b.n	80072ba <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80072b0:	6839      	ldr	r1, [r7, #0]
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 fbca 	bl	8007a4c <USBD_CtlError>
              break;
 80072b8:	e000      	b.n	80072bc <USBD_StdEPReq+0x158>
              break;
 80072ba:	bf00      	nop
          }
          break;
 80072bc:	e0aa      	b.n	8007414 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072c4:	2b02      	cmp	r3, #2
 80072c6:	d002      	beq.n	80072ce <USBD_StdEPReq+0x16a>
 80072c8:	2b03      	cmp	r3, #3
 80072ca:	d032      	beq.n	8007332 <USBD_StdEPReq+0x1ce>
 80072cc:	e097      	b.n	80073fe <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80072ce:	7bbb      	ldrb	r3, [r7, #14]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d007      	beq.n	80072e4 <USBD_StdEPReq+0x180>
 80072d4:	7bbb      	ldrb	r3, [r7, #14]
 80072d6:	2b80      	cmp	r3, #128	@ 0x80
 80072d8:	d004      	beq.n	80072e4 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80072da:	6839      	ldr	r1, [r7, #0]
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 fbb5 	bl	8007a4c <USBD_CtlError>
                break;
 80072e2:	e091      	b.n	8007408 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80072e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	da0b      	bge.n	8007304 <USBD_StdEPReq+0x1a0>
 80072ec:	7bbb      	ldrb	r3, [r7, #14]
 80072ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80072f2:	4613      	mov	r3, r2
 80072f4:	009b      	lsls	r3, r3, #2
 80072f6:	4413      	add	r3, r2
 80072f8:	009b      	lsls	r3, r3, #2
 80072fa:	3310      	adds	r3, #16
 80072fc:	687a      	ldr	r2, [r7, #4]
 80072fe:	4413      	add	r3, r2
 8007300:	3304      	adds	r3, #4
 8007302:	e00b      	b.n	800731c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007304:	7bbb      	ldrb	r3, [r7, #14]
 8007306:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800730a:	4613      	mov	r3, r2
 800730c:	009b      	lsls	r3, r3, #2
 800730e:	4413      	add	r3, r2
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007316:	687a      	ldr	r2, [r7, #4]
 8007318:	4413      	add	r3, r2
 800731a:	3304      	adds	r3, #4
 800731c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	2200      	movs	r2, #0
 8007322:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	2202      	movs	r2, #2
 8007328:	4619      	mov	r1, r3
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 fbf8 	bl	8007b20 <USBD_CtlSendData>
              break;
 8007330:	e06a      	b.n	8007408 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007332:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007336:	2b00      	cmp	r3, #0
 8007338:	da11      	bge.n	800735e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800733a:	7bbb      	ldrb	r3, [r7, #14]
 800733c:	f003 020f 	and.w	r2, r3, #15
 8007340:	6879      	ldr	r1, [r7, #4]
 8007342:	4613      	mov	r3, r2
 8007344:	009b      	lsls	r3, r3, #2
 8007346:	4413      	add	r3, r2
 8007348:	009b      	lsls	r3, r3, #2
 800734a:	440b      	add	r3, r1
 800734c:	3318      	adds	r3, #24
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d117      	bne.n	8007384 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007354:	6839      	ldr	r1, [r7, #0]
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f000 fb78 	bl	8007a4c <USBD_CtlError>
                  break;
 800735c:	e054      	b.n	8007408 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800735e:	7bbb      	ldrb	r3, [r7, #14]
 8007360:	f003 020f 	and.w	r2, r3, #15
 8007364:	6879      	ldr	r1, [r7, #4]
 8007366:	4613      	mov	r3, r2
 8007368:	009b      	lsls	r3, r3, #2
 800736a:	4413      	add	r3, r2
 800736c:	009b      	lsls	r3, r3, #2
 800736e:	440b      	add	r3, r1
 8007370:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d104      	bne.n	8007384 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800737a:	6839      	ldr	r1, [r7, #0]
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f000 fb65 	bl	8007a4c <USBD_CtlError>
                  break;
 8007382:	e041      	b.n	8007408 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007384:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007388:	2b00      	cmp	r3, #0
 800738a:	da0b      	bge.n	80073a4 <USBD_StdEPReq+0x240>
 800738c:	7bbb      	ldrb	r3, [r7, #14]
 800738e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007392:	4613      	mov	r3, r2
 8007394:	009b      	lsls	r3, r3, #2
 8007396:	4413      	add	r3, r2
 8007398:	009b      	lsls	r3, r3, #2
 800739a:	3310      	adds	r3, #16
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	4413      	add	r3, r2
 80073a0:	3304      	adds	r3, #4
 80073a2:	e00b      	b.n	80073bc <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80073a4:	7bbb      	ldrb	r3, [r7, #14]
 80073a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073aa:	4613      	mov	r3, r2
 80073ac:	009b      	lsls	r3, r3, #2
 80073ae:	4413      	add	r3, r2
 80073b0:	009b      	lsls	r3, r3, #2
 80073b2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80073b6:	687a      	ldr	r2, [r7, #4]
 80073b8:	4413      	add	r3, r2
 80073ba:	3304      	adds	r3, #4
 80073bc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80073be:	7bbb      	ldrb	r3, [r7, #14]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d002      	beq.n	80073ca <USBD_StdEPReq+0x266>
 80073c4:	7bbb      	ldrb	r3, [r7, #14]
 80073c6:	2b80      	cmp	r3, #128	@ 0x80
 80073c8:	d103      	bne.n	80073d2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	2200      	movs	r2, #0
 80073ce:	601a      	str	r2, [r3, #0]
 80073d0:	e00e      	b.n	80073f0 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80073d2:	7bbb      	ldrb	r3, [r7, #14]
 80073d4:	4619      	mov	r1, r3
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f000 fee4 	bl	80081a4 <USBD_LL_IsStallEP>
 80073dc:	4603      	mov	r3, r0
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d003      	beq.n	80073ea <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	2201      	movs	r2, #1
 80073e6:	601a      	str	r2, [r3, #0]
 80073e8:	e002      	b.n	80073f0 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	2200      	movs	r2, #0
 80073ee:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	2202      	movs	r2, #2
 80073f4:	4619      	mov	r1, r3
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f000 fb92 	bl	8007b20 <USBD_CtlSendData>
              break;
 80073fc:	e004      	b.n	8007408 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80073fe:	6839      	ldr	r1, [r7, #0]
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f000 fb23 	bl	8007a4c <USBD_CtlError>
              break;
 8007406:	bf00      	nop
          }
          break;
 8007408:	e004      	b.n	8007414 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800740a:	6839      	ldr	r1, [r7, #0]
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 fb1d 	bl	8007a4c <USBD_CtlError>
          break;
 8007412:	bf00      	nop
      }
      break;
 8007414:	e004      	b.n	8007420 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007416:	6839      	ldr	r1, [r7, #0]
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f000 fb17 	bl	8007a4c <USBD_CtlError>
      break;
 800741e:	bf00      	nop
  }

  return ret;
 8007420:	7bfb      	ldrb	r3, [r7, #15]
}
 8007422:	4618      	mov	r0, r3
 8007424:	3710      	adds	r7, #16
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}
	...

0800742c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007436:	2300      	movs	r3, #0
 8007438:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800743a:	2300      	movs	r3, #0
 800743c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800743e:	2300      	movs	r3, #0
 8007440:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	885b      	ldrh	r3, [r3, #2]
 8007446:	0a1b      	lsrs	r3, r3, #8
 8007448:	b29b      	uxth	r3, r3
 800744a:	3b01      	subs	r3, #1
 800744c:	2b06      	cmp	r3, #6
 800744e:	f200 8128 	bhi.w	80076a2 <USBD_GetDescriptor+0x276>
 8007452:	a201      	add	r2, pc, #4	@ (adr r2, 8007458 <USBD_GetDescriptor+0x2c>)
 8007454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007458:	08007475 	.word	0x08007475
 800745c:	0800748d 	.word	0x0800748d
 8007460:	080074cd 	.word	0x080074cd
 8007464:	080076a3 	.word	0x080076a3
 8007468:	080076a3 	.word	0x080076a3
 800746c:	08007643 	.word	0x08007643
 8007470:	0800766f 	.word	0x0800766f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	7c12      	ldrb	r2, [r2, #16]
 8007480:	f107 0108 	add.w	r1, r7, #8
 8007484:	4610      	mov	r0, r2
 8007486:	4798      	blx	r3
 8007488:	60f8      	str	r0, [r7, #12]
      break;
 800748a:	e112      	b.n	80076b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	7c1b      	ldrb	r3, [r3, #16]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d10d      	bne.n	80074b0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800749a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800749c:	f107 0208 	add.w	r2, r7, #8
 80074a0:	4610      	mov	r0, r2
 80074a2:	4798      	blx	r3
 80074a4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	3301      	adds	r3, #1
 80074aa:	2202      	movs	r2, #2
 80074ac:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80074ae:	e100      	b.n	80076b2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80074b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074b8:	f107 0208 	add.w	r2, r7, #8
 80074bc:	4610      	mov	r0, r2
 80074be:	4798      	blx	r3
 80074c0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	3301      	adds	r3, #1
 80074c6:	2202      	movs	r2, #2
 80074c8:	701a      	strb	r2, [r3, #0]
      break;
 80074ca:	e0f2      	b.n	80076b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	885b      	ldrh	r3, [r3, #2]
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	2b05      	cmp	r3, #5
 80074d4:	f200 80ac 	bhi.w	8007630 <USBD_GetDescriptor+0x204>
 80074d8:	a201      	add	r2, pc, #4	@ (adr r2, 80074e0 <USBD_GetDescriptor+0xb4>)
 80074da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074de:	bf00      	nop
 80074e0:	080074f9 	.word	0x080074f9
 80074e4:	0800752d 	.word	0x0800752d
 80074e8:	08007561 	.word	0x08007561
 80074ec:	08007595 	.word	0x08007595
 80074f0:	080075c9 	.word	0x080075c9
 80074f4:	080075fd 	.word	0x080075fd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d00b      	beq.n	800751c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	7c12      	ldrb	r2, [r2, #16]
 8007510:	f107 0108 	add.w	r1, r7, #8
 8007514:	4610      	mov	r0, r2
 8007516:	4798      	blx	r3
 8007518:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800751a:	e091      	b.n	8007640 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800751c:	6839      	ldr	r1, [r7, #0]
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f000 fa94 	bl	8007a4c <USBD_CtlError>
            err++;
 8007524:	7afb      	ldrb	r3, [r7, #11]
 8007526:	3301      	adds	r3, #1
 8007528:	72fb      	strb	r3, [r7, #11]
          break;
 800752a:	e089      	b.n	8007640 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d00b      	beq.n	8007550 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	687a      	ldr	r2, [r7, #4]
 8007542:	7c12      	ldrb	r2, [r2, #16]
 8007544:	f107 0108 	add.w	r1, r7, #8
 8007548:	4610      	mov	r0, r2
 800754a:	4798      	blx	r3
 800754c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800754e:	e077      	b.n	8007640 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007550:	6839      	ldr	r1, [r7, #0]
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f000 fa7a 	bl	8007a4c <USBD_CtlError>
            err++;
 8007558:	7afb      	ldrb	r3, [r7, #11]
 800755a:	3301      	adds	r3, #1
 800755c:	72fb      	strb	r3, [r7, #11]
          break;
 800755e:	e06f      	b.n	8007640 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007566:	68db      	ldr	r3, [r3, #12]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d00b      	beq.n	8007584 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007572:	68db      	ldr	r3, [r3, #12]
 8007574:	687a      	ldr	r2, [r7, #4]
 8007576:	7c12      	ldrb	r2, [r2, #16]
 8007578:	f107 0108 	add.w	r1, r7, #8
 800757c:	4610      	mov	r0, r2
 800757e:	4798      	blx	r3
 8007580:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007582:	e05d      	b.n	8007640 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007584:	6839      	ldr	r1, [r7, #0]
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 fa60 	bl	8007a4c <USBD_CtlError>
            err++;
 800758c:	7afb      	ldrb	r3, [r7, #11]
 800758e:	3301      	adds	r3, #1
 8007590:	72fb      	strb	r3, [r7, #11]
          break;
 8007592:	e055      	b.n	8007640 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800759a:	691b      	ldr	r3, [r3, #16]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d00b      	beq.n	80075b8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80075a6:	691b      	ldr	r3, [r3, #16]
 80075a8:	687a      	ldr	r2, [r7, #4]
 80075aa:	7c12      	ldrb	r2, [r2, #16]
 80075ac:	f107 0108 	add.w	r1, r7, #8
 80075b0:	4610      	mov	r0, r2
 80075b2:	4798      	blx	r3
 80075b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075b6:	e043      	b.n	8007640 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075b8:	6839      	ldr	r1, [r7, #0]
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 fa46 	bl	8007a4c <USBD_CtlError>
            err++;
 80075c0:	7afb      	ldrb	r3, [r7, #11]
 80075c2:	3301      	adds	r3, #1
 80075c4:	72fb      	strb	r3, [r7, #11]
          break;
 80075c6:	e03b      	b.n	8007640 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80075ce:	695b      	ldr	r3, [r3, #20]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d00b      	beq.n	80075ec <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80075da:	695b      	ldr	r3, [r3, #20]
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	7c12      	ldrb	r2, [r2, #16]
 80075e0:	f107 0108 	add.w	r1, r7, #8
 80075e4:	4610      	mov	r0, r2
 80075e6:	4798      	blx	r3
 80075e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075ea:	e029      	b.n	8007640 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075ec:	6839      	ldr	r1, [r7, #0]
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f000 fa2c 	bl	8007a4c <USBD_CtlError>
            err++;
 80075f4:	7afb      	ldrb	r3, [r7, #11]
 80075f6:	3301      	adds	r3, #1
 80075f8:	72fb      	strb	r3, [r7, #11]
          break;
 80075fa:	e021      	b.n	8007640 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007602:	699b      	ldr	r3, [r3, #24]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d00b      	beq.n	8007620 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800760e:	699b      	ldr	r3, [r3, #24]
 8007610:	687a      	ldr	r2, [r7, #4]
 8007612:	7c12      	ldrb	r2, [r2, #16]
 8007614:	f107 0108 	add.w	r1, r7, #8
 8007618:	4610      	mov	r0, r2
 800761a:	4798      	blx	r3
 800761c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800761e:	e00f      	b.n	8007640 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007620:	6839      	ldr	r1, [r7, #0]
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f000 fa12 	bl	8007a4c <USBD_CtlError>
            err++;
 8007628:	7afb      	ldrb	r3, [r7, #11]
 800762a:	3301      	adds	r3, #1
 800762c:	72fb      	strb	r3, [r7, #11]
          break;
 800762e:	e007      	b.n	8007640 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007630:	6839      	ldr	r1, [r7, #0]
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f000 fa0a 	bl	8007a4c <USBD_CtlError>
          err++;
 8007638:	7afb      	ldrb	r3, [r7, #11]
 800763a:	3301      	adds	r3, #1
 800763c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800763e:	e038      	b.n	80076b2 <USBD_GetDescriptor+0x286>
 8007640:	e037      	b.n	80076b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	7c1b      	ldrb	r3, [r3, #16]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d109      	bne.n	800765e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007650:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007652:	f107 0208 	add.w	r2, r7, #8
 8007656:	4610      	mov	r0, r2
 8007658:	4798      	blx	r3
 800765a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800765c:	e029      	b.n	80076b2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800765e:	6839      	ldr	r1, [r7, #0]
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f000 f9f3 	bl	8007a4c <USBD_CtlError>
        err++;
 8007666:	7afb      	ldrb	r3, [r7, #11]
 8007668:	3301      	adds	r3, #1
 800766a:	72fb      	strb	r3, [r7, #11]
      break;
 800766c:	e021      	b.n	80076b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	7c1b      	ldrb	r3, [r3, #16]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d10d      	bne.n	8007692 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800767c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800767e:	f107 0208 	add.w	r2, r7, #8
 8007682:	4610      	mov	r0, r2
 8007684:	4798      	blx	r3
 8007686:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	3301      	adds	r3, #1
 800768c:	2207      	movs	r2, #7
 800768e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007690:	e00f      	b.n	80076b2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007692:	6839      	ldr	r1, [r7, #0]
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f000 f9d9 	bl	8007a4c <USBD_CtlError>
        err++;
 800769a:	7afb      	ldrb	r3, [r7, #11]
 800769c:	3301      	adds	r3, #1
 800769e:	72fb      	strb	r3, [r7, #11]
      break;
 80076a0:	e007      	b.n	80076b2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80076a2:	6839      	ldr	r1, [r7, #0]
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f000 f9d1 	bl	8007a4c <USBD_CtlError>
      err++;
 80076aa:	7afb      	ldrb	r3, [r7, #11]
 80076ac:	3301      	adds	r3, #1
 80076ae:	72fb      	strb	r3, [r7, #11]
      break;
 80076b0:	bf00      	nop
  }

  if (err != 0U)
 80076b2:	7afb      	ldrb	r3, [r7, #11]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d11c      	bne.n	80076f2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80076b8:	893b      	ldrh	r3, [r7, #8]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d011      	beq.n	80076e2 <USBD_GetDescriptor+0x2b6>
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	88db      	ldrh	r3, [r3, #6]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d00d      	beq.n	80076e2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	88da      	ldrh	r2, [r3, #6]
 80076ca:	893b      	ldrh	r3, [r7, #8]
 80076cc:	4293      	cmp	r3, r2
 80076ce:	bf28      	it	cs
 80076d0:	4613      	movcs	r3, r2
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80076d6:	893b      	ldrh	r3, [r7, #8]
 80076d8:	461a      	mov	r2, r3
 80076da:	68f9      	ldr	r1, [r7, #12]
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f000 fa1f 	bl	8007b20 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	88db      	ldrh	r3, [r3, #6]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d104      	bne.n	80076f4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 fa58 	bl	8007ba0 <USBD_CtlSendStatus>
 80076f0:	e000      	b.n	80076f4 <USBD_GetDescriptor+0x2c8>
    return;
 80076f2:	bf00      	nop
    }
  }
}
 80076f4:	3710      	adds	r7, #16
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}
 80076fa:	bf00      	nop

080076fc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b084      	sub	sp, #16
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	889b      	ldrh	r3, [r3, #4]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d130      	bne.n	8007770 <USBD_SetAddress+0x74>
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	88db      	ldrh	r3, [r3, #6]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d12c      	bne.n	8007770 <USBD_SetAddress+0x74>
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	885b      	ldrh	r3, [r3, #2]
 800771a:	2b7f      	cmp	r3, #127	@ 0x7f
 800771c:	d828      	bhi.n	8007770 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	885b      	ldrh	r3, [r3, #2]
 8007722:	b2db      	uxtb	r3, r3
 8007724:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007728:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007730:	2b03      	cmp	r3, #3
 8007732:	d104      	bne.n	800773e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007734:	6839      	ldr	r1, [r7, #0]
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f000 f988 	bl	8007a4c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800773c:	e01d      	b.n	800777a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	7bfa      	ldrb	r2, [r7, #15]
 8007742:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007746:	7bfb      	ldrb	r3, [r7, #15]
 8007748:	4619      	mov	r1, r3
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 fd55 	bl	80081fa <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 fa25 	bl	8007ba0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007756:	7bfb      	ldrb	r3, [r7, #15]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d004      	beq.n	8007766 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2202      	movs	r2, #2
 8007760:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007764:	e009      	b.n	800777a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2201      	movs	r2, #1
 800776a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800776e:	e004      	b.n	800777a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007770:	6839      	ldr	r1, [r7, #0]
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f000 f96a 	bl	8007a4c <USBD_CtlError>
  }
}
 8007778:	bf00      	nop
 800777a:	bf00      	nop
 800777c:	3710      	adds	r7, #16
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
	...

08007784 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b082      	sub	sp, #8
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	885b      	ldrh	r3, [r3, #2]
 8007792:	b2da      	uxtb	r2, r3
 8007794:	4b41      	ldr	r3, [pc, #260]	@ (800789c <USBD_SetConfig+0x118>)
 8007796:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007798:	4b40      	ldr	r3, [pc, #256]	@ (800789c <USBD_SetConfig+0x118>)
 800779a:	781b      	ldrb	r3, [r3, #0]
 800779c:	2b01      	cmp	r3, #1
 800779e:	d904      	bls.n	80077aa <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80077a0:	6839      	ldr	r1, [r7, #0]
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 f952 	bl	8007a4c <USBD_CtlError>
 80077a8:	e075      	b.n	8007896 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077b0:	2b02      	cmp	r3, #2
 80077b2:	d002      	beq.n	80077ba <USBD_SetConfig+0x36>
 80077b4:	2b03      	cmp	r3, #3
 80077b6:	d023      	beq.n	8007800 <USBD_SetConfig+0x7c>
 80077b8:	e062      	b.n	8007880 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80077ba:	4b38      	ldr	r3, [pc, #224]	@ (800789c <USBD_SetConfig+0x118>)
 80077bc:	781b      	ldrb	r3, [r3, #0]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d01a      	beq.n	80077f8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80077c2:	4b36      	ldr	r3, [pc, #216]	@ (800789c <USBD_SetConfig+0x118>)
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	461a      	mov	r2, r3
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2203      	movs	r2, #3
 80077d0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80077d4:	4b31      	ldr	r3, [pc, #196]	@ (800789c <USBD_SetConfig+0x118>)
 80077d6:	781b      	ldrb	r3, [r3, #0]
 80077d8:	4619      	mov	r1, r3
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f7ff f9e8 	bl	8006bb0 <USBD_SetClassConfig>
 80077e0:	4603      	mov	r3, r0
 80077e2:	2b02      	cmp	r3, #2
 80077e4:	d104      	bne.n	80077f0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80077e6:	6839      	ldr	r1, [r7, #0]
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f000 f92f 	bl	8007a4c <USBD_CtlError>
            return;
 80077ee:	e052      	b.n	8007896 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 f9d5 	bl	8007ba0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80077f6:	e04e      	b.n	8007896 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f000 f9d1 	bl	8007ba0 <USBD_CtlSendStatus>
        break;
 80077fe:	e04a      	b.n	8007896 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007800:	4b26      	ldr	r3, [pc, #152]	@ (800789c <USBD_SetConfig+0x118>)
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d112      	bne.n	800782e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2202      	movs	r2, #2
 800780c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8007810:	4b22      	ldr	r3, [pc, #136]	@ (800789c <USBD_SetConfig+0x118>)
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	461a      	mov	r2, r3
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800781a:	4b20      	ldr	r3, [pc, #128]	@ (800789c <USBD_SetConfig+0x118>)
 800781c:	781b      	ldrb	r3, [r3, #0]
 800781e:	4619      	mov	r1, r3
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f7ff f9e4 	bl	8006bee <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f000 f9ba 	bl	8007ba0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800782c:	e033      	b.n	8007896 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800782e:	4b1b      	ldr	r3, [pc, #108]	@ (800789c <USBD_SetConfig+0x118>)
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	461a      	mov	r2, r3
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	429a      	cmp	r2, r3
 800783a:	d01d      	beq.n	8007878 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	b2db      	uxtb	r3, r3
 8007842:	4619      	mov	r1, r3
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f7ff f9d2 	bl	8006bee <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800784a:	4b14      	ldr	r3, [pc, #80]	@ (800789c <USBD_SetConfig+0x118>)
 800784c:	781b      	ldrb	r3, [r3, #0]
 800784e:	461a      	mov	r2, r3
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007854:	4b11      	ldr	r3, [pc, #68]	@ (800789c <USBD_SetConfig+0x118>)
 8007856:	781b      	ldrb	r3, [r3, #0]
 8007858:	4619      	mov	r1, r3
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f7ff f9a8 	bl	8006bb0 <USBD_SetClassConfig>
 8007860:	4603      	mov	r3, r0
 8007862:	2b02      	cmp	r3, #2
 8007864:	d104      	bne.n	8007870 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007866:	6839      	ldr	r1, [r7, #0]
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f000 f8ef 	bl	8007a4c <USBD_CtlError>
            return;
 800786e:	e012      	b.n	8007896 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f000 f995 	bl	8007ba0 <USBD_CtlSendStatus>
        break;
 8007876:	e00e      	b.n	8007896 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f000 f991 	bl	8007ba0 <USBD_CtlSendStatus>
        break;
 800787e:	e00a      	b.n	8007896 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007880:	6839      	ldr	r1, [r7, #0]
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 f8e2 	bl	8007a4c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007888:	4b04      	ldr	r3, [pc, #16]	@ (800789c <USBD_SetConfig+0x118>)
 800788a:	781b      	ldrb	r3, [r3, #0]
 800788c:	4619      	mov	r1, r3
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f7ff f9ad 	bl	8006bee <USBD_ClrClassConfig>
        break;
 8007894:	bf00      	nop
    }
  }
}
 8007896:	3708      	adds	r7, #8
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}
 800789c:	200002a4 	.word	0x200002a4

080078a0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b082      	sub	sp, #8
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
 80078a8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	88db      	ldrh	r3, [r3, #6]
 80078ae:	2b01      	cmp	r3, #1
 80078b0:	d004      	beq.n	80078bc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80078b2:	6839      	ldr	r1, [r7, #0]
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f000 f8c9 	bl	8007a4c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80078ba:	e022      	b.n	8007902 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078c2:	2b02      	cmp	r3, #2
 80078c4:	dc02      	bgt.n	80078cc <USBD_GetConfig+0x2c>
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	dc03      	bgt.n	80078d2 <USBD_GetConfig+0x32>
 80078ca:	e015      	b.n	80078f8 <USBD_GetConfig+0x58>
 80078cc:	2b03      	cmp	r3, #3
 80078ce:	d00b      	beq.n	80078e8 <USBD_GetConfig+0x48>
 80078d0:	e012      	b.n	80078f8 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2200      	movs	r2, #0
 80078d6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	3308      	adds	r3, #8
 80078dc:	2201      	movs	r2, #1
 80078de:	4619      	mov	r1, r3
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f000 f91d 	bl	8007b20 <USBD_CtlSendData>
        break;
 80078e6:	e00c      	b.n	8007902 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	3304      	adds	r3, #4
 80078ec:	2201      	movs	r2, #1
 80078ee:	4619      	mov	r1, r3
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 f915 	bl	8007b20 <USBD_CtlSendData>
        break;
 80078f6:	e004      	b.n	8007902 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80078f8:	6839      	ldr	r1, [r7, #0]
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 f8a6 	bl	8007a4c <USBD_CtlError>
        break;
 8007900:	bf00      	nop
}
 8007902:	bf00      	nop
 8007904:	3708      	adds	r7, #8
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}

0800790a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800790a:	b580      	push	{r7, lr}
 800790c:	b082      	sub	sp, #8
 800790e:	af00      	add	r7, sp, #0
 8007910:	6078      	str	r0, [r7, #4]
 8007912:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800791a:	3b01      	subs	r3, #1
 800791c:	2b02      	cmp	r3, #2
 800791e:	d81e      	bhi.n	800795e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	88db      	ldrh	r3, [r3, #6]
 8007924:	2b02      	cmp	r3, #2
 8007926:	d004      	beq.n	8007932 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007928:	6839      	ldr	r1, [r7, #0]
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f000 f88e 	bl	8007a4c <USBD_CtlError>
        break;
 8007930:	e01a      	b.n	8007968 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2201      	movs	r2, #1
 8007936:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800793e:	2b00      	cmp	r3, #0
 8007940:	d005      	beq.n	800794e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	68db      	ldr	r3, [r3, #12]
 8007946:	f043 0202 	orr.w	r2, r3, #2
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	330c      	adds	r3, #12
 8007952:	2202      	movs	r2, #2
 8007954:	4619      	mov	r1, r3
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 f8e2 	bl	8007b20 <USBD_CtlSendData>
      break;
 800795c:	e004      	b.n	8007968 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800795e:	6839      	ldr	r1, [r7, #0]
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f000 f873 	bl	8007a4c <USBD_CtlError>
      break;
 8007966:	bf00      	nop
  }
}
 8007968:	bf00      	nop
 800796a:	3708      	adds	r7, #8
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}

08007970 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b082      	sub	sp, #8
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	885b      	ldrh	r3, [r3, #2]
 800797e:	2b01      	cmp	r3, #1
 8007980:	d106      	bne.n	8007990 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2201      	movs	r2, #1
 8007986:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 f908 	bl	8007ba0 <USBD_CtlSendStatus>
  }
}
 8007990:	bf00      	nop
 8007992:	3708      	adds	r7, #8
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}

08007998 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b082      	sub	sp, #8
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079a8:	3b01      	subs	r3, #1
 80079aa:	2b02      	cmp	r3, #2
 80079ac:	d80b      	bhi.n	80079c6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	885b      	ldrh	r3, [r3, #2]
 80079b2:	2b01      	cmp	r3, #1
 80079b4:	d10c      	bne.n	80079d0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2200      	movs	r2, #0
 80079ba:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 f8ee 	bl	8007ba0 <USBD_CtlSendStatus>
      }
      break;
 80079c4:	e004      	b.n	80079d0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80079c6:	6839      	ldr	r1, [r7, #0]
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f000 f83f 	bl	8007a4c <USBD_CtlError>
      break;
 80079ce:	e000      	b.n	80079d2 <USBD_ClrFeature+0x3a>
      break;
 80079d0:	bf00      	nop
  }
}
 80079d2:	bf00      	nop
 80079d4:	3708      	adds	r7, #8
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}

080079da <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80079da:	b480      	push	{r7}
 80079dc:	b083      	sub	sp, #12
 80079de:	af00      	add	r7, sp, #0
 80079e0:	6078      	str	r0, [r7, #4]
 80079e2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	781a      	ldrb	r2, [r3, #0]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	785a      	ldrb	r2, [r3, #1]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	3302      	adds	r3, #2
 80079f8:	781b      	ldrb	r3, [r3, #0]
 80079fa:	461a      	mov	r2, r3
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	3303      	adds	r3, #3
 8007a00:	781b      	ldrb	r3, [r3, #0]
 8007a02:	021b      	lsls	r3, r3, #8
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	4413      	add	r3, r2
 8007a08:	b29a      	uxth	r2, r3
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	3304      	adds	r3, #4
 8007a12:	781b      	ldrb	r3, [r3, #0]
 8007a14:	461a      	mov	r2, r3
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	3305      	adds	r3, #5
 8007a1a:	781b      	ldrb	r3, [r3, #0]
 8007a1c:	021b      	lsls	r3, r3, #8
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	4413      	add	r3, r2
 8007a22:	b29a      	uxth	r2, r3
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	3306      	adds	r3, #6
 8007a2c:	781b      	ldrb	r3, [r3, #0]
 8007a2e:	461a      	mov	r2, r3
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	3307      	adds	r3, #7
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	021b      	lsls	r3, r3, #8
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	4413      	add	r3, r2
 8007a3c:	b29a      	uxth	r2, r3
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	80da      	strh	r2, [r3, #6]

}
 8007a42:	bf00      	nop
 8007a44:	370c      	adds	r7, #12
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bc80      	pop	{r7}
 8007a4a:	4770      	bx	lr

08007a4c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b082      	sub	sp, #8
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007a56:	2180      	movs	r1, #128	@ 0x80
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f000 fb65 	bl	8008128 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007a5e:	2100      	movs	r1, #0
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f000 fb61 	bl	8008128 <USBD_LL_StallEP>
}
 8007a66:	bf00      	nop
 8007a68:	3708      	adds	r7, #8
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}

08007a6e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007a6e:	b580      	push	{r7, lr}
 8007a70:	b086      	sub	sp, #24
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	60f8      	str	r0, [r7, #12]
 8007a76:	60b9      	str	r1, [r7, #8]
 8007a78:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d032      	beq.n	8007aea <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007a84:	68f8      	ldr	r0, [r7, #12]
 8007a86:	f000 f834 	bl	8007af2 <USBD_GetLen>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	3301      	adds	r3, #1
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	005b      	lsls	r3, r3, #1
 8007a92:	b29a      	uxth	r2, r3
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007a98:	7dfb      	ldrb	r3, [r7, #23]
 8007a9a:	1c5a      	adds	r2, r3, #1
 8007a9c:	75fa      	strb	r2, [r7, #23]
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	4413      	add	r3, r2
 8007aa4:	687a      	ldr	r2, [r7, #4]
 8007aa6:	7812      	ldrb	r2, [r2, #0]
 8007aa8:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007aaa:	7dfb      	ldrb	r3, [r7, #23]
 8007aac:	1c5a      	adds	r2, r3, #1
 8007aae:	75fa      	strb	r2, [r7, #23]
 8007ab0:	461a      	mov	r2, r3
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	4413      	add	r3, r2
 8007ab6:	2203      	movs	r2, #3
 8007ab8:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007aba:	e012      	b.n	8007ae2 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	1c5a      	adds	r2, r3, #1
 8007ac0:	60fa      	str	r2, [r7, #12]
 8007ac2:	7dfa      	ldrb	r2, [r7, #23]
 8007ac4:	1c51      	adds	r1, r2, #1
 8007ac6:	75f9      	strb	r1, [r7, #23]
 8007ac8:	4611      	mov	r1, r2
 8007aca:	68ba      	ldr	r2, [r7, #8]
 8007acc:	440a      	add	r2, r1
 8007ace:	781b      	ldrb	r3, [r3, #0]
 8007ad0:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007ad2:	7dfb      	ldrb	r3, [r7, #23]
 8007ad4:	1c5a      	adds	r2, r3, #1
 8007ad6:	75fa      	strb	r2, [r7, #23]
 8007ad8:	461a      	mov	r2, r3
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	4413      	add	r3, r2
 8007ade:	2200      	movs	r2, #0
 8007ae0:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	781b      	ldrb	r3, [r3, #0]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d1e8      	bne.n	8007abc <USBD_GetString+0x4e>
    }
  }
}
 8007aea:	bf00      	nop
 8007aec:	3718      	adds	r7, #24
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}

08007af2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007af2:	b480      	push	{r7}
 8007af4:	b085      	sub	sp, #20
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007afa:	2300      	movs	r3, #0
 8007afc:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007afe:	e005      	b.n	8007b0c <USBD_GetLen+0x1a>
  {
    len++;
 8007b00:	7bfb      	ldrb	r3, [r7, #15]
 8007b02:	3301      	adds	r3, #1
 8007b04:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	3301      	adds	r3, #1
 8007b0a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	781b      	ldrb	r3, [r3, #0]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d1f5      	bne.n	8007b00 <USBD_GetLen+0xe>
  }

  return len;
 8007b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3714      	adds	r7, #20
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bc80      	pop	{r7}
 8007b1e:	4770      	bx	lr

08007b20 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b084      	sub	sp, #16
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	60f8      	str	r0, [r7, #12]
 8007b28:	60b9      	str	r1, [r7, #8]
 8007b2a:	4613      	mov	r3, r2
 8007b2c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2202      	movs	r2, #2
 8007b32:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007b36:	88fa      	ldrh	r2, [r7, #6]
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007b3c:	88fa      	ldrh	r2, [r7, #6]
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007b42:	88fb      	ldrh	r3, [r7, #6]
 8007b44:	68ba      	ldr	r2, [r7, #8]
 8007b46:	2100      	movs	r1, #0
 8007b48:	68f8      	ldr	r0, [r7, #12]
 8007b4a:	f000 fb75 	bl	8008238 <USBD_LL_Transmit>

  return USBD_OK;
 8007b4e:	2300      	movs	r3, #0
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3710      	adds	r7, #16
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}

08007b58 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b084      	sub	sp, #16
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	60f8      	str	r0, [r7, #12]
 8007b60:	60b9      	str	r1, [r7, #8]
 8007b62:	4613      	mov	r3, r2
 8007b64:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007b66:	88fb      	ldrh	r3, [r7, #6]
 8007b68:	68ba      	ldr	r2, [r7, #8]
 8007b6a:	2100      	movs	r1, #0
 8007b6c:	68f8      	ldr	r0, [r7, #12]
 8007b6e:	f000 fb63 	bl	8008238 <USBD_LL_Transmit>

  return USBD_OK;
 8007b72:	2300      	movs	r3, #0
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3710      	adds	r7, #16
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}

08007b7c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b084      	sub	sp, #16
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	60f8      	str	r0, [r7, #12]
 8007b84:	60b9      	str	r1, [r7, #8]
 8007b86:	4613      	mov	r3, r2
 8007b88:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007b8a:	88fb      	ldrh	r3, [r7, #6]
 8007b8c:	68ba      	ldr	r2, [r7, #8]
 8007b8e:	2100      	movs	r1, #0
 8007b90:	68f8      	ldr	r0, [r7, #12]
 8007b92:	f000 fb74 	bl	800827e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007b96:	2300      	movs	r3, #0
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3710      	adds	r7, #16
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b082      	sub	sp, #8
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2204      	movs	r2, #4
 8007bac:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	2100      	movs	r1, #0
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 fb3e 	bl	8008238 <USBD_LL_Transmit>

  return USBD_OK;
 8007bbc:	2300      	movs	r3, #0
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3708      	adds	r7, #8
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}

08007bc6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007bc6:	b580      	push	{r7, lr}
 8007bc8:	b082      	sub	sp, #8
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2205      	movs	r2, #5
 8007bd2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	2200      	movs	r2, #0
 8007bda:	2100      	movs	r1, #0
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f000 fb4e 	bl	800827e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007be2:	2300      	movs	r3, #0
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3708      	adds	r7, #8
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}

08007bec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	490e      	ldr	r1, [pc, #56]	@ (8007c2c <MX_USB_DEVICE_Init+0x40>)
 8007bf4:	480e      	ldr	r0, [pc, #56]	@ (8007c30 <MX_USB_DEVICE_Init+0x44>)
 8007bf6:	f7fe ff81 	bl	8006afc <USBD_Init>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d001      	beq.n	8007c04 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007c00:	f7f8 fcbb 	bl	800057a <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8007c04:	490b      	ldr	r1, [pc, #44]	@ (8007c34 <MX_USB_DEVICE_Init+0x48>)
 8007c06:	480a      	ldr	r0, [pc, #40]	@ (8007c30 <MX_USB_DEVICE_Init+0x44>)
 8007c08:	f7fe ffa3 	bl	8006b52 <USBD_RegisterClass>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d001      	beq.n	8007c16 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007c12:	f7f8 fcb2 	bl	800057a <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007c16:	4806      	ldr	r0, [pc, #24]	@ (8007c30 <MX_USB_DEVICE_Init+0x44>)
 8007c18:	f7fe ffb4 	bl	8006b84 <USBD_Start>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d001      	beq.n	8007c26 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8007c22:	f7f8 fcaa 	bl	800057a <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007c26:	bf00      	nop
 8007c28:	bd80      	pop	{r7, pc}
 8007c2a:	bf00      	nop
 8007c2c:	20000114 	.word	0x20000114
 8007c30:	200002a8 	.word	0x200002a8
 8007c34:	2000000c 	.word	0x2000000c

08007c38 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b083      	sub	sp, #12
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	4603      	mov	r3, r0
 8007c40:	6039      	str	r1, [r7, #0]
 8007c42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	2212      	movs	r2, #18
 8007c48:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007c4a:	4b03      	ldr	r3, [pc, #12]	@ (8007c58 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	370c      	adds	r7, #12
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bc80      	pop	{r7}
 8007c54:	4770      	bx	lr
 8007c56:	bf00      	nop
 8007c58:	20000130 	.word	0x20000130

08007c5c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b083      	sub	sp, #12
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	4603      	mov	r3, r0
 8007c64:	6039      	str	r1, [r7, #0]
 8007c66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	2204      	movs	r2, #4
 8007c6c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007c6e:	4b03      	ldr	r3, [pc, #12]	@ (8007c7c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	370c      	adds	r7, #12
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bc80      	pop	{r7}
 8007c78:	4770      	bx	lr
 8007c7a:	bf00      	nop
 8007c7c:	20000144 	.word	0x20000144

08007c80 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b082      	sub	sp, #8
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	4603      	mov	r3, r0
 8007c88:	6039      	str	r1, [r7, #0]
 8007c8a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007c8c:	79fb      	ldrb	r3, [r7, #7]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d105      	bne.n	8007c9e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007c92:	683a      	ldr	r2, [r7, #0]
 8007c94:	4907      	ldr	r1, [pc, #28]	@ (8007cb4 <USBD_FS_ProductStrDescriptor+0x34>)
 8007c96:	4808      	ldr	r0, [pc, #32]	@ (8007cb8 <USBD_FS_ProductStrDescriptor+0x38>)
 8007c98:	f7ff fee9 	bl	8007a6e <USBD_GetString>
 8007c9c:	e004      	b.n	8007ca8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007c9e:	683a      	ldr	r2, [r7, #0]
 8007ca0:	4904      	ldr	r1, [pc, #16]	@ (8007cb4 <USBD_FS_ProductStrDescriptor+0x34>)
 8007ca2:	4805      	ldr	r0, [pc, #20]	@ (8007cb8 <USBD_FS_ProductStrDescriptor+0x38>)
 8007ca4:	f7ff fee3 	bl	8007a6e <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ca8:	4b02      	ldr	r3, [pc, #8]	@ (8007cb4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3708      	adds	r7, #8
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
 8007cb2:	bf00      	nop
 8007cb4:	2000056c 	.word	0x2000056c
 8007cb8:	080083cc 	.word	0x080083cc

08007cbc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b082      	sub	sp, #8
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	6039      	str	r1, [r7, #0]
 8007cc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007cc8:	683a      	ldr	r2, [r7, #0]
 8007cca:	4904      	ldr	r1, [pc, #16]	@ (8007cdc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007ccc:	4804      	ldr	r0, [pc, #16]	@ (8007ce0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007cce:	f7ff fece 	bl	8007a6e <USBD_GetString>
  return USBD_StrDesc;
 8007cd2:	4b02      	ldr	r3, [pc, #8]	@ (8007cdc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3708      	adds	r7, #8
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}
 8007cdc:	2000056c 	.word	0x2000056c
 8007ce0:	080083e4 	.word	0x080083e4

08007ce4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b082      	sub	sp, #8
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	4603      	mov	r3, r0
 8007cec:	6039      	str	r1, [r7, #0]
 8007cee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	221a      	movs	r2, #26
 8007cf4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007cf6:	f000 f843 	bl	8007d80 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007cfa:	4b02      	ldr	r3, [pc, #8]	@ (8007d04 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3708      	adds	r7, #8
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}
 8007d04:	20000148 	.word	0x20000148

08007d08 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b082      	sub	sp, #8
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	4603      	mov	r3, r0
 8007d10:	6039      	str	r1, [r7, #0]
 8007d12:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007d14:	79fb      	ldrb	r3, [r7, #7]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d105      	bne.n	8007d26 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007d1a:	683a      	ldr	r2, [r7, #0]
 8007d1c:	4907      	ldr	r1, [pc, #28]	@ (8007d3c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007d1e:	4808      	ldr	r0, [pc, #32]	@ (8007d40 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007d20:	f7ff fea5 	bl	8007a6e <USBD_GetString>
 8007d24:	e004      	b.n	8007d30 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007d26:	683a      	ldr	r2, [r7, #0]
 8007d28:	4904      	ldr	r1, [pc, #16]	@ (8007d3c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007d2a:	4805      	ldr	r0, [pc, #20]	@ (8007d40 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007d2c:	f7ff fe9f 	bl	8007a6e <USBD_GetString>
  }
  return USBD_StrDesc;
 8007d30:	4b02      	ldr	r3, [pc, #8]	@ (8007d3c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3708      	adds	r7, #8
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}
 8007d3a:	bf00      	nop
 8007d3c:	2000056c 	.word	0x2000056c
 8007d40:	080083f8 	.word	0x080083f8

08007d44 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b082      	sub	sp, #8
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	6039      	str	r1, [r7, #0]
 8007d4e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007d50:	79fb      	ldrb	r3, [r7, #7]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d105      	bne.n	8007d62 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007d56:	683a      	ldr	r2, [r7, #0]
 8007d58:	4907      	ldr	r1, [pc, #28]	@ (8007d78 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007d5a:	4808      	ldr	r0, [pc, #32]	@ (8007d7c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007d5c:	f7ff fe87 	bl	8007a6e <USBD_GetString>
 8007d60:	e004      	b.n	8007d6c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007d62:	683a      	ldr	r2, [r7, #0]
 8007d64:	4904      	ldr	r1, [pc, #16]	@ (8007d78 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007d66:	4805      	ldr	r0, [pc, #20]	@ (8007d7c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007d68:	f7ff fe81 	bl	8007a6e <USBD_GetString>
  }
  return USBD_StrDesc;
 8007d6c:	4b02      	ldr	r3, [pc, #8]	@ (8007d78 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3708      	adds	r7, #8
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}
 8007d76:	bf00      	nop
 8007d78:	2000056c 	.word	0x2000056c
 8007d7c:	08008404 	.word	0x08008404

08007d80 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007d86:	4b0f      	ldr	r3, [pc, #60]	@ (8007dc4 <Get_SerialNum+0x44>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007d8c:	4b0e      	ldr	r3, [pc, #56]	@ (8007dc8 <Get_SerialNum+0x48>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007d92:	4b0e      	ldr	r3, [pc, #56]	@ (8007dcc <Get_SerialNum+0x4c>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007d98:	68fa      	ldr	r2, [r7, #12]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	4413      	add	r3, r2
 8007d9e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d009      	beq.n	8007dba <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007da6:	2208      	movs	r2, #8
 8007da8:	4909      	ldr	r1, [pc, #36]	@ (8007dd0 <Get_SerialNum+0x50>)
 8007daa:	68f8      	ldr	r0, [r7, #12]
 8007dac:	f000 f814 	bl	8007dd8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007db0:	2204      	movs	r2, #4
 8007db2:	4908      	ldr	r1, [pc, #32]	@ (8007dd4 <Get_SerialNum+0x54>)
 8007db4:	68b8      	ldr	r0, [r7, #8]
 8007db6:	f000 f80f 	bl	8007dd8 <IntToUnicode>
  }
}
 8007dba:	bf00      	nop
 8007dbc:	3710      	adds	r7, #16
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}
 8007dc2:	bf00      	nop
 8007dc4:	1ffff7e8 	.word	0x1ffff7e8
 8007dc8:	1ffff7ec 	.word	0x1ffff7ec
 8007dcc:	1ffff7f0 	.word	0x1ffff7f0
 8007dd0:	2000014a 	.word	0x2000014a
 8007dd4:	2000015a 	.word	0x2000015a

08007dd8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b087      	sub	sp, #28
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	60f8      	str	r0, [r7, #12]
 8007de0:	60b9      	str	r1, [r7, #8]
 8007de2:	4613      	mov	r3, r2
 8007de4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007de6:	2300      	movs	r3, #0
 8007de8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007dea:	2300      	movs	r3, #0
 8007dec:	75fb      	strb	r3, [r7, #23]
 8007dee:	e027      	b.n	8007e40 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	0f1b      	lsrs	r3, r3, #28
 8007df4:	2b09      	cmp	r3, #9
 8007df6:	d80b      	bhi.n	8007e10 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	0f1b      	lsrs	r3, r3, #28
 8007dfc:	b2da      	uxtb	r2, r3
 8007dfe:	7dfb      	ldrb	r3, [r7, #23]
 8007e00:	005b      	lsls	r3, r3, #1
 8007e02:	4619      	mov	r1, r3
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	440b      	add	r3, r1
 8007e08:	3230      	adds	r2, #48	@ 0x30
 8007e0a:	b2d2      	uxtb	r2, r2
 8007e0c:	701a      	strb	r2, [r3, #0]
 8007e0e:	e00a      	b.n	8007e26 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	0f1b      	lsrs	r3, r3, #28
 8007e14:	b2da      	uxtb	r2, r3
 8007e16:	7dfb      	ldrb	r3, [r7, #23]
 8007e18:	005b      	lsls	r3, r3, #1
 8007e1a:	4619      	mov	r1, r3
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	440b      	add	r3, r1
 8007e20:	3237      	adds	r2, #55	@ 0x37
 8007e22:	b2d2      	uxtb	r2, r2
 8007e24:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	011b      	lsls	r3, r3, #4
 8007e2a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007e2c:	7dfb      	ldrb	r3, [r7, #23]
 8007e2e:	005b      	lsls	r3, r3, #1
 8007e30:	3301      	adds	r3, #1
 8007e32:	68ba      	ldr	r2, [r7, #8]
 8007e34:	4413      	add	r3, r2
 8007e36:	2200      	movs	r2, #0
 8007e38:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007e3a:	7dfb      	ldrb	r3, [r7, #23]
 8007e3c:	3301      	adds	r3, #1
 8007e3e:	75fb      	strb	r3, [r7, #23]
 8007e40:	7dfa      	ldrb	r2, [r7, #23]
 8007e42:	79fb      	ldrb	r3, [r7, #7]
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d3d3      	bcc.n	8007df0 <IntToUnicode+0x18>
  }
}
 8007e48:	bf00      	nop
 8007e4a:	bf00      	nop
 8007e4c:	371c      	adds	r7, #28
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bc80      	pop	{r7}
 8007e52:	4770      	bx	lr

08007e54 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b084      	sub	sp, #16
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a0d      	ldr	r2, [pc, #52]	@ (8007e98 <HAL_PCD_MspInit+0x44>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d113      	bne.n	8007e8e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007e66:	4b0d      	ldr	r3, [pc, #52]	@ (8007e9c <HAL_PCD_MspInit+0x48>)
 8007e68:	69db      	ldr	r3, [r3, #28]
 8007e6a:	4a0c      	ldr	r2, [pc, #48]	@ (8007e9c <HAL_PCD_MspInit+0x48>)
 8007e6c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007e70:	61d3      	str	r3, [r2, #28]
 8007e72:	4b0a      	ldr	r3, [pc, #40]	@ (8007e9c <HAL_PCD_MspInit+0x48>)
 8007e74:	69db      	ldr	r3, [r3, #28]
 8007e76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e7a:	60fb      	str	r3, [r7, #12]
 8007e7c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007e7e:	2200      	movs	r2, #0
 8007e80:	2100      	movs	r1, #0
 8007e82:	2014      	movs	r0, #20
 8007e84:	f7f9 f841 	bl	8000f0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007e88:	2014      	movs	r0, #20
 8007e8a:	f7f9 f85a 	bl	8000f42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007e8e:	bf00      	nop
 8007e90:	3710      	adds	r7, #16
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}
 8007e96:	bf00      	nop
 8007e98:	40005c00 	.word	0x40005c00
 8007e9c:	40021000 	.word	0x40021000

08007ea0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b082      	sub	sp, #8
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8007eb4:	4619      	mov	r1, r3
 8007eb6:	4610      	mov	r0, r2
 8007eb8:	f7fe feac 	bl	8006c14 <USBD_LL_SetupStage>
}
 8007ebc:	bf00      	nop
 8007ebe:	3708      	adds	r7, #8
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b082      	sub	sp, #8
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	460b      	mov	r3, r1
 8007ece:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8007ed6:	78fa      	ldrb	r2, [r7, #3]
 8007ed8:	6879      	ldr	r1, [r7, #4]
 8007eda:	4613      	mov	r3, r2
 8007edc:	009b      	lsls	r3, r3, #2
 8007ede:	4413      	add	r3, r2
 8007ee0:	00db      	lsls	r3, r3, #3
 8007ee2:	440b      	add	r3, r1
 8007ee4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007ee8:	681a      	ldr	r2, [r3, #0]
 8007eea:	78fb      	ldrb	r3, [r7, #3]
 8007eec:	4619      	mov	r1, r3
 8007eee:	f7fe fede 	bl	8006cae <USBD_LL_DataOutStage>
}
 8007ef2:	bf00      	nop
 8007ef4:	3708      	adds	r7, #8
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}

08007efa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007efa:	b580      	push	{r7, lr}
 8007efc:	b082      	sub	sp, #8
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	6078      	str	r0, [r7, #4]
 8007f02:	460b      	mov	r3, r1
 8007f04:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8007f0c:	78fa      	ldrb	r2, [r7, #3]
 8007f0e:	6879      	ldr	r1, [r7, #4]
 8007f10:	4613      	mov	r3, r2
 8007f12:	009b      	lsls	r3, r3, #2
 8007f14:	4413      	add	r3, r2
 8007f16:	00db      	lsls	r3, r3, #3
 8007f18:	440b      	add	r3, r1
 8007f1a:	3324      	adds	r3, #36	@ 0x24
 8007f1c:	681a      	ldr	r2, [r3, #0]
 8007f1e:	78fb      	ldrb	r3, [r7, #3]
 8007f20:	4619      	mov	r1, r3
 8007f22:	f7fe ff35 	bl	8006d90 <USBD_LL_DataInStage>
}
 8007f26:	bf00      	nop
 8007f28:	3708      	adds	r7, #8
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}

08007f2e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f2e:	b580      	push	{r7, lr}
 8007f30:	b082      	sub	sp, #8
 8007f32:	af00      	add	r7, sp, #0
 8007f34:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f7ff f845 	bl	8006fcc <USBD_LL_SOF>
}
 8007f42:	bf00      	nop
 8007f44:	3708      	adds	r7, #8
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}

08007f4a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f4a:	b580      	push	{r7, lr}
 8007f4c:	b084      	sub	sp, #16
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007f52:	2301      	movs	r3, #1
 8007f54:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	799b      	ldrb	r3, [r3, #6]
 8007f5a:	2b02      	cmp	r3, #2
 8007f5c:	d001      	beq.n	8007f62 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007f5e:	f7f8 fb0c 	bl	800057a <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007f68:	7bfa      	ldrb	r2, [r7, #15]
 8007f6a:	4611      	mov	r1, r2
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f7fe fff5 	bl	8006f5c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f7fe ffae 	bl	8006eda <USBD_LL_Reset>
}
 8007f7e:	bf00      	nop
 8007f80:	3710      	adds	r7, #16
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}
	...

08007f88 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b082      	sub	sp, #8
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007f96:	4618      	mov	r0, r3
 8007f98:	f7fe ffef 	bl	8006f7a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	7a9b      	ldrb	r3, [r3, #10]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d005      	beq.n	8007fb0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007fa4:	4b04      	ldr	r3, [pc, #16]	@ (8007fb8 <HAL_PCD_SuspendCallback+0x30>)
 8007fa6:	691b      	ldr	r3, [r3, #16]
 8007fa8:	4a03      	ldr	r2, [pc, #12]	@ (8007fb8 <HAL_PCD_SuspendCallback+0x30>)
 8007faa:	f043 0306 	orr.w	r3, r3, #6
 8007fae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007fb0:	bf00      	nop
 8007fb2:	3708      	adds	r7, #8
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}
 8007fb8:	e000ed00 	.word	0xe000ed00

08007fbc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b082      	sub	sp, #8
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f7fe ffe9 	bl	8006fa2 <USBD_LL_Resume>
}
 8007fd0:	bf00      	nop
 8007fd2:	3708      	adds	r7, #8
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}

08007fd8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b082      	sub	sp, #8
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007fe0:	4a1f      	ldr	r2, [pc, #124]	@ (8008060 <USBD_LL_Init+0x88>)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	4a1d      	ldr	r2, [pc, #116]	@ (8008060 <USBD_LL_Init+0x88>)
 8007fec:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007ff0:	4b1b      	ldr	r3, [pc, #108]	@ (8008060 <USBD_LL_Init+0x88>)
 8007ff2:	4a1c      	ldr	r2, [pc, #112]	@ (8008064 <USBD_LL_Init+0x8c>)
 8007ff4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007ff6:	4b1a      	ldr	r3, [pc, #104]	@ (8008060 <USBD_LL_Init+0x88>)
 8007ff8:	2208      	movs	r2, #8
 8007ffa:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007ffc:	4b18      	ldr	r3, [pc, #96]	@ (8008060 <USBD_LL_Init+0x88>)
 8007ffe:	2202      	movs	r2, #2
 8008000:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008002:	4b17      	ldr	r3, [pc, #92]	@ (8008060 <USBD_LL_Init+0x88>)
 8008004:	2200      	movs	r2, #0
 8008006:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008008:	4b15      	ldr	r3, [pc, #84]	@ (8008060 <USBD_LL_Init+0x88>)
 800800a:	2200      	movs	r2, #0
 800800c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800800e:	4b14      	ldr	r3, [pc, #80]	@ (8008060 <USBD_LL_Init+0x88>)
 8008010:	2200      	movs	r2, #0
 8008012:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008014:	4812      	ldr	r0, [pc, #72]	@ (8008060 <USBD_LL_Init+0x88>)
 8008016:	f7f9 fa8f 	bl	8001538 <HAL_PCD_Init>
 800801a:	4603      	mov	r3, r0
 800801c:	2b00      	cmp	r3, #0
 800801e:	d001      	beq.n	8008024 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008020:	f7f8 faab 	bl	800057a <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800802a:	2318      	movs	r3, #24
 800802c:	2200      	movs	r2, #0
 800802e:	2100      	movs	r1, #0
 8008030:	f7fa ff89 	bl	8002f46 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800803a:	2358      	movs	r3, #88	@ 0x58
 800803c:	2200      	movs	r2, #0
 800803e:	2180      	movs	r1, #128	@ 0x80
 8008040:	f7fa ff81 	bl	8002f46 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800804a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800804e:	2200      	movs	r2, #0
 8008050:	2181      	movs	r1, #129	@ 0x81
 8008052:	f7fa ff78 	bl	8002f46 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 8008056:	2300      	movs	r3, #0
}
 8008058:	4618      	mov	r0, r3
 800805a:	3708      	adds	r7, #8
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}
 8008060:	2000076c 	.word	0x2000076c
 8008064:	40005c00 	.word	0x40005c00

08008068 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b084      	sub	sp, #16
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008070:	2300      	movs	r3, #0
 8008072:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008074:	2300      	movs	r3, #0
 8008076:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800807e:	4618      	mov	r0, r3
 8008080:	f7f9 fb50 	bl	8001724 <HAL_PCD_Start>
 8008084:	4603      	mov	r3, r0
 8008086:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008088:	7bfb      	ldrb	r3, [r7, #15]
 800808a:	4618      	mov	r0, r3
 800808c:	f000 f93a 	bl	8008304 <USBD_Get_USB_Status>
 8008090:	4603      	mov	r3, r0
 8008092:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008094:	7bbb      	ldrb	r3, [r7, #14]
}
 8008096:	4618      	mov	r0, r3
 8008098:	3710      	adds	r7, #16
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}

0800809e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800809e:	b580      	push	{r7, lr}
 80080a0:	b084      	sub	sp, #16
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	6078      	str	r0, [r7, #4]
 80080a6:	4608      	mov	r0, r1
 80080a8:	4611      	mov	r1, r2
 80080aa:	461a      	mov	r2, r3
 80080ac:	4603      	mov	r3, r0
 80080ae:	70fb      	strb	r3, [r7, #3]
 80080b0:	460b      	mov	r3, r1
 80080b2:	70bb      	strb	r3, [r7, #2]
 80080b4:	4613      	mov	r3, r2
 80080b6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080b8:	2300      	movs	r3, #0
 80080ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080bc:	2300      	movs	r3, #0
 80080be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80080c6:	78bb      	ldrb	r3, [r7, #2]
 80080c8:	883a      	ldrh	r2, [r7, #0]
 80080ca:	78f9      	ldrb	r1, [r7, #3]
 80080cc:	f7f9 fca4 	bl	8001a18 <HAL_PCD_EP_Open>
 80080d0:	4603      	mov	r3, r0
 80080d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080d4:	7bfb      	ldrb	r3, [r7, #15]
 80080d6:	4618      	mov	r0, r3
 80080d8:	f000 f914 	bl	8008304 <USBD_Get_USB_Status>
 80080dc:	4603      	mov	r3, r0
 80080de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3710      	adds	r7, #16
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}

080080ea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080ea:	b580      	push	{r7, lr}
 80080ec:	b084      	sub	sp, #16
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
 80080f2:	460b      	mov	r3, r1
 80080f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080f6:	2300      	movs	r3, #0
 80080f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080fa:	2300      	movs	r3, #0
 80080fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008104:	78fa      	ldrb	r2, [r7, #3]
 8008106:	4611      	mov	r1, r2
 8008108:	4618      	mov	r0, r3
 800810a:	f7f9 fce2 	bl	8001ad2 <HAL_PCD_EP_Close>
 800810e:	4603      	mov	r3, r0
 8008110:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008112:	7bfb      	ldrb	r3, [r7, #15]
 8008114:	4618      	mov	r0, r3
 8008116:	f000 f8f5 	bl	8008304 <USBD_Get_USB_Status>
 800811a:	4603      	mov	r3, r0
 800811c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800811e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008120:	4618      	mov	r0, r3
 8008122:	3710      	adds	r7, #16
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}

08008128 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b084      	sub	sp, #16
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	460b      	mov	r3, r1
 8008132:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008134:	2300      	movs	r3, #0
 8008136:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008138:	2300      	movs	r3, #0
 800813a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008142:	78fa      	ldrb	r2, [r7, #3]
 8008144:	4611      	mov	r1, r2
 8008146:	4618      	mov	r0, r3
 8008148:	f7f9 fd73 	bl	8001c32 <HAL_PCD_EP_SetStall>
 800814c:	4603      	mov	r3, r0
 800814e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008150:	7bfb      	ldrb	r3, [r7, #15]
 8008152:	4618      	mov	r0, r3
 8008154:	f000 f8d6 	bl	8008304 <USBD_Get_USB_Status>
 8008158:	4603      	mov	r3, r0
 800815a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800815c:	7bbb      	ldrb	r3, [r7, #14]
}
 800815e:	4618      	mov	r0, r3
 8008160:	3710      	adds	r7, #16
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}

08008166 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008166:	b580      	push	{r7, lr}
 8008168:	b084      	sub	sp, #16
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]
 800816e:	460b      	mov	r3, r1
 8008170:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008172:	2300      	movs	r3, #0
 8008174:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008176:	2300      	movs	r3, #0
 8008178:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008180:	78fa      	ldrb	r2, [r7, #3]
 8008182:	4611      	mov	r1, r2
 8008184:	4618      	mov	r0, r3
 8008186:	f7f9 fdb4 	bl	8001cf2 <HAL_PCD_EP_ClrStall>
 800818a:	4603      	mov	r3, r0
 800818c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800818e:	7bfb      	ldrb	r3, [r7, #15]
 8008190:	4618      	mov	r0, r3
 8008192:	f000 f8b7 	bl	8008304 <USBD_Get_USB_Status>
 8008196:	4603      	mov	r3, r0
 8008198:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800819a:	7bbb      	ldrb	r3, [r7, #14]
}
 800819c:	4618      	mov	r0, r3
 800819e:	3710      	adds	r7, #16
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}

080081a4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b085      	sub	sp, #20
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	460b      	mov	r3, r1
 80081ae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80081b6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80081b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	da0b      	bge.n	80081d8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80081c0:	78fb      	ldrb	r3, [r7, #3]
 80081c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80081c6:	68f9      	ldr	r1, [r7, #12]
 80081c8:	4613      	mov	r3, r2
 80081ca:	009b      	lsls	r3, r3, #2
 80081cc:	4413      	add	r3, r2
 80081ce:	00db      	lsls	r3, r3, #3
 80081d0:	440b      	add	r3, r1
 80081d2:	3312      	adds	r3, #18
 80081d4:	781b      	ldrb	r3, [r3, #0]
 80081d6:	e00b      	b.n	80081f0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80081d8:	78fb      	ldrb	r3, [r7, #3]
 80081da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80081de:	68f9      	ldr	r1, [r7, #12]
 80081e0:	4613      	mov	r3, r2
 80081e2:	009b      	lsls	r3, r3, #2
 80081e4:	4413      	add	r3, r2
 80081e6:	00db      	lsls	r3, r3, #3
 80081e8:	440b      	add	r3, r1
 80081ea:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 80081ee:	781b      	ldrb	r3, [r3, #0]
  }
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	3714      	adds	r7, #20
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bc80      	pop	{r7}
 80081f8:	4770      	bx	lr

080081fa <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80081fa:	b580      	push	{r7, lr}
 80081fc:	b084      	sub	sp, #16
 80081fe:	af00      	add	r7, sp, #0
 8008200:	6078      	str	r0, [r7, #4]
 8008202:	460b      	mov	r3, r1
 8008204:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008206:	2300      	movs	r3, #0
 8008208:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800820a:	2300      	movs	r3, #0
 800820c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008214:	78fa      	ldrb	r2, [r7, #3]
 8008216:	4611      	mov	r1, r2
 8008218:	4618      	mov	r0, r3
 800821a:	f7f9 fbd9 	bl	80019d0 <HAL_PCD_SetAddress>
 800821e:	4603      	mov	r3, r0
 8008220:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008222:	7bfb      	ldrb	r3, [r7, #15]
 8008224:	4618      	mov	r0, r3
 8008226:	f000 f86d 	bl	8008304 <USBD_Get_USB_Status>
 800822a:	4603      	mov	r3, r0
 800822c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800822e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008230:	4618      	mov	r0, r3
 8008232:	3710      	adds	r7, #16
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b086      	sub	sp, #24
 800823c:	af00      	add	r7, sp, #0
 800823e:	60f8      	str	r0, [r7, #12]
 8008240:	607a      	str	r2, [r7, #4]
 8008242:	461a      	mov	r2, r3
 8008244:	460b      	mov	r3, r1
 8008246:	72fb      	strb	r3, [r7, #11]
 8008248:	4613      	mov	r3, r2
 800824a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800824c:	2300      	movs	r3, #0
 800824e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008250:	2300      	movs	r3, #0
 8008252:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800825a:	893b      	ldrh	r3, [r7, #8]
 800825c:	7af9      	ldrb	r1, [r7, #11]
 800825e:	687a      	ldr	r2, [r7, #4]
 8008260:	f7f9 fcb0 	bl	8001bc4 <HAL_PCD_EP_Transmit>
 8008264:	4603      	mov	r3, r0
 8008266:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008268:	7dfb      	ldrb	r3, [r7, #23]
 800826a:	4618      	mov	r0, r3
 800826c:	f000 f84a 	bl	8008304 <USBD_Get_USB_Status>
 8008270:	4603      	mov	r3, r0
 8008272:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008274:	7dbb      	ldrb	r3, [r7, #22]
}
 8008276:	4618      	mov	r0, r3
 8008278:	3718      	adds	r7, #24
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}

0800827e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800827e:	b580      	push	{r7, lr}
 8008280:	b086      	sub	sp, #24
 8008282:	af00      	add	r7, sp, #0
 8008284:	60f8      	str	r0, [r7, #12]
 8008286:	607a      	str	r2, [r7, #4]
 8008288:	461a      	mov	r2, r3
 800828a:	460b      	mov	r3, r1
 800828c:	72fb      	strb	r3, [r7, #11]
 800828e:	4613      	mov	r3, r2
 8008290:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008292:	2300      	movs	r3, #0
 8008294:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008296:	2300      	movs	r3, #0
 8008298:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80082a0:	893b      	ldrh	r3, [r7, #8]
 80082a2:	7af9      	ldrb	r1, [r7, #11]
 80082a4:	687a      	ldr	r2, [r7, #4]
 80082a6:	f7f9 fc5c 	bl	8001b62 <HAL_PCD_EP_Receive>
 80082aa:	4603      	mov	r3, r0
 80082ac:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082ae:	7dfb      	ldrb	r3, [r7, #23]
 80082b0:	4618      	mov	r0, r3
 80082b2:	f000 f827 	bl	8008304 <USBD_Get_USB_Status>
 80082b6:	4603      	mov	r3, r0
 80082b8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80082ba:	7dbb      	ldrb	r3, [r7, #22]
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3718      	adds	r7, #24
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}

080082c4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b083      	sub	sp, #12
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80082cc:	4b02      	ldr	r3, [pc, #8]	@ (80082d8 <USBD_static_malloc+0x14>)
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	370c      	adds	r7, #12
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bc80      	pop	{r7}
 80082d6:	4770      	bx	lr
 80082d8:	20000a44 	.word	0x20000a44

080082dc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80082dc:	b480      	push	{r7}
 80082de:	b083      	sub	sp, #12
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]

}
 80082e4:	bf00      	nop
 80082e6:	370c      	adds	r7, #12
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bc80      	pop	{r7}
 80082ec:	4770      	bx	lr

080082ee <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082ee:	b480      	push	{r7}
 80082f0:	b083      	sub	sp, #12
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	6078      	str	r0, [r7, #4]
 80082f6:	460b      	mov	r3, r1
 80082f8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80082fa:	bf00      	nop
 80082fc:	370c      	adds	r7, #12
 80082fe:	46bd      	mov	sp, r7
 8008300:	bc80      	pop	{r7}
 8008302:	4770      	bx	lr

08008304 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008304:	b480      	push	{r7}
 8008306:	b085      	sub	sp, #20
 8008308:	af00      	add	r7, sp, #0
 800830a:	4603      	mov	r3, r0
 800830c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800830e:	2300      	movs	r3, #0
 8008310:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008312:	79fb      	ldrb	r3, [r7, #7]
 8008314:	2b03      	cmp	r3, #3
 8008316:	d817      	bhi.n	8008348 <USBD_Get_USB_Status+0x44>
 8008318:	a201      	add	r2, pc, #4	@ (adr r2, 8008320 <USBD_Get_USB_Status+0x1c>)
 800831a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800831e:	bf00      	nop
 8008320:	08008331 	.word	0x08008331
 8008324:	08008337 	.word	0x08008337
 8008328:	0800833d 	.word	0x0800833d
 800832c:	08008343 	.word	0x08008343
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008330:	2300      	movs	r3, #0
 8008332:	73fb      	strb	r3, [r7, #15]
    break;
 8008334:	e00b      	b.n	800834e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008336:	2302      	movs	r3, #2
 8008338:	73fb      	strb	r3, [r7, #15]
    break;
 800833a:	e008      	b.n	800834e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800833c:	2301      	movs	r3, #1
 800833e:	73fb      	strb	r3, [r7, #15]
    break;
 8008340:	e005      	b.n	800834e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008342:	2302      	movs	r3, #2
 8008344:	73fb      	strb	r3, [r7, #15]
    break;
 8008346:	e002      	b.n	800834e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008348:	2302      	movs	r3, #2
 800834a:	73fb      	strb	r3, [r7, #15]
    break;
 800834c:	bf00      	nop
  }
  return usb_status;
 800834e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008350:	4618      	mov	r0, r3
 8008352:	3714      	adds	r7, #20
 8008354:	46bd      	mov	sp, r7
 8008356:	bc80      	pop	{r7}
 8008358:	4770      	bx	lr
 800835a:	bf00      	nop

0800835c <memset>:
 800835c:	4603      	mov	r3, r0
 800835e:	4402      	add	r2, r0
 8008360:	4293      	cmp	r3, r2
 8008362:	d100      	bne.n	8008366 <memset+0xa>
 8008364:	4770      	bx	lr
 8008366:	f803 1b01 	strb.w	r1, [r3], #1
 800836a:	e7f9      	b.n	8008360 <memset+0x4>

0800836c <__libc_init_array>:
 800836c:	b570      	push	{r4, r5, r6, lr}
 800836e:	2600      	movs	r6, #0
 8008370:	4d0c      	ldr	r5, [pc, #48]	@ (80083a4 <__libc_init_array+0x38>)
 8008372:	4c0d      	ldr	r4, [pc, #52]	@ (80083a8 <__libc_init_array+0x3c>)
 8008374:	1b64      	subs	r4, r4, r5
 8008376:	10a4      	asrs	r4, r4, #2
 8008378:	42a6      	cmp	r6, r4
 800837a:	d109      	bne.n	8008390 <__libc_init_array+0x24>
 800837c:	f000 f81a 	bl	80083b4 <_init>
 8008380:	2600      	movs	r6, #0
 8008382:	4d0a      	ldr	r5, [pc, #40]	@ (80083ac <__libc_init_array+0x40>)
 8008384:	4c0a      	ldr	r4, [pc, #40]	@ (80083b0 <__libc_init_array+0x44>)
 8008386:	1b64      	subs	r4, r4, r5
 8008388:	10a4      	asrs	r4, r4, #2
 800838a:	42a6      	cmp	r6, r4
 800838c:	d105      	bne.n	800839a <__libc_init_array+0x2e>
 800838e:	bd70      	pop	{r4, r5, r6, pc}
 8008390:	f855 3b04 	ldr.w	r3, [r5], #4
 8008394:	4798      	blx	r3
 8008396:	3601      	adds	r6, #1
 8008398:	e7ee      	b.n	8008378 <__libc_init_array+0xc>
 800839a:	f855 3b04 	ldr.w	r3, [r5], #4
 800839e:	4798      	blx	r3
 80083a0:	3601      	adds	r6, #1
 80083a2:	e7f2      	b.n	800838a <__libc_init_array+0x1e>
 80083a4:	08008440 	.word	0x08008440
 80083a8:	08008440 	.word	0x08008440
 80083ac:	08008440 	.word	0x08008440
 80083b0:	08008444 	.word	0x08008444

080083b4 <_init>:
 80083b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083b6:	bf00      	nop
 80083b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083ba:	bc08      	pop	{r3}
 80083bc:	469e      	mov	lr, r3
 80083be:	4770      	bx	lr

080083c0 <_fini>:
 80083c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083c2:	bf00      	nop
 80083c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083c6:	bc08      	pop	{r3}
 80083c8:	469e      	mov	lr, r3
 80083ca:	4770      	bx	lr
